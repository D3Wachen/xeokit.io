[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "viewer/.external-ecmascript.js",
    "static": true,
    "longname": "viewer/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "viewer/ModelsPlugin.js",
    "content": "import {_apply} from \"../xeogl/xeogl.module.js\"\nimport {Plugin} from \"./Plugin.js\";\n\n/**\n Base class for {@link Viewer} plugins that load models.\n\n @class ModelsPlugin\n */\nclass ModelsPlugin extends Plugin {\n\n    /**\n     * @constructor\n     *\n     * @param {String} [id] ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     * @param {Viewer} viewer The Viewer.\n     * @param {Class} modelClass The JavaScript class for the type of model this plugin will manage.\n     * @param {Object} cfg  Plugin configuration.\n     */\n    constructor(id, viewer, modelClass, cfg) {\n\n        super(id, viewer, cfg);\n\n        /**\n         * @private\n         */\n        this._modelClass = modelClass;\n\n        /**\n         * <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Models</a> currently loaded by this Plugin.\n         * @type {{String:Model}}\n         */\n        this.models = {};\n\n        /**\n         * Saves load params for bookmarks.\n         * @private\n         */\n        this._modelLoadParams = {};\n    }\n\n    /**\n     * Loads a model into this Plugin's {@link Viewer}.\n     *\n     * @param {*} params  Loading params.\n     * @param {String} params.id ID to assign to the model, unique among all components in the Viewer's xeogl.Scene.\n     * @returns {{xeogl.Model}} A <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> representing the loaded model\n     */\n    load(params) {\n        const id = params.id;\n        if (!id) {\n            this.error(\"load() param expected: id\");\n            return;\n        }\n        if (this.viewer.scene.components[id]) {\n            this.error(`Component with this ID already exists in viewer: ${id}`);\n            return;\n        }\n        const model = new this._modelClass(this.viewer.scene, params);\n        this._modelLoadParams[id] = _apply(params, {});\n        this.models[id] = model;\n        model.once(\"destroyed\", () => {\n            delete this.models[id];\n            delete this._modelLoadParams[id];\n        });\n        return model;\n    }\n\n    /**\n     * Unloads a model that was previously loaded by this Plugin.\n     *\n     * @param {String} id  ID of model to unload.\n     */\n    unload(id) {\n        const model = this.models;\n        if (!model) {\n            this.error(`unload() model with this ID not found: ${id}`);\n            return;\n        }\n        model.destroy();\n    }\n\n    /**\n     * @private\n     */\n    send(name, value) {\n        switch (name) {\n            case \"clear\":\n                this.clear();\n                break;\n        }\n    }\n\n    /**\n     * @private\n     */\n    writeBookmark(bookmark) {\n        bookmark[this.id] = this._modelLoadParams;\n    }\n\n    /**\n     * @private\n     */\n    readBookmarkAsynch(bookmark, ok) {\n        this.clear();\n        var modelLoadParams = bookmark[this.id];\n        if (modelLoadParams) {\n            var modelParamsList = [];\n            for (const id in modelLoadParams) {\n                modelParamsList.push(modelLoadParams[id]);\n            }\n            if (modelParamsList.length === 0) {\n                ok();\n                return;\n            }\n            this._loadModel(modelParamsList, modelParamsList.length - 1, ok);\n        }\n    }\n\n    _loadModel(modelLoadParams, i, ok) {\n        this.load(modelLoadParams[i], function () {\n            if (i === 0) {\n                ok();\n            } else {\n                this._loadModel(modelLoadParams, i - 1, ok);\n            }\n        });\n    }\n\n    /**\n     * Unloads models loaded by this plugin.\n     */\n    clear() {\n        for (const id in this.models) {\n            this.models[id].destroy();\n        }\n    }\n\n    /**\n     * Destroys this plugin, after first destroying any models it has loaded.\n     */\n    destroy() {\n        this.clear();\n        super.destroy();\n    }\n}\n\nexport {ModelsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/ModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ModelsPlugin",
    "memberof": "viewer/ModelsPlugin.js",
    "static": true,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/ModelsPlugin.js",
    "importStyle": "{ModelsPlugin}",
    "description": "Base class for {@link Viewer} plugins that load models.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ModelsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "id",
        "description": "ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      },
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "modelClass",
        "description": "The JavaScript class for the type of model this plugin will manage."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_modelClass",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#_modelClass",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "models",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#models",
    "access": "public",
    "description": "<a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Models</a> currently loaded by this Plugin.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "{String:Model}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_modelLoadParams",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#_modelLoadParams",
    "access": "private",
    "description": "Saves load params for bookmarks.",
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#load",
    "access": "public",
    "description": "Loads a model into this Plugin's {@link Viewer}.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{xeogl.Model}} A <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> representing the loaded model"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Loading params."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "ID to assign to the model, unique among all components in the Viewer's xeogl.Scene."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{xeogl.Model}"
      ],
      "spread": false,
      "description": "A <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> representing the loaded model"
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "unload",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#unload",
    "access": "public",
    "description": "Unloads a model that was previously loaded by this Plugin.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of model to unload."
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "send",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#send",
    "access": "private",
    "description": "",
    "lineNumber": 85,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "writeBookmark",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#writeBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 96,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "readBookmarkAsynch",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#readBookmarkAsynch",
    "access": "private",
    "description": "",
    "lineNumber": 103,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "_loadModel",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#_loadModel",
    "access": "private",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelLoadParams",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "clear",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#clear",
    "access": "public",
    "description": "Unloads models loaded by this plugin.",
    "lineNumber": 132,
    "params": [],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/ModelsPlugin.js~ModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/ModelsPlugin.js~ModelsPlugin#destroy",
    "access": "public",
    "description": "Destroys this plugin, after first destroying any models it has loaded.",
    "lineNumber": 141,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "viewer/Plugin.js",
    "content": "/**\n @desc Base class for {@link Viewer} plugin classes.\n */\nclass Plugin {\n\n    /**\n     * Creates this Plugin and installs it into the given {@link Viewer}.\n     *\n     * @param {string} id ID for this plugin, unique among all plugins in the viewer.\n     * @param {Viewer} viewer The viewer.\n     * @param {Object} [cfg] Options\n     */\n    constructor(id, viewer, cfg) {\n\n        /**\n         * ID for this Plugin, unique within its {@link Viewer}.\n         *\n         * @type {string}\n         */\n        this.id = (cfg && cfg.id) ? cfg.id : id;\n\n        /**\n         * The Viewer that contains this Plugin.\n         *\n         * @type {Viewer}\n         */\n        this.viewer = viewer;\n\n        /**\n         * Subscriptions to events fired on this Plugin.\n         * @private\n         */\n        this._eventSubs = {};\n\n        viewer.addPlugin(this);\n    }\n\n    /**\n     Subscribes to an event fired at this Plugin.\n\n     @param {String} event The event\n     @param {Function} callback Callback fired on the event\n     */\n    on(event, callback) {\n        let subs = this._eventSubs[event];\n        if (!subs) {\n            subs = [];\n            this._eventSubs[event] = subs;\n        }\n        subs.push(callback);\n    }\n\n    /**\n     Fires an event at this Plugin.\n\n     @param {String} event The event type name\n     @param {Object} value The event parameters\n     */\n    fire(event, value) {\n        const subs = this._eventSubs[event];\n        if (subs) {\n            for (let i = 0, len = subs.length; i < len; i++) {\n                subs[i](value);\n            }\n        }\n    }\n\n    /**\n     * Logs a message to the JavaScript developer console, prefixed with the ID of this Plugin.\n     *\n     * @param {String} msg The error message\n     */\n    log(msg) {\n        console.log(`[xeoviewer plugin ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Logs a warning message to the JavaScript developer console, prefixed with the ID of this Plugin.\n     *\n     * @param {String} msg The error message\n     */\n    warn(msg) {\n        console.warn(`[xeoviewer plugin ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Logs an error message to the JavaScript developer console, prefixed with the ID of this Plugin.\n     *\n     * @param {String} msg The error message\n     */\n    error(msg) {\n        console.error(`[xeoviewer plugin ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Sends a message to this Plugin.\n     *\n     * @private\n     */\n    send(name, value) {\n        //...\n    }\n\n    /**\n     * Saves the state of this Plugin to a bookmark.\n     *\n     * @private\n     */\n    writeBookmark(bookmark) {\n        //...\n    }\n\n    /**\n     * Restores the state of this Plugin from a bookmark.\n     *\n     * @private\n     */\n    readBookmark(bookmark) {\n        //...\n    }\n\n    /**\n     * Destroys this Plugin and removes it from its {@link Viewer}.\n     */\n    destroy() {\n        this.viewer.removePlugin(this);\n    }\n}\n\nexport {Plugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/Plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "Plugin",
    "memberof": "viewer/Plugin.js",
    "static": true,
    "longname": "viewer/Plugin.js~Plugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/Plugin.js",
    "importStyle": "{Plugin}",
    "description": "Base class for {@link Viewer} plugin classes.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#constructor",
    "access": "public",
    "description": "Creates this Plugin and installs it into the given {@link Viewer}.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID for this plugin, unique among all plugins in the viewer."
      },
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Options"
      }
    ]
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "id",
    "memberof": "viewer/Plugin.js~Plugin",
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#id",
    "access": "public",
    "description": "ID for this Plugin, unique within its {@link Viewer}.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "viewer",
    "memberof": "viewer/Plugin.js~Plugin",
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#viewer",
    "access": "public",
    "description": "The Viewer that contains this Plugin.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Viewer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_eventSubs",
    "memberof": "viewer/Plugin.js~Plugin",
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#_eventSubs",
    "access": "private",
    "description": "Subscriptions to events fired on this Plugin.",
    "lineNumber": 33,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "on",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#on",
    "access": "public",
    "description": "Subscribes to an event fired at this Plugin.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback fired on the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "fire",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#fire",
    "access": "public",
    "description": "Fires an event at this Plugin.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event type name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The event parameters"
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "log",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#log",
    "access": "public",
    "description": "Logs a message to the JavaScript developer console, prefixed with the ID of this Plugin.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The error message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "warn",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#warn",
    "access": "public",
    "description": "Logs a warning message to the JavaScript developer console, prefixed with the ID of this Plugin.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The error message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "error",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#error",
    "access": "public",
    "description": "Logs an error message to the JavaScript developer console, prefixed with the ID of this Plugin.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The error message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "send",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#send",
    "access": "private",
    "description": "Sends a message to this Plugin.",
    "lineNumber": 100,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "writeBookmark",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#writeBookmark",
    "access": "private",
    "description": "Saves the state of this Plugin to a bookmark.",
    "lineNumber": 109,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "readBookmark",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#readBookmark",
    "access": "private",
    "description": "Restores the state of this Plugin from a bookmark.",
    "lineNumber": 118,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/Plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Plugin.js~Plugin#destroy",
    "access": "public",
    "description": "Destroys this Plugin and removes it from its {@link Viewer}.",
    "lineNumber": 125,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "viewer/Viewer.js",
    "content": "import {math, Scene, CameraFlightAnimation, CameraControl} from \"../xeogl/xeogl.module.js\";\n\n/**\n * The WebGL-based 3D Viewer class at the heart of the xeokit SDK.\n *\n * A Viewer wraps a single <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.\n *\n * Add {@link Plugin}s to a Viewer to extend its functionality.\n *\n * Save and load the state of a Viewer as JSON with {@link Viewer#getBookmark} and {@link Viewer#setBookmark}. Installed\n * {@link Plugin} instances will also save and load their state to and from the JSON.\n *\n * @public\n */\nclass Viewer {\n\n    /**\n     * @constructor\n     * @param {Object} cfg  Viewer configuration.\n     * @param {String} [cfg.id] Optional ID for this Viewer, defaults to the ID of its <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>, which xeogl automatically generates.\n     */\n    constructor(cfg) {\n\n        /**\n         * Metadata about this Viewer.\n         *\n         * @property meta\n         * @type {{system: string}}\n         */\n        this.meta = {\n            systemId: \"xeoviewer.org\",\n            authoring_tool: \"xeoviewer.org\"\n        };\n\n        /**\n         * Subscriptions to events sent with {@link fire}.\n         * @private\n         */\n        this._eventSubs = {};\n\n        /**\n         * The Viewer's <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.\n         *\n         * @property scene\n         * @type {xeogl.Scene}\n         */\n        this.scene = new Scene({\n            canvas: cfg.canvasId,\n            webgl2: false,\n            contextAttr: {preserveDrawingBuffer: true},\n            transparent: !!cfg.transparent,\n            gammaInput: true,\n            gammaOutput: true\n        });\n\n        /**\n         * The Viewer's ID.\n         * @property id\n         *\n         * @type {String|Number}\n         */\n        this.id = cfg.id || this.scene.id;\n\n\n        /**\n         * The Viewer's <a href=\"http://xeogl.org/docs/classes/CameraFlightAnimation.html\">xeogl.CameraFlightAnimation</a>, which\n         * is used to fly the <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>'s <a href=\"http://xeogl.org/docs/classes/Camera.html\">xeogl.Camera</a> to given targets.\n         *\n         * @property cameraFlight\n         * @type {xeogl.CameraFlightAnimation}\n         */\n        this.cameraFlight = new CameraFlightAnimation(this.scene, {\n            fitFOV: 45,\n            duration: 0.1\n        });\n\n        /**\n         * The Viewer's <a href=\"http://xeogl.org/docs/classes/CameraControl.html\">xeogl.CameraControl</a>, which\n         * controls the <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>'s <a href=\"http://xeogl.org/docs/classes/Camera.html\">xeogl.Camera</a> with mouse,  touch and keyboard input.\n         *\n         * @property cameraControl\n         * @type {xeogl.CameraControl}\n         */\n        this.cameraControl = new CameraControl(this.scene, {});\n\n        /**\n         * {@link Plugin}s that have been installed into this Viewer, mapped to their IDs.\n         *\n         * @property plugins\n         * @type {{string:Plugin}}\n         */\n        this.plugins = {};\n    }\n\n    /**\n     * Subscribes to an event fired at this Viewer.\n     *\n     * @param {String} event The event\n     * @param {Function} callback Callback fired on the event\n     */\n    on(event, callback) {\n        let subs = this._eventSubs[event];\n        if (!subs) {\n            subs = [];\n            this._eventSubs[event] = subs;\n        }\n        subs.push(callback);\n    }\n\n    /**\n     * Fires an event at this Viewer.\n     *\n     * @param {String} event Event name\n     * @param {Object} value Event parameters\n     */\n    fire(event, value) {\n        const subs = this._eventSubs[event];\n        if (subs) {\n            for (let i = 0, len = subs.length; i < len; i++) {\n                subs[i](value);\n            }\n        }\n    }\n\n    /**\n     * Logs a message to the JavaScript developer console, prefixed with the ID of this Viewer.\n     *\n     * @param {String} msg The message\n     */\n    log(msg) {\n        console.log(`[xeoviewer viewer ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Logs an error message to the JavaScript developer console, prefixed with the ID of this Viewer.\n     *\n     * @param {String} msg The error message\n     */\n    error(msg) {\n        console.error(`[xeoviewer viewer ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Installs a Plugin.\n     *\n     * @private\n     */\n    addPlugin(plugin) {\n        if (this.plugins[plugin.id]) {\n            this.error(`Plugin with this ID already installed: ${plugin.id}`);\n        }\n        this.plugins[plugin.id] = plugin;\n        this.log(`Installed plugin: ${plugin.id}`);\n    }\n\n    /**\n     * Uninstalls a Plugin, clearing content from it first.\n     *\n     * @private\n     */\n    removePlugin(plugin) {\n        const installedPlugin = this.plugins[plugin.id];\n        if (!installedPlugin) {\n            this.error(`Can't remove plugin - no plugin with this ID is installed: ${plugin.id}`);\n            return;\n        }\n        if (!installedPlugin !== plugin) {\n            this.error(`Can't remove plugin - a different plugin is installed with this ID: ${plugin.id}`);\n            return;\n        }\n        if (installedPlugin.clear) {\n            installedPlugin.clear();\n        }\n        delete this.plugins[id];\n        this.log(`Removed plugin: ${plugin.id}`);\n    }\n\n    /**\n     * Sends a message to installed Plugins.\n     *\n     * The message can optionally be accompanied by a value.\n     * @private\n     */\n    sendToPlugins(name, value) {\n        const plugins = this.plugins;\n        for (const id in plugins) {\n            if (plugins.hasOwnProperty(id)) {\n                plugins[id].send(name, value);\n            }\n        }\n    }\n\n    /**\n     * Clears content from this Viewer and all installed {@link Plugin}s.\n     */\n    clear() {\n        this.sendToPlugins(\"clear\");\n    }\n\n    /**\n     * Resets viewing state.\n     *\n     * Sends a \"resetView\" message to each installed {@link Plugin}.\n     */\n    resetView() {\n        this.sendToPlugins(\"resetView\");\n\n        // TODO\n        // this.show();\n        // this.hide(\"space\");\n        // this.hide(\"DEFAULT\");\n    }\n\n    /**\n     * Gets a JSON bookmark that captures the state of the Viewer and all installed {@link Plugin}s.\n     *\n     * @returns {*} The bookmark\n     */\n    getBookmark() {\n\n        const vecToArray = math.vecToArray;\n        const bookmark = {};\n        let id;\n        let model;\n        let modelState;\n        let position;\n        let scale;\n        let rotation;\n        let object;\n        let objectState;\n\n        /*\n         // Save object states that have non-default properties\n\n         const objectStates = [];\n         for (id in this.scene.entities) {\n         if (this.scene.entities.hasOwnProperty(id)) {\n         object = this.scene.entities[id];\n         objectState = null;\n         position = getPosition(object);\n         if (position) {\n         objectState = objectState || {id};\n         objectState.position = position;\n         }\n         scale = getScale(object);\n         if (scale) {\n         objectState = objectState || {id};\n         objectState.scale = scale;\n         }\n         rotation = getRotation(object);\n         if (rotation) {\n         objectState = objectState || {id};\n         objectState.rotation = rotation;\n         }\n         if (!object.visible) {\n         objectState = objectState || {id};\n         objectState.visible = false;\n         }\n         if (object.outlined) {\n         objectState = objectState || {id};\n         objectState.outlined = true;\n         }\n         if (!object.clippable) {\n         objectState = objectState || {id};\n         objectState.clippable = false;\n         }\n         if (!object.pickable) {\n         objectState = objectState || {id};\n         objectState.pickable = false;\n         }\n         if (!object.pickable) {\n         objectState = objectState || {id};\n         objectState.pickable = false;\n         }\n         if (objectState) {\n         objectStates.push(objectState);\n         }\n         }\n         }\n         if (objectStates.length > 0) {\n         bookmark.objects = objectStates;\n         }\n\n         const camera = this.camera;\n\n         bookmark.lookat = {\n         eye: vecToArray(camera.eye),\n         look: vecToArray(camera.look),\n         up: vecToArray(camera.up),\n         worldZUp: worldZUp === true\n         };\n\n         // Save other viewer properties that have non-default values\n\n         if (camera.gimbalLock !== true) {\n         bookmark.gimbalLock = camera.gimbalLock;\n         }\n\n         if (camera.projection !== \"perspective\") {\n         bookmark.projection = camera.projection;\n         }\n\n         if (camera.perspective.near !== 0.1) {\n         bookmark.perspectiveNear = camera.perspective.near;\n         }\n\n         if (camera.perspective.far !== 10000.0) {\n         bookmark.perspectiveFar = camera.perspective.far;\n         }\n\n         if (camera.perspective.fov !== 60.0) {\n         bookmark.perspectiveFOV = camera.perspective.fov;\n         }\n\n         if (camera.ortho.near !== 0.1) {\n         bookmark.orthoNear = camera.ortho.near;\n         }\n\n         if (camera.ortho.far !== 10000.0) {\n         bookmark.orthoFar = camera.ortho.far;\n         }\n\n         if (camera.ortho.scale !== 1.0) {\n         bookmark.orthoScale = camera.ortho.scale;\n         }\n\n         bookmark.viewFitFOV = this.cameraFlight.fitFOV;\n         bookmark.viewFitDuration = this.cameraFlight.duration;\n         */\n        // Save plugin states\n\n        for (const pluginId in this.plugins) {\n            if (this.plugins.hasOwnProperty(pluginId)) {\n                const plugin = this.plugins[pluginId];\n                if (plugin.writeBookmark) {\n                    plugin.writeBookmark(bookmark);\n                }\n            }\n        }\n\n        return bookmark;\n    }\n\n    /**\n     * Restores the Viewer and all installed {@link Plugin}s to the state captured in the given JSON bookmark.\n     *\n     * @param {*} bookmark\n     */\n    setBookmark(bookmark) {\n\n        for (const pluginId in this.plugins) {\n            if (this.plugins.hasOwnProperty(pluginId)) {\n                const plugin = this.plugins[pluginId];\n                if (plugin.readBookmark) {\n                    plugin.readBookmark(bookmark);\n                }\n            }\n        }\n    }\n\n    getSnapshot(params = {}, ok) {\n        return this.scene.canvas.getSnapshot({\n            width: params.width, // Defaults to size of canvas\n            height: params.height,\n            format: params.format || \"png\" // Options are \"jpeg\" (default), \"png\" and \"bmp\"\n        }, ok);\n    }\n\n    destroy() {\n\n    }\n}\n\nfunction getPosition(object) {\n    const position = object.position;\n    if (position[0] !== 0 || position[1] !== 0 || position[2] !== 0) {\n        return vecToArray(position);\n    }\n}\n\nfunction getScale(object) {\n    const scale = object.scale;\n    if (scale[0] !== 1 || scale[1] !== 1 || scale[2] !== 1) {\n        return vecToArray(scale);\n    }\n}\n\nfunction getRotation(object) {\n    const rotation = object.rotation;\n    if (rotation[0] !== 0 || rotation[1] !== 0 || rotation[2] !== 0) {\n        return vecToArray(rotation);\n    }\n}\n\nexport {Viewer}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/Viewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "getPosition",
    "memberof": "viewer/Viewer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/Viewer.js~getPosition",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/Viewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "getScale",
    "memberof": "viewer/Viewer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/Viewer.js~getScale",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/Viewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "getRotation",
    "memberof": "viewer/Viewer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/Viewer.js~getRotation",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/Viewer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "Viewer",
    "memberof": "viewer/Viewer.js",
    "static": true,
    "longname": "viewer/Viewer.js~Viewer",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/Viewer.js",
    "importStyle": "{Viewer}",
    "description": "The WebGL-based 3D Viewer class at the heart of the xeokit SDK.\n\nA Viewer wraps a single <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.\n\nAdd {@link Plugin}s to a Viewer to extend its functionality.\n\nSave and load the state of a Viewer as JSON with {@link Viewer#getBookmark} and {@link Viewer#setBookmark}. Installed\n{@link Plugin} instances will also save and load their state to and from the JSON.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Viewer configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID for this Viewer, defaults to the ID of its <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>, which xeogl automatically generates."
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "meta",
    "memberof": "viewer/Viewer.js~Viewer",
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#meta",
    "access": "public",
    "description": "Metadata about this Viewer.",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "meta",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{system: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "_eventSubs",
    "memberof": "viewer/Viewer.js~Viewer",
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#_eventSubs",
    "access": "private",
    "description": "Subscriptions to events sent with {@link fire}.",
    "lineNumber": 39,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "scene",
    "memberof": "viewer/Viewer.js~Viewer",
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#scene",
    "access": "public",
    "description": "The Viewer's <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.",
    "lineNumber": 47,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "xeogl.Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "id",
    "memberof": "viewer/Viewer.js~Viewer",
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#id",
    "access": "public",
    "description": "The Viewer's ID.",
    "lineNumber": 62,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String",
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "cameraFlight",
    "memberof": "viewer/Viewer.js~Viewer",
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#cameraFlight",
    "access": "public",
    "description": "The Viewer's <a href=\"http://xeogl.org/docs/classes/CameraFlightAnimation.html\">xeogl.CameraFlightAnimation</a>, which\nis used to fly the <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>'s <a href=\"http://xeogl.org/docs/classes/Camera.html\">xeogl.Camera</a> to given targets.",
    "lineNumber": 72,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cameraFlight",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "xeogl.CameraFlightAnimation"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "cameraControl",
    "memberof": "viewer/Viewer.js~Viewer",
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#cameraControl",
    "access": "public",
    "description": "The Viewer's <a href=\"http://xeogl.org/docs/classes/CameraControl.html\">xeogl.CameraControl</a>, which\ncontrols the <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>'s <a href=\"http://xeogl.org/docs/classes/Camera.html\">xeogl.Camera</a> with mouse,  touch and keyboard input.",
    "lineNumber": 84,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cameraControl",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "xeogl.CameraControl"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "plugins",
    "memberof": "viewer/Viewer.js~Viewer",
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#plugins",
    "access": "public",
    "description": "{@link Plugin}s that have been installed into this Viewer, mapped to their IDs.",
    "lineNumber": 92,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "plugins",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{string:Plugin}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "on",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#on",
    "access": "public",
    "description": "Subscribes to an event fired at this Viewer.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback fired on the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "fire",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#fire",
    "access": "public",
    "description": "Fires an event at this Viewer.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Event parameters"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "log",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#log",
    "access": "public",
    "description": "Logs a message to the JavaScript developer console, prefixed with the ID of this Viewer.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "error",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#error",
    "access": "public",
    "description": "Logs an error message to the JavaScript developer console, prefixed with the ID of this Viewer.",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The error message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "addPlugin",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#addPlugin",
    "access": "private",
    "description": "Installs a Plugin.",
    "lineNumber": 148,
    "ignore": true,
    "params": [
      {
        "name": "plugin",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "removePlugin",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#removePlugin",
    "access": "private",
    "description": "Uninstalls a Plugin, clearing content from it first.",
    "lineNumber": 161,
    "ignore": true,
    "params": [
      {
        "name": "plugin",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "sendToPlugins",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#sendToPlugins",
    "access": "private",
    "description": "Sends a message to installed Plugins.\n\nThe message can optionally be accompanied by a value.",
    "lineNumber": 184,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "clear",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#clear",
    "access": "public",
    "description": "Clears content from this Viewer and all installed {@link Plugin}s.",
    "lineNumber": 196,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "resetView",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#resetView",
    "access": "public",
    "description": "Resets viewing state.\n\nSends a \"resetView\" message to each installed {@link Plugin}.",
    "lineNumber": 205,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getBookmark",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#getBookmark",
    "access": "public",
    "description": "Gets a JSON bookmark that captures the state of the Viewer and all installed {@link Plugin}s.",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} The bookmark"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The bookmark"
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "setBookmark",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#setBookmark",
    "access": "public",
    "description": "Restores the Viewer and all installed {@link Plugin}s to the state captured in the given JSON bookmark.",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bookmark",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getSnapshot",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#getSnapshot",
    "access": "public",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/Viewer.js~Viewer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "viewer/plugins/AxisGizmoPlugin/AxisGizmoPlugin.js",
    "content": "import {VectorTextGeometry} from \"../../../xeogl/VectorTextGeometry/VectorTextGeometry.js\"\nimport {Plugin} from \"./../../../viewer/Plugin.js\";\nimport {\n    Scene,\n    AmbientLight,\n    DirLight,\n    Mesh,\n    CylinderGeometry,\n    SphereGeometry,\n    PhongMaterial,\n    math\n} from \"../../../xeogl/xeogl.module.js\"\n\n\n/**\n * Viewer plugin that shows the axii of the World-space coordinate system.\n *\n * @class AxisGizmoPlugin\n */\nclass AxisGizmoPlugin extends Plugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"AxisGizmo\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     * @param {Array} [cfg.size=[250,250]] Initial size in pixels.\n     */\n    constructor(viewer, cfg) {\n\n        cfg = cfg || {};\n\n        super(\"AxisGizmo\", viewer, cfg);\n\n        var camera = viewer.scene.camera;\n\n        var size = cfg.size || [250, 250];\n\n        var canvas = camera.scene.canvas;\n\n        // Create canvas for this gizmo\n\n        var canvasId = \"xeogl-axisHelper-canvas-\" + math.createUUID();\n        var body = document.getElementsByTagName(\"body\")[0];\n        var div = document.createElement('div');\n        var style = div.style;\n        style.height = size[0] + \"px\";\n        style.width = size[1] + \"px\";\n        style.padding = \"0\";\n        style.margin = \"0\";\n        style.float = \"left\";\n        style.left = \"410px\";\n        style.bottom = \"350px\";\n        style.position = \"absolute\";\n        style[\"z-index\"] = \"1000000\";\n        // style[\"background-color\"] = \"rgba(0,0,0,0.3)\";\n        div.innerHTML += '<canvas id=\"' + canvasId + '\" style=\"width: ' + size[0] + 'px; height: ' + size[1] + 'px; float: left; margin: 0; padding: 0;\"></canvas>';\n        body.appendChild(div);\n        var helperCanvas = document.getElementById(canvasId);\n\n        canvas.on(\"boundary\",\n            function (boundary) {\n                style.left = boundary[0] + 10 + \"px\";\n                style.bottom = (boundary[0] + 20) + \"px\";\n            });\n\n        // The scene containing this helper\n        var scene = new Scene({\n            canvas: helperCanvas,\n            transparent: true\n        });\n\n        // Custom lights\n        scene.clearLights();\n\n        new AmbientLight(scene, {\n            color: [0.45, 0.45, 0.5],\n            intensity: 0.9\n        });\n\n        new DirLight(scene, {\n            dir: [-0.5, 0.5, -0.6],\n            color: [0.8, 0.8, 0.7],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        new DirLight(scene, {\n            dir: [0.5, -0.5, -0.6],\n            color: [0.8, 0.8, 0.8],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        // Rotate helper in synch with target camera\n\n        var helperCamera = scene.camera;\n\n        camera.on(\"matrix\", function () {\n\n            var eye = camera.eye;\n            var look = camera.look;\n            var up = camera.up;\n\n            var eyeLook = math.mulVec3Scalar(math.normalizeVec3(math.subVec3(eye, look, [])), 22);\n\n            helperCamera.look = [0, 0, 0];\n            helperCamera.eye = eyeLook;\n            helperCamera.up = up;\n        });\n\n        // ----------------- Components that are shared among more than one mesh ---------------\n\n        var arrowHead = new CylinderGeometry(scene, {\n            radiusTop: 0.01,\n            radiusBottom: 0.6,\n            height: 1.7,\n            radialSegments: 20,\n            heightSegments: 1,\n            openEnded: false\n        });\n\n        var arrowShaft = new CylinderGeometry(scene, {\n            radiusTop: 0.2,\n            radiusBottom: 0.2,\n            height: 4.5,\n            radialSegments: 20,\n            heightSegments: 1,\n            openEnded: false\n        });\n\n        var axisMaterial = new PhongMaterial(scene, { // Red by convention\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n        var xAxisMaterial = new PhongMaterial(scene, { // Red by convention\n            diffuse: [1, 0.3, 0.3],\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n        var xAxisLabelMaterial = new PhongMaterial(scene, { // Red by convention\n            emissive: [1, 0.3, 0.3],\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n        var yAxisMaterial = new PhongMaterial(scene, { // Green by convention\n            diffuse: [0.3, 1, 0.3],\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n        var yAxisLabelMaterial = new PhongMaterial(scene, { // Green by convention\n            emissive: [0.3, 1, 0.3],\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n\n        var zAxisMaterial = new PhongMaterial(scene, { // Blue by convention\n            diffuse: [0.3, 0.3, 1],\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n        var zAxisLabelMaterial = new PhongMaterial(scene, {\n            emissive: [0.3, 0.3, 1],\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n        var ballMaterial = new PhongMaterial(scene, {\n            diffuse: [0.5, 0.5, 0.5],\n            ambient: [0.0, 0.0, 0.0],\n            specular: [.6, .6, .3],\n            shininess: 80,\n            lineWidth: 2\n        });\n\n\n        // ----------------- Meshes ------------------------------\n\n        var meshes = [\n\n            // Sphere behind gnomon\n\n            new Mesh(scene, {\n                geometry: new SphereGeometry(scene, {\n                    radius: 9.0,\n                    heightSegments: 60,\n                    widthSegments: 60\n                }),\n                material: new PhongMaterial(scene, {\n                    diffuse: [0.0, 0.0, 0.0],\n                    emissive: [0.1, 0.1, 0.1],\n                    ambient: [0.1, 0.1, 0.2],\n                    specular: [0, 0, 0],\n                    alpha: 0.4,\n                    alphaMode: \"blend\",\n                    frontface: \"cw\"\n                }),\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false\n            }),\n\n            // Ball at center of axis\n\n            new Mesh(scene, {  // Arrow\n                geometry: new SphereGeometry(scene, {\n                    radius: 1.0\n                }),\n                material: ballMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false\n            }),\n\n            // X-axis arrow, shaft and label\n\n            new Mesh(scene, {  // Arrow\n                geometry: arrowHead,\n                material: xAxisMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [-5, 0, 0],\n                rotation: [0, 0, 90]\n            }),\n\n            new Mesh(scene, {  // Shaft\n                geometry: arrowShaft,\n                material: xAxisMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [-2, 0, 0],\n                rotation: [0, 0, 90]\n            }),\n\n            new Mesh(scene, {  // Label\n                geometry: new VectorTextGeometry(scene, {text: \"X\", size: 1.5}),\n                material: xAxisLabelMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [-7, 0, 0],\n                billboard: \"spherical\"\n            }),\n\n            // Y-axis arrow, shaft and label\n\n            new Mesh(scene, {  // Arrow\n                geometry: arrowHead,\n                material: yAxisMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [0, 5, 0]\n            }),\n\n            new Mesh(scene, {  // Shaft\n                geometry: arrowShaft,\n                material: yAxisMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [0, 2, 0]\n            }),\n\n            new Mesh(scene, {  // Label\n                geometry: new VectorTextGeometry(scene, {text: \"Y\", size: 1.5}),\n                material: yAxisLabelMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [0, 7, 0],\n                billboard: \"spherical\"\n            }),\n\n            // Z-axis arrow, shaft and label\n\n            new Mesh(scene, {  // Arrow\n                geometry: arrowHead,\n                material: zAxisMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [0, 0, 5],\n                rotation: [90, 0, 0]\n            }),\n\n            new Mesh(scene, {  // Shaft\n                geometry: arrowShaft,\n                material: zAxisMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [0, 0, 2],\n                rotation: [90, 0, 0]\n            }),\n\n            new Mesh(scene, {  // Label\n                geometry: new VectorTextGeometry(scene, {text: \"Z\", size: 1.5}),\n                material: zAxisLabelMaterial,\n                pickable: false,\n                collidable: false,\n                visible: cfg.visible !== false,\n                position: [0, 0, 7],\n                billboard: \"spherical\"\n            })\n        ];\n\n        /** Shows or hides this helper\n         *\n         * @param visible\n         */\n        this.setVisible = function (visible) {\n            for (var i = 0; i < meshes.length; i++) {\n                meshes[i].visible = visible;\n            }\n        }\n    }\n}\n\nexport {AxisGizmoPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/AxisGizmoPlugin/AxisGizmoPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "AxisGizmoPlugin",
    "memberof": "viewer/plugins/AxisGizmoPlugin/AxisGizmoPlugin.js",
    "static": true,
    "longname": "viewer/plugins/AxisGizmoPlugin/AxisGizmoPlugin.js~AxisGizmoPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/AxisGizmoPlugin/AxisGizmoPlugin.js",
    "importStyle": "{AxisGizmoPlugin}",
    "description": "Viewer plugin that shows the axii of the World-space coordinate system.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AxisGizmoPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/AxisGizmoPlugin/AxisGizmoPlugin.js~AxisGizmoPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/AxisGizmoPlugin/AxisGizmoPlugin.js~AxisGizmoPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"AxisGizmo\"",
        "defaultRaw": "AxisGizmo",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[250,250]",
        "defaultRaw": [
          250,
          250
        ],
        "name": "cfg.size",
        "description": "Initial size in pixels."
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "content": "import {Plugin} from \"./../../../viewer/Plugin.js\";\nimport {Clip, math} from \"../../../xeogl/xeogl.module.js\"\n\nconst tempVec3 = math.vec3();\n\n/**\n Viewer plugin that saves and loads BCF viewpoints as JSON objects.\n\n BCF is a format for managing issues on a BIM project. This plugin's viewpoints conform to\n the <a href=\"https://github.com/buildingSMART/BCF-API\">BCF Version 2.1</a> specification.\n\n @class BCFViewpointsPlugin\n */\nclass BCFViewpointsPlugin extends Plugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"BCFViewpoints\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     * @param {String} [cfg.originatingSystem] Identifies the originating system for BCF records.\n     * @param {String} [cfg.authoringTool] Identifies the authoring tool for BCF records.\n     */\n    constructor(viewer, cfg = {}) {\n\n        super(\"BCFViewpoints\", viewer, cfg);\n\n        /**\n         * Identifies the originating system to include in BCF viewpoints saved by this plugin.\n         * @property originatingSystem\n         * @type {string}\n         */\n        this.originatingSystem = cfg.originatingSystem || \"xeogl\";\n\n        /**\n         * Identifies the authoring tool to include in BCF viewpoints saved by this plugin.\n         * @property authoringTool\n         * @type {string}\n         */\n        this.authoringTool = cfg.authoringTool || \"xeogl\";\n    }\n\n    /**\n     * Saves viewer state to a BCF viewpoint.\n     *\n     * @returns {*} BCF JSON viewpoint object\n     * @example\n     *\n     * const viewer = new Viewer();\n     *\n     * const bcfPlugin = new BCFPlugin(viewer, {\n     *     //...\n     * });\n     *\n     * const viewpoint = bcfPlugin.getViewpoint();\n     *\n     * // viewpoint will resemble the following:\n     *\n     * {\n     *     perspective_camera: {\n     *         camera_view_point: {\n     *             x: 0.0,\n     *             y: 0.0,\n     *             z: 0.0\n     *         },\n     *         camera_direction: {\n     *             x: 1.0,\n     *             y: 1.0,\n     *             z: 2.0\n     *         },\n     *         camera_up_vector: {\n     *             x: 0.0,\n     *             y: 0.0,\n     *             z: 1.0\n     *         },\n     *         field_of_view: 90.0\n     *     },\n     *     lines: [],\n     *     clipping_planes: [{\n     *         location: {\n     *             x: 0.5,\n     *             y: 0.5,\n     *             z: 0.5\n     *         },\n     *         direction: {\n     *             x: 1.0,\n     *             y: 0.0,\n     *             z: 0.0\n     *         }\n     *     }],\n     *     bitmaps: [],\n     *     snapshot: {\n     *         snapshot_type: png,\n     *         snapshot_data: \"data:image/png;base64,......\"\n     *     },\n     *     components: {\n     *         visibility: {\n     *             default_visibility: false,\n     *             exceptions: [{\n     *                 ifc_guid: 4$cshxZO9AJBebsni$z9Yk,\n     *                 originating_system: BIMData.io,\n     *                 authoring_tool_id: BIMViewer/v1.0\n     *             }]\n     *        },\n     *         selection: [{\n     *            ifc_guid: \"4$cshxZO9AJBebsni$z9Yk\",\n     *         }]\n     *     }\n     * }\n     */\n    getViewpoint() {\n\n        // https://github.com/buildingSMART/BCF-API\n\n        const scene = this.viewer.scene;\n        const camera = scene.camera;\n\n        let bcfViewpoint = {};\n\n        // Camera\n\n        bcfViewpoint.perspective_camera = {\n            camera_view_point: xyzArrayToObject(camera.eye),\n            camera_direction: xyzArrayToObject(camera.look),\n            camera_up_vector: xyzArrayToObject(camera.up),\n            field_of_view: camera.perspective.fov,\n        };\n\n        bcfViewpoint.orthogonal_camera = {\n            camera_view_point: xyzArrayToObject(camera.eye),\n            camera_direction: xyzArrayToObject(camera.look),\n            camera_up_vector: xyzArrayToObject(camera.up),\n            view_to_world_scale: camera.ortho.scale,\n        };\n\n        bcfViewpoint.lines = [];\n        bcfViewpoint.bitmaps = [];\n\n        // Clipping planes\n\n        bcfViewpoint.clipping_planes = [];\n        const clips = scene.clips;\n        for (const id in clips) {\n            let clip = clips[id];\n            bcfViewpoint.clipping_planes.push({\n                location: xyzArrayToObject(clip.pos),\n                direction: xyzArrayToObject(clip.dir)\n            });\n        }\n\n        // Entity states\n\n        bcfViewpoint.components = {\n            visibility: {\n                view_setup_hints: {\n                    spaces_visible: false,\n                    space_boundaries_visible: false,\n                    openings_visible: false\n                }\n            }\n        };\n\n        const entityIds = scene.entityIds;\n        const visibleEntities = scene.visibleEntities;\n        const visibleEntityIds = scene.visibleEntityIds;\n        const invisibleEntityIds = entityIds.filter(id => !visibleEntities[id]);\n        const selectedEntityIds = scene.selectedEntityIds;\n\n        if (visibleEntityIds.length < invisibleEntityIds.length) {\n            bcfViewpoint.components.visibility.exceptions = visibleEntityIds.map(el => this._objectIdToComponent(el));\n            bcfViewpoint.components.visibility.default_visibility = false;\n        } else {\n            bcfViewpoint.components.visibility.exceptions = invisibleEntityIds.map(el => this._objectIdToComponent(el));\n            bcfViewpoint.components.visibility.default_visibility = true;\n        }\n\n        bcfViewpoint.components.selection = selectedEntityIds.map(el => this._objectIdToComponent(el));\n\n        bcfViewpoint.snapshot = {\n            snapshot_type: \"png\",\n            snapshot_data: scene.canvas.canvas.toDataURL()\n        };\n\n        return bcfViewpoint;\n    }\n\n    _objectIdToComponent(o) {\n        return {\n            ifc_guid: o.split('#')[1],\n            originating_system: this.originatingSystem || \"xeoviewer.org\",\n            authoring_tool_id: this.authoringTool || \"xeoviewer.org\"\n        };\n    }\n\n    /**\n     * Sets viewer state to the given BCF viewpoint.\n     *\n     * @param bcfViewpoint {*} BCF JSON viewpoint object or \"reset\" / \"RESET\" to reset the viewer, which clears clipping planes,\n     * shows default visible entities and restores camera to initial default position.\n     */\n    setViewpoint(bcfViewpoint) {\n\n        var self = this;\n\n        if (!bcfViewpoint) {\n            return;\n        }\n\n        const viewer = this.viewer;\n\n        if (bcfViewpoint.length && bcfViewpoint.toUpperCase() === 'RESET') {\n            viewer.resetView();\n            return;\n        }\n\n        const scene = this.viewer.scene;\n        const camera = scene.camera;\n\n\n        if (bcfViewpoint.perspective_camera) {\n            camera.eye = xyzObjectToArray(bcfViewpoint.perspective_camera.camera_view_point, tempVec3);\n            camera.look = xyzObjectToArray(bcfViewpoint.perspective_camera.camera_direction, tempVec3);\n            camera.up = xyzObjectToArray(bcfViewpoint.perspective_camera.camera_up_vector, tempVec3);\n            camera.perspective.fov = bcfViewpoint.perspective_camera.field_of_view;\n        }\n\n        if (bcfViewpoint.orthogonal_camera) {\n            camera.eye = xyzObjectToArray(bcfViewpoint.orthogonal_camera.camera_view_point, tempVec3);\n            camera.look = xyzObjectToArray(bcfViewpoint.orthogonal_camera.camera_direction, tempVec3);\n            camera.up = xyzObjectToArray(bcfViewpoint.orthogonal_camera.camera_up_vector, tempVec3);\n            camera.ortho.scale = bcfViewpoint.orthogonal_camera.field_of_view;\n        }\n\n        if (bcfViewpoint.clipping_planes) {\n            bcfViewpoint.clipping_planes.forEach(function (e) {\n                new Clip(viewer.scene, {\n                    pos: xyzObjectToArray(e.location, tempVec3),\n                    dir: xyzObjectToArray(e.direction, tempVec3)\n                });\n            });\n        }\n\n        // TODO\n\n        // if (bcfViewpoint.components) {\n        //     if (!bcfViewpoint.components.visibility.default_visibility) {\n        //         this.hide();\n        //         this.getModels().forEach(model => {\n        //             bcfViewpoint.components.visibility.exceptions.forEach(x => self.show(model + '#' + x.ifc_guid));\n        //         });\n        //     } else {\n        //         this.show();\n        //         this.hide('space');\n        //         this.getModels().forEach(model => {\n        //             bcfViewpoint.components.visibility.exceptions.forEach(x => self.hide(model + '#' + x.ifc_guid));\n        //         });\n        //     }\n        // }\n    }\n\n\n    /**\n     * Destroys this plugin.\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n\nfunction xyzArrayToObject(arr) {\n    return {\"x\": arr[0], \"y\": arr[1], \"z\": arr[2]};\n}\n\nfunction xyzObjectToArray(xyz, arry) {\n    arry = new Float32Array(3);\n    arry[0] = xyz.x;\n    arry[1] = xyz.y;\n    arry[2] = xyz.z;\n    return arry;\n}\n\nexport {BCFViewpointsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "xyzArrayToObject",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~xyzArrayToObject",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *, \"z\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "xyzObjectToArray",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~xyzObjectToArray",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "params": [
      {
        "name": "xyz",
        "types": [
          "*"
        ]
      },
      {
        "name": "arry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "BCFViewpointsPlugin",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js",
    "importStyle": "{BCFViewpointsPlugin}",
    "description": "Viewer plugin that saves and loads BCF viewpoints as JSON objects.\n\nBCF is a format for managing issues on a BIM project. This plugin's viewpoints conform to\nthe <a href=\"https://github.com/buildingSMART/BCF-API\">BCF Version 2.1</a> specification.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BCFViewpointsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"BCFViewpoints\"",
        "defaultRaw": "BCFViewpoints",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.originatingSystem",
        "description": "Identifies the originating system for BCF records."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.authoringTool",
        "description": "Identifies the authoring tool for BCF records."
      }
    ]
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "originatingSystem",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "static": false,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin#originatingSystem",
    "access": "public",
    "description": "Identifies the originating system to include in BCF viewpoints saved by this plugin.",
    "lineNumber": 33,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "originatingSystem",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "authoringTool",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "static": false,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin#authoringTool",
    "access": "public",
    "description": "Identifies the authoring tool to include in BCF viewpoints saved by this plugin.",
    "lineNumber": 40,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "authoringTool",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getViewpoint",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin#getViewpoint",
    "access": "public",
    "description": "Saves viewer state to a BCF viewpoint.",
    "examples": [
      "\nconst viewer = new Viewer();\n\nconst bcfPlugin = new BCFPlugin(viewer, {\n    //...\n});\n\nconst viewpoint = bcfPlugin.getViewpoint();\n\n// viewpoint will resemble the following:\n\n{\n    perspective_camera: {\n        camera_view_point: {\n            x: 0.0,\n            y: 0.0,\n            z: 0.0\n        },\n        camera_direction: {\n            x: 1.0,\n            y: 1.0,\n            z: 2.0\n        },\n        camera_up_vector: {\n            x: 0.0,\n            y: 0.0,\n            z: 1.0\n        },\n        field_of_view: 90.0\n    },\n    lines: [],\n    clipping_planes: [{\n        location: {\n            x: 0.5,\n            y: 0.5,\n            z: 0.5\n        },\n        direction: {\n            x: 1.0,\n            y: 0.0,\n            z: 0.0\n        }\n    }],\n    bitmaps: [],\n    snapshot: {\n        snapshot_type: png,\n        snapshot_data: \"data:image/png;base64,......\"\n    },\n    components: {\n        visibility: {\n            default_visibility: false,\n            exceptions: [{\n                ifc_guid: 4$cshxZO9AJBebsni$z9Yk,\n                originating_system: BIMData.io,\n                authoring_tool_id: BIMViewer/v1.0\n            }]\n       },\n        selection: [{\n           ifc_guid: \"4$cshxZO9AJBebsni$z9Yk\",\n        }]\n    }\n}"
    ],
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} BCF JSON viewpoint object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "BCF JSON viewpoint object"
    },
    "params": []
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "_objectIdToComponent",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin#_objectIdToComponent",
    "access": "private",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"ifc_guid\": *, \"originating_system\": *, \"authoring_tool_id\": *}"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "setViewpoint",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin#setViewpoint",
    "access": "public",
    "description": "Sets viewer state to the given BCF viewpoint.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bcfViewpoint",
        "description": "{*} BCF JSON viewpoint object or \"reset\" / \"RESET\" to reset the viewer, which clears clipping planes,\nshows default visible entities and restores camera to initial default position."
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BCFViewpointsPlugin/BCFViewpointsPlugin.js~BCFViewpointsPlugin#destroy",
    "access": "public",
    "description": "Destroys this plugin.",
    "lineNumber": 265,
    "params": [],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerGeometryLoader.js",
    "content": "import {DataInputStreamReader} from \"./DataInputStreamReader.js\";\n\n/**\n *\n * @param bimServerAPI\n * @param bimServerModel\n * @param roid\n * @param globalTransformationMatrix\n * @param modelBuilder\n * @constructor\n * @private\n */\nfunction BIMServerGeometryLoader(bimServerAPI, bimServerModel, roid, globalTransformationMatrix, modelBuilder) {\n\n    var o = this;\n\n    var protocolVersion = null;\n    var currentState = {};\n    const progressListeners = [];\n    var prepareReceived = false;\n    const todo = [];\n    const geometriesLoaded = {};\n    const objectsWaitingForGeometryData = {};\n\n    o.roid = roid;\n    var infoToOid = {};\n\n    this.addProgressListener = function (progressListener) {\n        progressListeners.push(progressListener);\n    };\n\n    function processMessage(stream) {\n        var messageType = stream.readByte();\n        if (messageType === 0) {\n            readStart(stream);\n        } else if (messageType === 6) {\n            readEnd(stream);\n        } else {\n            readObject(stream, messageType);\n        }\n        stream.align8();\n        return stream.remaining() > 0;\n    }\n\n    this.process = function () {\n        var data = todo.shift();\n        var stream;\n        while (data != null) {\n            stream = new DataInputStreamReader(data);\n            var topicId = stream.readLong();\n            while (processMessage(stream)) {\n\n            }\n            data = todo.shift();\n        }\n    };\n\n    this.setLoadOids = function (oids) {\n        o.options = {type: \"oids\", oids: oids};\n    };\n\n    this.start = function () {\n\n        if (!o.options || o.options.type !== \"oids\") {\n            throw new Error(\"Invalid loader configuration\");\n        }\n\n        var obj = [];\n\n        o.groupId = o.roid;\n        infoToOid = o.options.oids;\n\n        for (var k in infoToOid) {\n            var oid = parseInt(infoToOid[k]);\n            bimServerModel.apiModel.get(oid, function (object) {\n                if (object.object._rgeometry != null) {\n                    if (object.model.objects[object.object._rgeometry] != null) {\n                        // Only if this data is preloaded, otherwise just don't include any gi\n                        object.getGeometry(function (geometryInfo) {\n                            obj.push({\n                                gid: object.object._rgeometry,\n                                oid: object.oid,\n                                object: object,\n                                info: geometryInfo.object\n                            });\n                        });\n                    } else {\n                        obj.push({gid: object.object._rgeometry, oid: object.oid, object: object});\n                    }\n                }\n            });\n        }\n\n        obj.sort(function (a, b) {\n            if (a.info != null && b.info != null) {\n                var topa = (a.info._emaxBounds.z + a.info._eminBounds.z) / 2;\n                var topb = (b.info._emaxBounds.z + b.info._eminBounds.z) / 2;\n                return topa - topb;\n            } else {\n                // Resort back to type\n                // TODO this is dodgy when some objects do have info, and others don't\n                return a.object.getType().localeCompare(b.object.getType());\n            }\n        });\n\n        var oids = [];\n\n        obj.forEach(function (wrapper) {\n            oids.push(wrapper.object.object._rgeometry._i);\n        });\n\n        var serializerName = \"org.bimserver.serializers.binarygeometry.BinaryGeometryMessagingStreamingSerializerPlugin\";\n\n        var fieldsToInclude = [\"indices\"];\n        fieldsToInclude.push(\"normals\");\n        fieldsToInclude.push(\"vertices\");\n        fieldsToInclude.push(\"colorsQuantized\");\n\n        var newQuery = {\n            type: \"GeometryInfo\",\n            oids: oids,\n            include: {\n                type: \"GeometryInfo\",\n                field: \"data\",\n                include: {\n                    type: \"GeometryData\",\n                    fieldsDirect: fieldsToInclude\n                }\n            },\n            loaderSettings: {\n                splitGeometry: false\n            }\n        };\n\n        var oldQuery = {\n            type: \"GeometryInfo\",\n            oids: oids,\n            include: {\n                type: \"GeometryInfo\",\n                field: \"data\"\n            }\n        };\n\n        var useNewQuery = false;\n\n        var pluginCallback = function (serializer) {\n            bimServerAPI.call(\"ServiceInterface\", \"download\", {\n                roids: [o.roid],\n                query: JSON.stringify(useNewQuery ? newQuery : oldQuery),\n                serializerOid: serializer.oid,\n                sync: false\n            }, function (topicId) {\n                o.topicId = topicId;\n                bimServerAPI.registerProgressHandler(o.topicId, progressHandler);\n            });\n        };\n\n        var promise = bimServerAPI.getSerializerByPluginClassName(serializerName + \"3\", pluginCallback);\n        if (promise) {\n            // If this returns a promise (it'll never be cancelled btw. even in case of error) we're\n            // talking to a newer version of the plugin ecosystem and we can try the new query.\n            useNewQuery = true;\n            bimServerAPI.getSerializerByPluginClassName(serializerName).then(pluginCallback);\n        }\n    };\n\n    function progressHandler(topicId, state) {\n        if (topicId === o.topicId) {\n            if (state.title === \"Done preparing\") {\n                if (!prepareReceived) {\n                    prepareReceived = true;\n                    downloadInitiated();\n                }\n            }\n            if (state.state === \"FINISHED\") {\n                bimServerAPI.unregisterProgressHandler(o.topicId, progressHandler);\n            }\n        }\n    }\n\n    function downloadInitiated() {\n        currentState = {\n            mode: 0,\n            nrObjectsRead: 0,\n            nrObjects: 0\n        };\n        bimServerAPI.setBinaryDataListener(o.topicId, binaryDataListener);\n        bimServerAPI.downloadViaWebsocket({\n            longActionId: o.topicId,\n            topicId: o.topicId\n        });\n    }\n\n    function binaryDataListener(data) {\n        todo.push(data);\n    }\n\n    function afterRegistration(topicId) {\n        bimServerAPI.call(\"Bimsie1NotificationRegistryInterface\", \"getProgress\", {\n            topicId: o.topicId\n        }, function (state) {\n            progressHandler(o.topicId, state);\n        });\n    }\n\n    function readStart(data) {\n        var start = data.readUTF8();\n        if (start !== \"BGS\") {\n            modelBuilder.error(\"data does not start with BGS (\" + start + \")\");\n            return false;\n        }\n        protocolVersion = data.readByte();\n        modelBuilder.log(\"BIMServer protocol version = \" + protocolVersion);\n        if (protocolVersion !== 10 && protocolVersion !== 11 && protocolVersion !== 16) {\n            modelBuilder.error(\"Unimplemented protocol version\");\n            return false;\n        }\n        if (protocolVersion > 15) {\n            o.multiplierToMm = data.readFloat();\n        }\n        data.align8();\n        var boundary = data.readDoubleArray(6);\n        modelBuilder.gotModelBoundary(boundary);\n        currentState.mode = 1;\n        progressListeners.forEach(function (progressListener) {\n            progressListener(\"start\", currentState.nrObjectsRead, currentState.nrObjectsRead);\n        });\n        updateProgress();\n    }\n\n    function readEnd(data) {\n        progressListeners.forEach(function (progressListener) {\n            progressListener(\"done\", currentState.nrObjectsRead, currentState.nrObjectsRead);\n        });\n        bimServerAPI.call(\"ServiceInterface\", \"cleanupLongAction\", {topicId: o.topicId}, function () {\n        });\n    }\n\n    function updateProgress() {\n    }\n\n    function readObject(stream, geometryType) {\n\n        //---------------------------------------------------------------------------------\n        // protocol version assumed to be 16\n        //---------------------------------------------------------------------------------\n\n        const color = new Float32Array(1, 1, 1, 1);\n\n        if (geometryType === 1) {\n\n            //-----------------------------------------------------------------------------\n            // Geometry\n            //-----------------------------------------------------------------------------\n\n            let reused = stream.readInt();\n            let ifcType = stream.readUTF8();\n\n            stream.align8();\n\n            let roid = stream.readLong();\n            let croid = stream.readLong();\n            let hasTransparency = stream.readLong() === 1;\n\n            let geometryDataId = stream.readLong();\n            let numIndices = stream.readInt();\n            let indices = stream.readShortArray(numIndices);\n\n            stream.align4();\n\n            let b = stream.readInt();\n            let gotColor = (b === 1);\n\n            if (gotColor) {\n                color[0] = stream.readFloat();\n                color[1] = stream.readFloat();\n                color[2] = stream.readFloat();\n                color[3] = stream.readFloat();\n            }\n\n            let numPositions = stream.readInt();\n            let positions = stream.readFloatArray(numPositions);\n            let numNormals = stream.readInt();\n            let normals = stream.readFloatArray(numNormals);\n            let numColors = stream.readInt();\n\n            var colors = null;\n\n            if (numColors > 0) {\n\n                colors = stream.readFloatArray(numColors);\n\n                color[0] = colors[0];\n                color[1] = colors[0];\n                color[2] = colors[0];\n                color[3] = colors[0];\n\n            } else if (color !== null) {\n\n                // Creating vertex colors here anyways (not transmitted over the line is a plus), should find a way to do this with scenejs without vertex-colors\n\n                // colors = new Array(numPositions * 4);\n                //\n                // for (var i = 0; i < numPositions; i++) {\n                //     colors[i * 4] = color.r;\n                //     colors[i * 4 + 1] = color.g;\n                //     colors[i * 4 + 2] = color.b;\n                //     colors[i * 4 + 3] = color.a;\n                // }\n            }\n\n            modelBuilder.createGeometry(geometryDataId, positions, normals, indices);\n\n            geometriesLoaded[geometryDataId] = true;\n\n            if (objectsWaitingForGeometryData[geometryDataId] !== null) {\n\n                // Object(s) waiting for this geometry\n\n                objectsWaitingForGeometryData[geometryDataId].forEach(function (oid) {\n                    modelBuilder.addGeometryToObject(oid, geometryDataId);\n                });\n\n                delete objectsWaitingForGeometryData[geometryDataId];\n            }\n\n        } else if (geometryType === 5) {\n\n            //-----------------------------------------------------------------------------\n            // Object\n            //-----------------------------------------------------------------------------\n\n            var oid = stream.readLong();\n            let ifcType = stream.readUTF8();\n\n            stream.align8();\n\n            let roid = stream.readLong();\n            let geometryInfoOid = stream.readLong();\n            let hasTransparency = stream.readLong() === 1;\n            let objectBounds = stream.readDoubleArray(6);\n            let matrix = stream.readDoubleArray(16);\n            let geometryDataId = stream.readLong();\n            let geometryDataOidFound = geometryDataId;\n            oid = infoToOid[geometryInfoOid];\n\n            if (oid === null) {\n                modelBuilder.error(\"Not found\", infoToOid, geometryInfoOid);\n                return;\n            }\n\n            let geometryLoaded = geometriesLoaded[geometryDataId];\n\n            modelBuilder.createObject(oid, geometryLoaded ? [geometryDataId] : [], ifcType, matrix);\n\n            if (!geometryLoaded) {\n\n                // Geometry not yet loaded for this object - save the object as waiting for this geometry\n\n                var list = objectsWaitingForGeometryData[geometryDataId];\n                if (!list) {\n                    list = [];\n                    objectsWaitingForGeometryData[geometryDataId] = list;\n                }\n                list.push(oid);\n            }\n        }\n\n        currentState.nrObjectsRead++;\n\n        updateProgress();\n    }\n}\n\nexport {BIMServerGeometryLoader};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerGeometryLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "BIMServerGeometryLoader",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerGeometryLoader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerGeometryLoader.js~BIMServerGeometryLoader",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerGeometryLoader.js",
    "importStyle": "{BIMServerGeometryLoader}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bimServerAPI",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bimServerModel",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "roid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "globalTransformationMatrix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelBuilder",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js",
    "content": "/**\n * @private\n */\nclass BIMServerModel {\n\n    constructor(bimServerAPI, apiModel) {\n        this.bimServerAPI = bimServerAPI;\n        this.apiModel = apiModel;\n        this.tree = null;\n        this.treePromise = null;\n    }\n\n    getTree(args) {\n\n        /*\n         // TODO: This is rather tricky. Never know when the list of Projects is exhausted.\n         // Luckily a valid IFC contains one and only one. Let's assume there is just one.\n         var projectEncountered = false;\n\n         this.model.getAllOfType(\"IfcProject\", false, function(project) {\n         if (projectEncountered) {\n         throw new Error(\"More than a single project encountered, bleh!\");\n         }\n         console.log('project', project);\n         });\n         */\n\n        var self = this;\n\n        return self.treePromise || (self.treePromise = new Promise(function (resolve, reject) {\n\n            if (self.tree) {\n                resolve(self.tree);\n            }\n\n            var query =\n                {\n                    defines: {\n                        Representation: {\n                            type: \"IfcProduct\",\n                            field: \"Representation\"\n                        },\n                        ContainsElementsDefine: {\n                            type: \"IfcSpatialStructureElement\",\n                            field: \"ContainsElements\",\n                            include: {\n                                type: \"IfcRelContainedInSpatialStructure\",\n                                field: \"RelatedElements\",\n                                includes: [\n                                    \"IsDecomposedByDefine\",\n                                    \"ContainsElementsDefine\",\n                                    \"Representation\"\n                                ]\n                            }\n                        },\n                        IsDecomposedByDefine: {\n                            type: \"IfcObjectDefinition\",\n                            field: \"IsDecomposedBy\",\n                            include: {\n                                type: \"IfcRelDecomposes\",\n                                field: \"RelatedObjects\",\n                                includes: [\n                                    \"IsDecomposedByDefine\",\n                                    \"ContainsElementsDefine\",\n                                    \"Representation\"\n                                ]\n                            }\n                        },\n                    },\n                    queries: [{\n                        type: \"IfcProject\",\n                        includes: [\n                            \"IsDecomposedByDefine\",\n                            \"ContainsElementsDefine\"\n                        ]\n                    }, {\n                        type: \"IfcRepresentation\",\n                        includeAllSubtypes: true\n                    }, {\n                        type: \"IfcProductRepresentation\"\n                    }, {\n                        type: \"IfcPresentationLayerWithStyle\"\n                    }, {\n                        type: \"IfcProduct\",\n                        includeAllSubtypes: true\n                    }, {\n                        type: \"IfcProductDefinitionShape\"\n                    }, {\n                        type: \"IfcPresentationLayerAssignment\"\n                    }, {\n                        type: \"IfcRelAssociatesClassification\",\n                        includes: [{\n                            type: \"IfcRelAssociatesClassification\",\n                            field: \"RelatedObjects\"\n                        }, {\n                            type: \"IfcRelAssociatesClassification\",\n                            field: \"RelatingClassification\"\n                        }]\n                    }, {\n                        type: \"IfcSIUnit\"\n                    }, {\n                        type: \"IfcPresentationLayerAssignment\"\n                    }]\n                };\n\n            // Perform the download\n            self.apiModel.query(query, function (o) {\n            }).done(function () {\n\n                // A list of entities that define parent-child relationships\n                var entities = {\n                    'IfcRelDecomposes': 1,\n                    'IfcRelAggregates': 1,\n                    'IfcRelContainedInSpatialStructure': 1,\n                    'IfcRelFillsElement': 1,\n                    'IfcRelVoidsElement': 1\n                };\n\n                // Create a mapping from id->instance\n                var instance_by_id = {};\n                var objects = [];\n\n                for (var e in self.apiModel.objects) {\n                    // The root node in a dojo store should have its parent\n                    // set to null, not just something that evaluates to false\n                    var o = self.apiModel.objects[e].object;\n                    o.parent = null;\n                    instance_by_id[o._i] = o;\n                    objects.push(o);\n                }\n\n                // Filter all instances based on relationship entities\n                var relationships = objects.filter(function (o) {\n                    return entities[o._t];\n                });\n\n                // Construct a tuple of {parent, child} ids\n                var parents = relationships.map(function (o) {\n                    var ks = Object.keys(o);\n                    var related = ks.filter(function (k) {\n                        return k.indexOf('Related') !== -1;\n                    });\n                    var relating = ks.filter(function (k) {\n                        return k.indexOf('Relating') !== -1;\n                    });\n                    return [o[relating[0]], o[related[0]]];\n                });\n\n                var is_array = function (o) {\n                    return Object.prototype.toString.call(o) === '[object Array]';\n                };\n\n                var data = [];\n                var visited = {};\n                parents.forEach(function (a) {\n                    // Relationships in IFC can be one to one/many\n                    var ps = is_array(a[0]) ? a[0] : [a[0]];\n                    var cs = is_array(a[1]) ? a[1] : [a[1]];\n                    for (var i = 0; i < ps.length; ++i) {\n                        for (var j = 0; j < cs.length; ++j) {\n                            // Lookup the instance ids in the mapping\n                            var p = instance_by_id[ps[i]._i];\n                            var c = instance_by_id[cs[j]._i];\n\n                            // parent, id, hasChildren are significant attributes in a dojo store\n                            c.parent = p.id = p._i;\n                            c.id = c._i;\n                            p.hasChildren = true;\n\n                            // Make sure to only add instances once\n                            if (!visited[c.id]) {\n                                data.push(c);\n                            }\n                            if (!visited[p.id]) {\n                                data.push(p);\n                            }\n                            visited[p.id] = visited[c.id] = true;\n                        }\n                    }\n                });\n\n                var make_element = function (o) {\n                    return {\n                        name: o.Name,\n                        id: o.id,\n                        guid: o.GlobalId,\n                        parent: o.parent,\n                        gid: (o._rgeometry == null ? null : o._rgeometry._i)\n                    };\n                };\n\n                var fold = (function () {\n                    var root = null;\n                    return function (li) {\n                        var by_oid = {};\n                        li.forEach(function (elem) {\n                            by_oid[elem.id] = elem;\n                        });\n                        li.forEach(function (elem) {\n                            if (elem.parent === null) {\n                                root = elem;\n                            } else {\n                                var p = by_oid[elem.parent];\n                                (p.children || (p.children = [])).push(elem);\n                            }\n                        });\n                        return root;\n                    }\n                })();\n\n                resolve(self.tree = fold(data.map(make_element)));\n            });\n        }));\n    };\n\n}\n\nexport {BIMServerModel}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "BIMServerModel",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js",
    "importStyle": "{BIMServerModel}",
    "description": "",
    "lineNumber": 4,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "bimServerAPI",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel#bimServerAPI",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "apiModel",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel#apiModel",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "tree",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel#tree",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "treePromise",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel#treePromise",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getTree",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/BIMServerModel.js~BIMServerModel#getTree",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js",
    "content": "import {StringView} from \"./StringView.js\";\n\n/**\n * @private\n */\nclass DataInputStreamReader {\n\n    constructor(arrayBuffer) {\n        this.arrayBuffer = arrayBuffer;\n        this.dataView = new DataView(this.arrayBuffer);\n        this.pos = 0;\n    }\n\n    readUTF8() {\n        var length = this.dataView.getInt16(this.pos);\n        this.pos += 2;\n        var view = this.arrayBuffer.slice(this.pos, this.pos + length);\n        var result = new StringView(view).toString();\n        this.pos += length;\n        return result;\n    }\n\n    remaining() {\n        return this.arrayBuffer.byteLength - this.pos;\n    }\n\n    align4() {\n        // Skips to the next alignment of 4 (source should have done the same!)\n        var skip = 4 - (this.pos % 4);\n        if (skip > 0 && skip != 4) {\n            //\t\t\tconsole.log(\"Skip\", skip);\n            this.pos += skip;\n        }\n    }\n\n    align8() {\n        // Skips to the next alignment of 4 (source should have done the same!)\n        var skip = 8 - (this.pos % 8);\n        if (skip > 0 && skip != 8) {\n            //\t\t\tconsole.log(\"Skip\", skip);\n            this.pos += skip;\n        }\n    }\n\n    readDoubleArray(length) {\n        var result = new Float64Array(this.arrayBuffer, this.pos, length);\n        this.pos += length * 8;\n        return result;\n    }\n\n    readFloat() {\n        var value = this.dataView.getFloat32(this.pos, true);\n        this.pos += 4;\n        return value;\n    }\n\n    readInt() {\n        var value = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return value;\n    }\n\n    readByte() {\n        var value = this.dataView.getInt8(this.pos);\n        this.pos += 1;\n        return value;\n    }\n\n    readLong() {\n        var value = this.dataView.getUint32(this.pos, true) + 0x100000000 * this.dataView.getUint32(this.pos + 4, true);\n        this.pos += 8;\n        return value;\n    }\n\n    readFloatArray2(length) {\n        var results = [];\n        for (var i = 0; i < length; i++) {\n            var value = this.dataView.getFloat32(this.pos, true);\n            this.pos += 4;\n            results.push(value);\n        }\n        return results;\n    }\n\n    readFloatArray(length) {\n        var result = new Float32Array(this.arrayBuffer, this.pos, length);\n        this.pos += length * 4;\n        return result;\n    }\n\n    readIntArray2(length) {\n        var results = [];\n        for (var i = 0; i < length; i++) {\n            var value = this.dataView.getInt32(this.pos, true);\n            this.pos += 4;\n            results.push(value);\n        }\n        return results;\n    }\n\n    readIntArray(length) {\n        var result = new Int32Array(this.arrayBuffer, this.pos, length);\n        this.pos += length * 4;\n        return result;\n    }\n\n    readShortArray(length) {\n        try {\n            var result = new Int16Array(this.arrayBuffer, this.pos, length);\n            this.pos += length * 2;\n            return result;\n        } catch (e) {\n            debugger;\n        }\n    }\n}\n\nexport {DataInputStreamReader}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "DataInputStreamReader",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js",
    "importStyle": "{DataInputStreamReader}",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "arrayBuffer",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#arrayBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "dataView",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#dataView",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "pos",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#pos",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "readUTF8",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readUTF8",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "remaining",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#remaining",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "align4",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#align4",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "align8",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#align8",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "readDoubleArray",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readDoubleArray",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "readFloat",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readFloat",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "readInt",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readInt",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "readByte",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readByte",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "readLong",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readLong",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "readFloatArray2",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readFloatArray2",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "readFloatArray",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readFloatArray",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "readIntArray2",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readIntArray2",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "readIntArray",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readIntArray",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "readShortArray",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readShortArray",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "content": "/*\\\n |*|\n |*|  :: Number.isInteger() polyfill ::\n |*|\n |*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n |*|\n \\*/\n\nif (!Number.isInteger) {\n    Number.isInteger = function isInteger(nVal) {\n        return typeof nVal === \"number\" && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal;\n    };\n}\n\n/*\\\n |*|\n |*|  StringView - Mozilla Developer Network - revision #6\n |*|\n |*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/StringView\n |*|  https://developer.mozilla.org/User:fusionchess\n |*|\n |*|  This framework is released under the GNU Public License, version 3 or later.\n |*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html\n |*|\n \\*/\n\n/**\n * @private\n */\nfunction StringView(vInput, sEncoding /* optional (default: UTF-8) */, nOffset /* optional */, nLength /* optional */) {\n\n    var fTAView, aWhole, aRaw, fPutOutptCode, fGetOutptChrSize, nInptLen, nStartIdx = isFinite(nOffset) ? nOffset : 0,\n        nTranscrType = 15;\n\n    if (sEncoding) {\n        this.encoding = sEncoding.toString();\n    }\n\n    encSwitch: switch (this.encoding) {\n        case \"UTF-8\":\n            fPutOutptCode = StringView.putUTF8CharCode;\n            fGetOutptChrSize = StringView.getUTF8CharLength;\n            fTAView = Uint8Array;\n            break encSwitch;\n        case \"UTF-16\":\n            fPutOutptCode = StringView.putUTF16CharCode;\n            fGetOutptChrSize = StringView.getUTF16CharLength;\n            fTAView = Uint16Array;\n            break encSwitch;\n        case \"UTF-32\":\n            fTAView = Uint32Array;\n            nTranscrType &= 14;\n            break encSwitch;\n        default:\n            /* case \"ASCII\", or case \"BinaryString\" or unknown cases */\n            fTAView = Uint8Array;\n            nTranscrType &= 14;\n    }\n\n    typeSwitch: switch (typeof vInput) {\n        case \"string\":\n            /* the input argument is a primitive string: a new buffer will be created. */\n            nTranscrType &= 7;\n            break typeSwitch;\n        case \"object\":\n            classSwitch: switch (vInput.constructor) {\n                case StringView:\n                    /* the input argument is a stringView: a new buffer will be created. */\n                    nTranscrType &= 3;\n                    break typeSwitch;\n                case String:\n                    /* the input argument is an objectified string: a new buffer will be created. */\n                    nTranscrType &= 7;\n                    break typeSwitch;\n                case ArrayBuffer:\n                    /* the input argument is an arrayBuffer: the buffer will be shared. */\n                    aWhole = new fTAView(vInput);\n                    nInptLen = this.encoding === \"UTF-32\" ?\n                        vInput.byteLength >>> 2\n                        : this.encoding === \"UTF-16\" ?\n                            vInput.byteLength >>> 1\n                            :\n                            vInput.byteLength;\n                    aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?\n                        aWhole\n                        : new fTAView(vInput, nStartIdx, !isFinite(nLength) ? nInptLen - nStartIdx : nLength);\n\n                    break typeSwitch;\n                case Uint32Array:\n                case Uint16Array:\n                case Uint8Array:\n                    /* the input argument is a typedArray: the buffer, and possibly the array itself, will be shared. */\n                    fTAView = vInput.constructor;\n                    nInptLen = vInput.length;\n                    aWhole = vInput.byteOffset === 0 && vInput.length === (\n                        fTAView === Uint32Array ?\n                            vInput.buffer.byteLength >>> 2\n                            : fTAView === Uint16Array ?\n                            vInput.buffer.byteLength >>> 1\n                            :\n                            vInput.buffer.byteLength\n                    ) ? vInput : new fTAView(vInput.buffer);\n                    aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?\n                        vInput\n                        : vInput.subarray(nStartIdx, isFinite(nLength) ? nStartIdx + nLength : nInptLen);\n\n                    break typeSwitch;\n                default:\n                    /* the input argument is an array or another serializable object: a new typedArray will be created. */\n                    aWhole = new fTAView(vInput);\n                    nInptLen = aWhole.length;\n                    aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?\n                        aWhole\n                        : aWhole.subarray(nStartIdx, isFinite(nLength) ? nStartIdx + nLength : nInptLen);\n            }\n            break typeSwitch;\n        default:\n            /* the input argument is a number, a boolean or a function: a new typedArray will be created. */\n            aWhole = aRaw = new fTAView(Number(vInput) || 0);\n\n    }\n\n    if (nTranscrType < 8) {\n\n        var vSource, nOutptLen, nCharStart, nCharEnd, nEndIdx, fGetInptChrSize, fGetInptChrCode;\n\n        if (nTranscrType & 4) { /* input is string */\n\n            vSource = vInput;\n            nOutptLen = nInptLen = vSource.length;\n            nTranscrType ^= this.encoding === \"UTF-32\" ? 0 : 2;\n            /* ...or...: nTranscrType ^= Number(this.encoding !== \"UTF-32\") << 1; */\n            nStartIdx = nCharStart = nOffset ? Math.max((nOutptLen + nOffset) % nOutptLen, 0) : 0;\n            nEndIdx = nCharEnd = (Number.isInteger(nLength) ? Math.min(Math.max(nLength, 0) + nStartIdx, nOutptLen) : nOutptLen) - 1;\n\n        } else { /* input is stringView */\n\n            vSource = vInput.rawData;\n            nInptLen = vInput.makeIndex();\n            nStartIdx = nCharStart = nOffset ? Math.max((nInptLen + nOffset) % nInptLen, 0) : 0;\n            nOutptLen = Number.isInteger(nLength) ? Math.min(Math.max(nLength, 0), nInptLen - nCharStart) : nInptLen;\n            nEndIdx = nCharEnd = nOutptLen + nCharStart;\n\n            if (vInput.encoding === \"UTF-8\") {\n                fGetInptChrSize = StringView.getUTF8CharLength;\n                fGetInptChrCode = StringView.loadUTF8CharCode;\n            } else if (vInput.encoding === \"UTF-16\") {\n                fGetInptChrSize = StringView.getUTF16CharLength;\n                fGetInptChrCode = StringView.loadUTF16CharCode;\n            } else {\n                nTranscrType &= 1;\n            }\n\n        }\n\n        if (nOutptLen === 0 || nTranscrType < 4 && vSource.encoding === this.encoding && nCharStart === 0 && nOutptLen === nInptLen) {\n\n            /* the encoding is the same, the length too and the offset is 0... or the input is empty! */\n\n            nTranscrType = 7;\n\n        }\n\n        conversionSwitch: switch (nTranscrType) {\n\n            case 0:\n\n                /* both the source and the new StringView have a fixed-length encoding... */\n\n                aWhole = new fTAView(nOutptLen);\n                for (var nOutptIdx = 0; nOutptIdx < nOutptLen; aWhole[nOutptIdx] = vSource[nStartIdx + nOutptIdx++]) ;\n                break conversionSwitch;\n\n            case 1:\n\n                /* the source has a fixed-length encoding but the new StringView has a variable-length encoding... */\n\n                /* mapping... */\n\n                nOutptLen = 0;\n\n                for (var nInptIdx = nStartIdx; nInptIdx < nEndIdx; nInptIdx++) {\n                    nOutptLen += fGetOutptChrSize(vSource[nInptIdx]);\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription of the source... */\n\n                for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx++) {\n                    nOutptIdx = fPutOutptCode(aWhole, vSource[nInptIdx], nOutptIdx);\n                }\n\n                break conversionSwitch;\n\n            case 2:\n\n                /* the source has a variable-length encoding but the new StringView has a fixed-length encoding... */\n\n                /* mapping... */\n\n                nStartIdx = 0;\n\n                var nChrCode;\n\n                for (nChrIdx = 0; nChrIdx < nCharStart; nChrIdx++) {\n                    nChrCode = fGetInptChrCode(vSource, nStartIdx);\n                    nStartIdx += fGetInptChrSize(nChrCode);\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription of the source... */\n\n                for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx += fGetInptChrSize(nChrCode), nOutptIdx++) {\n                    nChrCode = fGetInptChrCode(vSource, nInptIdx);\n                    aWhole[nOutptIdx] = nChrCode;\n                }\n\n                break conversionSwitch;\n\n            case 3:\n\n                /* both the source and the new StringView have a variable-length encoding... */\n\n                /* mapping... */\n\n                nOutptLen = 0;\n\n                var nChrCode;\n\n                for (var nChrIdx = 0, nInptIdx = 0; nChrIdx < nCharEnd; nInptIdx += fGetInptChrSize(nChrCode)) {\n                    nChrCode = fGetInptChrCode(vSource, nInptIdx);\n                    if (nChrIdx === nCharStart) {\n                        nStartIdx = nInptIdx;\n                    }\n                    if (++nChrIdx > nCharStart) {\n                        nOutptLen += fGetOutptChrSize(nChrCode);\n                    }\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx += fGetInptChrSize(nChrCode)) {\n                    nChrCode = fGetInptChrCode(vSource, nInptIdx);\n                    nOutptIdx = fPutOutptCode(aWhole, nChrCode, nOutptIdx);\n                }\n\n                break conversionSwitch;\n\n            case 4:\n\n                /* DOMString to ASCII or BinaryString or other unknown encodings */\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nIdx = 0; nIdx < nOutptLen; nIdx++) {\n                    aWhole[nIdx] = vSource.charCodeAt(nIdx) & 0xff;\n                }\n\n                break conversionSwitch;\n\n            case 5:\n\n                /* DOMString to UTF-8 or to UTF-16 */\n\n                /* mapping... */\n\n                nOutptLen = 0;\n\n                for (var nMapIdx = 0; nMapIdx < nInptLen; nMapIdx++) {\n                    if (nMapIdx === nCharStart) {\n                        nStartIdx = nOutptLen;\n                    }\n                    nOutptLen += fGetOutptChrSize(vSource.charCodeAt(nMapIdx));\n                    if (nMapIdx === nCharEnd) {\n                        nEndIdx = nOutptLen;\n                    }\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nOutptIdx = 0, nChrIdx = 0; nOutptIdx < nOutptLen; nChrIdx++) {\n                    nOutptIdx = fPutOutptCode(aWhole, vSource.charCodeAt(nChrIdx), nOutptIdx);\n                }\n\n                break conversionSwitch;\n\n            case 6:\n\n                /* DOMString to UTF-32 */\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nIdx = 0; nIdx < nOutptLen; nIdx++) {\n                    aWhole[nIdx] = vSource.charCodeAt(nIdx);\n                }\n\n                break conversionSwitch;\n\n            case 7:\n\n                aWhole = new fTAView(nOutptLen ? vSource : 0);\n                break conversionSwitch;\n\n        }\n\n        aRaw = nTranscrType > 3 && (nStartIdx > 0 || nEndIdx < aWhole.length - 1) ? aWhole.subarray(nStartIdx, nEndIdx) : aWhole;\n\n    }\n\n    this.buffer = aWhole.buffer;\n    this.bufferView = aWhole;\n    this.rawData = aRaw;\n\n    Object.freeze(this);\n\n}\n\n/* CONSTRUCTOR'S METHODS */\n\nStringView.loadUTF8CharCode = function (aChars, nIdx) {\n\n    var nLen = aChars.length, nPart = aChars[nIdx];\n\n    return nPart > 251 && nPart < 254 && nIdx + 5 < nLen ?\n        /* (nPart - 252 << 32) is not possible in ECMAScript! So...: */\n        /* six bytes */ (nPart - 252) * 1073741824 + (aChars[nIdx + 1] - 128 << 24) + (aChars[nIdx + 2] - 128 << 18) + (aChars[nIdx + 3] - 128 << 12) + (aChars[nIdx + 4] - 128 << 6) + aChars[nIdx + 5] - 128\n        : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ?\n            /* five bytes */ (nPart - 248 << 24) + (aChars[nIdx + 1] - 128 << 18) + (aChars[nIdx + 2] - 128 << 12) + (aChars[nIdx + 3] - 128 << 6) + aChars[nIdx + 4] - 128\n            : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ?\n                /* four bytes */(nPart - 240 << 18) + (aChars[nIdx + 1] - 128 << 12) + (aChars[nIdx + 2] - 128 << 6) + aChars[nIdx + 3] - 128\n                : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ?\n                    /* three bytes */ (nPart - 224 << 12) + (aChars[nIdx + 1] - 128 << 6) + aChars[nIdx + 2] - 128\n                    : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ?\n                        /* two bytes */ (nPart - 192 << 6) + aChars[nIdx + 1] - 128\n                        :\n                        /* one byte */ nPart;\n\n};\n\nStringView.putUTF8CharCode = function (aTarget, nChar, nPutAt) {\n\n    var nIdx = nPutAt;\n\n    if (nChar < 0x80 /* 128 */) {\n        /* one byte */\n        aTarget[nIdx++] = nChar;\n    } else if (nChar < 0x800 /* 2048 */) {\n        /* two bytes */\n        aTarget[nIdx++] = 0xc0 /* 192 */ + (nChar >>> 6);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else if (nChar < 0x10000 /* 65536 */) {\n        /* three bytes */\n        aTarget[nIdx++] = 0xe0 /* 224 */ + (nChar >>> 12);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else if (nChar < 0x200000 /* 2097152 */) {\n        /* four bytes */\n        aTarget[nIdx++] = 0xf0 /* 240 */ + (nChar >>> 18);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else if (nChar < 0x4000000 /* 67108864 */) {\n        /* five bytes */\n        aTarget[nIdx++] = 0xf8 /* 248 */ + (nChar >>> 24);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 18) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else /* if (nChar <= 0x7fffffff) */ { /* 2147483647 */\n        /* six bytes */\n        aTarget[nIdx++] = 0xfc /* 252 */ + /* (nChar >>> 32) is not possible in ECMAScript! So...: */ (nChar / 1073741824);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 24) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 18) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    }\n\n    return nIdx;\n\n};\n\nStringView.getUTF8CharLength = function (nChar) {\n    return nChar < 0x80 ? 1 : nChar < 0x800 ? 2 : nChar < 0x10000 ? 3 : nChar < 0x200000 ? 4 : nChar < 0x4000000 ? 5 : 6;\n};\n\nStringView.loadUTF16CharCode = function (aChars, nIdx) {\n\n    /* UTF-16 to DOMString decoding algorithm */\n    var nFrstChr = aChars[nIdx];\n\n    return nFrstChr > 0xD7BF /* 55231 */ && nIdx + 1 < aChars.length ?\n        (nFrstChr - 0xD800 /* 55296 */ << 10) + aChars[nIdx + 1] + 0x2400 /* 9216 */\n        : nFrstChr;\n\n};\n\nStringView.putUTF16CharCode = function (aTarget, nChar, nPutAt) {\n\n    var nIdx = nPutAt;\n\n    if (nChar < 0x10000 /* 65536 */) {\n        /* one element */\n        aTarget[nIdx++] = nChar;\n    } else {\n        /* two elements */\n        aTarget[nIdx++] = 0xD7C0 /* 55232 */ + (nChar >>> 10);\n        aTarget[nIdx++] = 0xDC00 /* 56320 */ + (nChar & 0x3FF /* 1023 */);\n    }\n\n    return nIdx;\n\n};\n\nStringView.getUTF16CharLength = function (nChar) {\n    return nChar < 0x10000 ? 1 : 2;\n};\n\n/* Array of bytes to base64 string decoding */\n\nStringView.b64ToUint6 = function (nChr) {\n\n    return nChr > 64 && nChr < 91 ?\n        nChr - 65\n        : nChr > 96 && nChr < 123 ?\n            nChr - 71\n            : nChr > 47 && nChr < 58 ?\n                nChr + 4\n                : nChr === 43 ?\n                    62\n                    : nChr === 47 ?\n                        63\n                        :\n                        0;\n\n};\n\nStringView.uint6ToB64 = function (nUint6) {\n\n    return nUint6 < 26 ?\n        nUint6 + 65\n        : nUint6 < 52 ?\n            nUint6 + 71\n            : nUint6 < 62 ?\n                nUint6 - 4\n                : nUint6 === 62 ?\n                    43\n                    : nUint6 === 63 ?\n                        47\n                        :\n                        65;\n\n};\n\n/* Base64 string to array encoding */\n\nStringView.bytesToBase64 = function (aBytes) {\n\n    var sB64Enc = \"\";\n\n    for (var nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n        nMod3 = nIdx % 3;\n        if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) {\n            sB64Enc += \"\\r\\n\";\n        }\n        nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\n        if (nMod3 === 2 || aBytes.length - nIdx === 1) {\n            sB64Enc += String.fromCharCode(StringView.uint6ToB64(nUint24 >>> 18 & 63), StringView.uint6ToB64(nUint24 >>> 12 & 63), StringView.uint6ToB64(nUint24 >>> 6 & 63), StringView.uint6ToB64(nUint24 & 63));\n            nUint24 = 0;\n        }\n    }\n\n    return sB64Enc.replace(/A(?=A$|$)/g, \"=\");\n\n};\n\n\nStringView.base64ToBytes = function (sBase64, nBlockBytes) {\n\n    var\n        sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"), nInLen = sB64Enc.length,\n        nOutLen = nBlockBytes ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockBytes) * nBlockBytes : nInLen * 3 + 1 >>> 2,\n        aBytes = new Uint8Array(nOutLen);\n\n    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n        nMod4 = nInIdx & 3;\n        nUint24 |= StringView.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n        if (nMod4 === 3 || nInLen - nInIdx === 1) {\n            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n                aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n            }\n            nUint24 = 0;\n        }\n    }\n\n    return aBytes;\n\n};\n\nStringView.makeFromBase64 = function (sB64Inpt, sEncoding, nByteOffset, nLength) {\n\n    return new StringView(sEncoding === \"UTF-16\" || sEncoding === \"UTF-32\" ? StringView.base64ToBytes(sB64Inpt, sEncoding === \"UTF-16\" ? 2 : 4).buffer : StringView.base64ToBytes(sB64Inpt), sEncoding, nByteOffset, nLength);\n\n};\n\n/* DEFAULT VALUES */\n\nStringView.prototype.encoding = \"UTF-8\";\n/* Default encoding... */\n\n/* INSTANCES' METHODS */\n\nStringView.prototype.makeIndex = function (nChrLength, nStartFrom) {\n\n    var\n\n        aTarget = this.rawData, nChrEnd, nRawLength = aTarget.length,\n        nStartIdx = nStartFrom || 0, nIdxEnd = nStartIdx, nStopAtChr = isNaN(nChrLength) ? Infinity : nChrLength;\n\n    if (nChrLength + 1 > aTarget.length) {\n        throw new RangeError(\"StringView.prototype.makeIndex - The offset can\\'t be major than the length of the array - 1.\");\n    }\n\n    switch (this.encoding) {\n\n        case \"UTF-8\":\n\n            var nPart;\n\n            for (nChrEnd = 0; nIdxEnd < nRawLength && nChrEnd < nStopAtChr; nChrEnd++) {\n                nPart = aTarget[nIdxEnd];\n                nIdxEnd += nPart > 251 && nPart < 254 && nIdxEnd + 5 < nRawLength ? 6\n                    : nPart > 247 && nPart < 252 && nIdxEnd + 4 < nRawLength ? 5\n                        : nPart > 239 && nPart < 248 && nIdxEnd + 3 < nRawLength ? 4\n                            : nPart > 223 && nPart < 240 && nIdxEnd + 2 < nRawLength ? 3\n                                : nPart > 191 && nPart < 224 && nIdxEnd + 1 < nRawLength ? 2\n                                    : 1;\n            }\n\n            break;\n\n        case \"UTF-16\":\n\n            for (nChrEnd = nStartIdx; nIdxEnd < nRawLength && nChrEnd < nStopAtChr; nChrEnd++) {\n                nIdxEnd += aTarget[nIdxEnd] > 0xD7BF /* 55231 */ && nIdxEnd + 1 < aTarget.length ? 2 : 1;\n            }\n\n            break;\n\n        default:\n\n            nIdxEnd = nChrEnd = isFinite(nChrLength) ? nChrLength : nRawLength - 1;\n\n    }\n\n    if (nChrLength) {\n        return nIdxEnd;\n    }\n\n    return nChrEnd;\n\n};\n\nStringView.prototype.toBase64 = function (bWholeBuffer) {\n\n    return StringView.bytesToBase64(\n        bWholeBuffer ?\n            (\n                this.bufferView.constructor === Uint8Array ?\n                    this.bufferView\n                    :\n                    new Uint8Array(this.buffer)\n            )\n            : this.rawData.constructor === Uint8Array ?\n            this.rawData\n            :\n            new Uint8Array(this.buffer, this.rawData.byteOffset, this.rawData.length << (this.rawData.constructor === Uint16Array ? 1 : 2))\n    );\n\n};\n\nStringView.prototype.subview = function (nCharOffset /* optional */, nCharLength /* optional */) {\n\n    var\n\n        nChrLen, nCharStart, nStrLen, bVariableLen = this.encoding === \"UTF-8\" || this.encoding === \"UTF-16\",\n        nStartOffset = nCharOffset, nStringLength, nRawLen = this.rawData.length;\n\n    if (nRawLen === 0) {\n        return new StringView(this.buffer, this.encoding);\n    }\n\n    nStringLength = bVariableLen ? this.makeIndex() : nRawLen;\n    nCharStart = nCharOffset ? Math.max((nStringLength + nCharOffset) % nStringLength, 0) : 0;\n    nStrLen = Number.isInteger(nCharLength) ? Math.max(nCharLength, 0) + nCharStart > nStringLength ? nStringLength - nCharStart : nCharLength : nStringLength;\n\n    if (nCharStart === 0 && nStrLen === nStringLength) {\n        return this;\n    }\n\n    if (bVariableLen) {\n        nStartOffset = this.makeIndex(nCharStart);\n        nChrLen = this.makeIndex(nStrLen, nStartOffset) - nStartOffset;\n    } else {\n        nStartOffset = nCharStart;\n        nChrLen = nStrLen - nCharStart;\n    }\n\n    if (this.encoding === \"UTF-16\") {\n        nStartOffset <<= 1;\n    } else if (this.encoding === \"UTF-32\") {\n        nStartOffset <<= 2;\n    }\n\n    return new StringView(this.buffer, this.encoding, nStartOffset, nChrLen);\n\n};\n\nStringView.prototype.forEachChar = function (fCallback, oThat, nChrOffset, nChrLen) {\n\n    var aSource = this.rawData, nRawEnd, nRawIdx;\n\n    if (this.encoding === \"UTF-8\" || this.encoding === \"UTF-16\") {\n\n        var fGetInptChrSize, fGetInptChrCode;\n\n        if (this.encoding === \"UTF-8\") {\n            fGetInptChrSize = StringView.getUTF8CharLength;\n            fGetInptChrCode = StringView.loadUTF8CharCode;\n        } else if (this.encoding === \"UTF-16\") {\n            fGetInptChrSize = StringView.getUTF16CharLength;\n            fGetInptChrCode = StringView.loadUTF16CharCode;\n        }\n\n        nRawIdx = isFinite(nChrOffset) ? this.makeIndex(nChrOffset) : 0;\n        nRawEnd = isFinite(nChrLen) ? this.makeIndex(nChrLen, nRawIdx) : aSource.length;\n\n        for (var nChrCode, nChrIdx = 0; nRawIdx < nRawEnd; nChrIdx++) {\n            nChrCode = fGetInptChrCode(aSource, nRawIdx);\n            fCallback.call(oThat || null, nChrCode, nChrIdx, nRawIdx, aSource);\n            nRawIdx += fGetInptChrSize(nChrCode);\n        }\n\n    } else {\n\n        nRawIdx = isFinite(nChrOffset) ? nChrOffset : 0;\n        nRawEnd = isFinite(nChrLen) ? nChrLen + nRawIdx : aSource.length;\n\n        for (nRawIdx; nRawIdx < nRawEnd; nRawIdx++) {\n            fCallback.call(oThat || null, aSource[nRawIdx], nRawIdx, nRawIdx, aSource);\n        }\n\n    }\n\n};\n\nStringView.prototype.valueOf = StringView.prototype.toString = function () {\n\n    if (this.encoding !== \"UTF-8\" && this.encoding !== \"UTF-16\") {\n        /* ASCII, UTF-32 or BinaryString to DOMString */\n        return String.fromCharCode.apply(null, this.rawData);\n    }\n\n    var fGetCode, fGetIncr, sView = \"\";\n\n    if (this.encoding === \"UTF-8\") {\n        fGetIncr = StringView.getUTF8CharLength;\n        fGetCode = StringView.loadUTF8CharCode;\n    } else if (this.encoding === \"UTF-16\") {\n        fGetIncr = StringView.getUTF16CharLength;\n        fGetCode = StringView.loadUTF16CharCode;\n    }\n\n    for (var nChr, nLen = this.rawData.length, nIdx = 0; nIdx < nLen; nIdx += fGetIncr(nChr)) {\n        nChr = fGetCode(this.rawData, nIdx);\n        sView += String.fromCharCode(nChr);\n    }\n\n    return sView;\n\n};\n\nexport {StringView};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "loadUTF8CharCode",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~loadUTF8CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "params": [
      {
        "name": "aChars",
        "types": [
          "*"
        ]
      },
      {
        "name": "nIdx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "putUTF8CharCode",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~putUTF8CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "params": [
      {
        "name": "aTarget",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      },
      {
        "name": "nPutAt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "getUTF8CharLength",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~getUTF8CharLength",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 393,
    "undocument": true,
    "params": [
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "loadUTF16CharCode",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~loadUTF16CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "params": [
      {
        "name": "aChars",
        "types": [
          "*"
        ]
      },
      {
        "name": "nIdx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "putUTF16CharCode",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~putUTF16CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "params": [
      {
        "name": "aTarget",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      },
      {
        "name": "nPutAt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "getUTF16CharLength",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~getUTF16CharLength",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 425,
    "undocument": true,
    "params": [
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "b64ToUint6",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~b64ToUint6",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "params": [
      {
        "name": "nChr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "uint6ToB64",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~uint6ToB64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 448,
    "undocument": true,
    "params": [
      {
        "name": "nUint6",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "bytesToBase64",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~bytesToBase64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 467,
    "undocument": true,
    "params": [
      {
        "name": "aBytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "base64ToBytes",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~base64ToBytes",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "params": [
      {
        "name": "sBase64",
        "types": [
          "*"
        ]
      },
      {
        "name": "nBlockBytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "makeFromBase64",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~makeFromBase64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "params": [
      {
        "name": "sB64Inpt",
        "types": [
          "*"
        ]
      },
      {
        "name": "sEncoding",
        "types": [
          "*"
        ]
      },
      {
        "name": "nByteOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "makeIndex",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~makeIndex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "params": [
      {
        "name": "nChrLength",
        "types": [
          "*"
        ]
      },
      {
        "name": "nStartFrom",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "toBase64",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~toBase64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 574,
    "undocument": true,
    "params": [
      {
        "name": "bWholeBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "subview",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~subview",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "params": [
      {
        "name": "nCharOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nCharLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "forEachChar",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~forEachChar",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 629,
    "undocument": true,
    "params": [
      {
        "name": "fCallback",
        "types": [
          "*"
        ]
      },
      {
        "name": "oThat",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChrOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChrLen",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "StringView",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js~StringView",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/StringView.js",
    "importStyle": "{StringView}",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "params": [
      {
        "name": "vInput",
        "types": [
          "*"
        ]
      },
      {
        "name": "sEncoding",
        "types": [
          "*"
        ]
      },
      {
        "name": "nOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "viewer/plugins/BIMServerBigModelsPlugin/lib/defaultMaterials.js",
    "content": "/**\n * @private\n */\nconst defaultMaterials = {\n    IfcSpace: [0.137255, 0.403922, 0.870588, 0.5],\n    IfcRoof: [0.837255, 0.203922, 0.270588, 1.0],\n    IfcSlab: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcWall: [0.537255, 0.337255, 0.237255, 1.0],\n    IfcWallStandardCase: [0.537255, 0.337255, 0.237255, 1.0],\n    IfcDoor: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcWindow: [0.137255, 0.403922, 0.870588, 0.5],\n    IfcOpeningElement: [0.137255, 0.403922, 0.870588, 0],\n    IfcRailing: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcColumn: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcBeam: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcFurnishingElement: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcCurtainWall: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcStair: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcStairFlight: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcBuildingElementProxy: [0.5, 0.5, 0.5, 1.0],\n    IfcFlowSegment: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcFlowitting: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcFlowTerminal: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcProxy: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcSite: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcLightFixture: [0.8470588235, 0.8470588235, 0.870588, 1.0],\n    IfcDuctSegment: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcDistributionFlowElement: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcDuctFitting: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcPlate: [0.8470588235, 0.427450980392, 0, 0.5],\n    IfcAirTerminal: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcMember: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcCovering: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcTransportElement: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFlowController: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFlowFitting: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcRamp: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFurniture: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFooting: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcSystemFurnitureElement: [0.8470588235, 0.427450980392, 0, 1.0],\n    //IfcSpace: [ 0.137255, 0.303922,  0.570588,  0.5],\n    DEFAULT: [0.5, 0.5, 0.5, 1.0]\n};\n\nexport {defaultMaterials}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerBigModelsPlugin/lib/defaultMaterials.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "defaultMaterials",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/defaultMaterials.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/defaultMaterials.js~defaultMaterials",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/defaultMaterials.js",
    "importStyle": "{defaultMaterials}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "{\"IfcSpace\": *, \"IfcRoof\": *, \"IfcSlab\": *, \"IfcWall\": *, \"IfcWallStandardCase\": *, \"IfcDoor\": *, \"IfcWindow\": *, \"IfcOpeningElement\": *, \"IfcRailing\": *, \"IfcColumn\": *, \"IfcBeam\": *, \"IfcFurnishingElement\": *, \"IfcCurtainWall\": *, \"IfcStair\": *, \"IfcStairFlight\": *, \"IfcBuildingElementProxy\": *, \"IfcFlowSegment\": *, \"IfcFlowitting\": *, \"IfcFlowTerminal\": *, \"IfcProxy\": *, \"IfcSite\": *, \"IfcLightFixture\": *, \"IfcDuctSegment\": *, \"IfcDistributionFlowElement\": *, \"IfcDuctFitting\": *, \"IfcPlate\": *, \"IfcAirTerminal\": *, \"IfcMember\": *, \"IfcCovering\": *, \"IfcTransportElement\": *, \"IfcFlowController\": *, \"IfcFlowFitting\": *, \"IfcRamp\": *, \"IfcFurniture\": *, \"IfcFooting\": *, \"IfcSystemFurnitureElement\": *, \"DEFAULT\": *}"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "viewer/plugins/BIMServerBigModelsPlugin/lib/preloadQuery.js",
    "content": "/**\n * @private\n */\nconst preloadQuery = {\n    defines: {\n        Representation: {\n            type: \"IfcProduct\",\n            fields: [\"Representation\", \"geometry\"]\n        },\n        ContainsElementsDefine: {\n            type: \"IfcSpatialStructureElement\",\n            field: \"ContainsElements\",\n            include: {\n                type: \"IfcRelContainedInSpatialStructure\",\n                field: \"RelatedElements\",\n                includes: [\n                    \"IsDecomposedByDefine\",\n                    \"ContainsElementsDefine\",\n                    \"Representation\"\n                ]\n            }\n        },\n        IsDecomposedByDefine: {\n            type: \"IfcObjectDefinition\",\n            field: \"IsDecomposedBy\",\n            include: {\n                type: \"IfcRelDecomposes\",\n                field: \"RelatedObjects\",\n                includes: [\n                    \"IsDecomposedByDefine\",\n                    \"ContainsElementsDefine\",\n                    \"Representation\"\n                ]\n            }\n        }\n    },\n    queries: [\n        {\n            type: \"IfcProject\",\n            includes: [\n                \"IsDecomposedByDefine\",\n                \"ContainsElementsDefine\"\n            ]\n        },\n        {\n            type: \"IfcRepresentation\",\n            includeAllSubtypes: true\n        },\n        {\n            type: \"IfcProductRepresentation\"\n        },\n        {\n            type: \"IfcPresentationLayerWithStyle\"\n        },\n        {\n            type: \"IfcProduct\",\n            includeAllSubtypes: true\n        },\n        {\n            type: \"IfcProductDefinitionShape\"\n        },\n        {\n            type: \"IfcPresentationLayerAssignment\"\n        },\n        {\n            type: \"IfcRelAssociatesClassification\",\n            includes: [\n                {\n                    type: \"IfcRelAssociatesClassification\",\n                    field: \"RelatedObjects\"\n                },\n                {\n                    type: \"IfcRelAssociatesClassification\",\n                    field: \"RelatingClassification\"\n                }\n            ]\n        },\n        {\n            type: \"IfcSIUnit\"\n        },\n        {\n            type: \"IfcPresentationLayerAssignment\"\n        }\n    ]\n};\n\n\nexport {preloadQuery};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerBigModelsPlugin/lib/preloadQuery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "preloadQuery",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/preloadQuery.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/preloadQuery.js~preloadQuery",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/preloadQuery.js",
    "importStyle": "{preloadQuery}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "{\"defines\": *, \"queries\": *}"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "content": "var guidChars = [[\"0\", 10], [\"A\", 26], [\"a\", 26], [\"_\", 1], [\"$\", 1]].map(function (a) {\n    var li = [];\n    var st = a[0].charCodeAt(0);\n    var en = st + a[1];\n    for (var i = st; i < en; ++i) {\n        li.push(i);\n    }\n    return String.fromCharCode.apply(null, li);\n}).join(\"\");\n\nvar b64 = function (v, len) {\n    var r = (!len || len == 4) ? [0, 6, 12, 18] : [0, 6];\n    return r.map(function (i) {\n        return guidChars.substr(parseInt(v / (1 << i)) % 64, 1)\n    }).reverse().join(\"\");\n};\n\n/**\n * @private\n */\nconst utils = {\n\n    XmlToJson: function (node, attributeRenamer) {\n        if (node.nodeType === node.TEXT_NODE) {\n            var v = node.nodeValue;\n            if (v.match(/^\\s+$/) === null) {\n                return v;\n            }\n        } else if (node.nodeType === node.ELEMENT_NODE ||\n            node.nodeType === node.DOCUMENT_NODE) {\n            var json = {type: node.nodeName, children: []};\n\n            if (node.nodeType === node.ELEMENT_NODE) {\n                for (var j = 0; j < node.attributes.length; j++) {\n                    var attribute = node.attributes[j];\n                    var nm = attributeRenamer[attribute.nodeName] || attribute.nodeName;\n                    json[nm] = attribute.nodeValue;\n                }\n            }\n\n            for (var i = 0; i < node.childNodes.length; i++) {\n                var item = node.childNodes[i];\n                var j = xmlToJson(item, attributeRenamer);\n                if (j) json.children.push(j);\n            }\n\n            return json;\n        }\n    },\n\n    Clone: function (ob) {\n        return JSON.parse(JSON.stringify(ob));\n    },\n\n    CompressGuid: function (g) {\n        var bs = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30].map(function (i) {\n            return parseInt(g.substr(i, 2), 16);\n        });\n        return b64(bs[0], 2) + [1, 4, 7, 10, 13].map(function (i) {\n            return b64((bs[i] << 16) + (bs[i + 1] << 8) + bs[i + 2]);\n        }).join(\"\");\n    },\n\n    FindNodeOfType: function (m, t) {\n        var li = [];\n        var _ = function (n) {\n            if (n.type === t) li.push(n);\n            (n.children || []).forEach(function (c) {\n                _(c);\n            });\n        };\n        _(m);\n        return li;\n    },\n\n    Delay: function (dt) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(resolve, dt);\n        });\n    }\n};\n\n\nexport {utils};\n\n// return {\n//     'XmlToJson': xmlToJson,\n//     'Clone': clone,\n//     'CompressGuid': compressGuid,\n//     'FindNodeOfType': findNodeOfType,\n//     'Delay': timeout\n// };\n\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "guidChars",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js~guidChars",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "b64",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js~b64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "v",
        "types": [
          "*"
        ]
      },
      {
        "name": "len",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "utils",
    "memberof": "viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js~utils",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerBigModelsPlugin/lib/utils.js",
    "importStyle": "{utils}",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "{\"XmlToJson\": *, \"Clone\": *, \"CompressGuid\": *, \"FindNodeOfType\": *, \"Delay\": *}"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js",
    "content": "import {Plugin} from \"./../../Plugin.js\";\nimport {BigModel} from \"./../../../xeogl/BigModel/BigModel.js\";\nimport {preloadQuery} from \"./lib/preloadQuery.js\";\nimport {BIMServerBigGeometryLoader} from \"./lib/BIMServerBigGeometryLoader.js\";\nimport {defaultMaterials} from \"./lib/defaultMaterials.js\";\nimport {BIMServerModel} from \"./lib/BIMServerModel.js\";\nimport {utils} from \"./lib/utils.js\";\n\n/**\n * A viewer plugin that loads models from a [BIMServer](http://bimserver.org) (1.5 or later).\n *\n * In the example below, we'll load the latest revision of a project's model.\n *\n * Read more about this example in the [Loading IFC Models from BIMServer](https://github.com/xeolabs/xeokit.io/wiki/Loading-IFC-Models-from-BIMServer) tutorial.\n *\n * @example\n * import BimServerClient from \"http://localhost:8082/apps/bimserverjavascriptapi/bimserverclient.js\";\n * import {Viewer} from \"../../../src/viewer/Viewer.js\";\n * import {BIMServerBigModelsPlugin} from \"../../../src/viewer/plugins/BIMServerBigModelsPlugin/BIMServerBigModelsPlugin.js\";\n *\n * const bimServerAddress = \"http://localhost:8082\";\n * const username = \"admin@bimserver.org\";\n * const password = \"admin\";\n * const poid = 131073;\n *\n * // Create a Viewer\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * // Create a BIMServer client\n * const bimServerAPI = new BimServerClient(bimServerAddress);\n *\n * // Add a BIMServerBigModelsPlugin that uses the client\n * const BIMServerBigModelsPlugin = new BIMServerBigModelsPlugin(viewer, {\n *     bimServerAPI: bimServerAPI\n * });\n *\n * // Initialize the BIMServer client\n * bimServerAPI.init(() => {\n *\n *     // Login to BIMServer\n *     bimServerAPI.login(username, password, () => {\n *\n *         // Query a project by ID\n *         bimServerAPI.call(\"ServiceInterface\", \"getProjectByPoid\", {\n *             poid: poid\n *         }, (project) => {\n *\n *             // Load the latest revision of the project\n *\n *             const roid = project.lastRevisionId;\n *             const schema = project.schema;\n *\n *             const model = BIMServerBigModelsPlugin.load({ // Returns a xeogl.Model\n *                 id: \"myModel\",\n *                 poid: poid,\n *                 roid: roid,\n *                 schema: schema,\n *                 edges: true,                    // Render with emphasized edges\n *                 lambertMaterials: true,         // Lambertian flat-shading instead of Blinn/Phong\n *                 scale: [0.001, 0.001, 0.001],   // Shrink the model a bit\n *                 rotation: [-90, 0, 0]           // Rotate model for World +Y \"up\"\n *             });\n *\n *             const scene = viewer.scene;  // xeogl.Scene\n *             const camera = scene.camera; // xeogl.Camera\n *\n *             model.on(\"loaded\", () => { // When loaded, fit camera and start orbiting\n *                 camera.orbitPitch(20);\n *                 viewer.cameraFlight.flyTo(model);\n *                 scene.on(\"tick\", () => {\n *                     camera.orbitYaw(0.3);\n *                 })\n *             });\n *         });\n *     });\n * });\n *\n * @class BIMServerBigModelsPlugin\n */\nclass BIMServerBigModelsPlugin extends Plugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"BIMServerModels\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     * @param {Object} cfg.bimServerAPI A BIMServer client API instance.\n     */\n    constructor(viewer, cfg) {\n\n        super(\"BIMServerModels\", viewer, cfg);\n\n        /**\n         * Version of BIMServer supported by this plugin.\n         * @type {string}\n         */\n        this.BIMSERVER_VERSION = \"1.5\";\n\n        if (!cfg.bimServerAPI) {\n            this.error(\"Config expected: bimServerAPI\");\n        }\n\n        /**\n         * The BIMServer API.\n         */\n        this.bimServerAPI = cfg.bimServerAPI;\n\n        /**\n         * IFC types that are hidden by default.\n         * @type {{IfcOpeningElement: boolean, IfcSpace: boolean}}\n         */\n        this.hiddenTypes = {\n            \"IfcOpeningElement\": true,\n            \"IfcSpace\": true\n        };\n    }\n\n    /**\n     * Loads a <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> from BIMServer into the {@link Viewer}'s <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.\n     *\n     * @param {Object} params Loading parameters. As well as the parameters required by this  method, this can also include configs for the <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> that this method will create.\n     * @param {String} params.id ID to assign to the model, unique among all components in the Viewer's <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.\n     * @param {Number} params.poid ID of the model's project within BIMServer.\n     * @param {Number} params.roid ID of the model's revision within BIMServer. See the class example for how to query the latest project revision ID via the BIMServer client API.\n     * @param {Number} params.schema The model's IFC schema. See the class example for how to query the project's schema via the BIMServer client API.\n     * @param {Float32Array} [params.position=[0,0,0]] Local 3D position.\n     * @param {Float32Array} [params.scale=[1,1,1]] Local scale.\n     * @param {Float32Array} [params.rotation=[0,0,0]] Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     * @param {Float32Array} [params.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] Local modelling transform matrix. Overrides the position, scale and rotation parameters.\n     * @param {Boolean} [params.edges=false] When true, will emphasise edges when rendering the model.\n     * @param {Boolean} [params.logging=false] Set this true to log some info to the console while loading.\n     * @returns {xeogl.Model} A <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> representing the loaded model.\n     */\n    load(params) {\n\n        const self = this;\n\n        const modelId = params.id;\n        const poid = params.poid;\n        const roid = params.roid;\n        const schema = params.schema;\n        const viewer = this.viewer;\n        const scene = viewer.scene;\n        const bimServerAPI = this.bimServerAPI;\n        const idMapping = { // This are arrays as multiple models might be loaded or unloaded.\n            'toGuid': [],\n            'toId': []\n        };\n        var onTick;\n\n        if (!modelId) {\n            this.error(\"load() param expected: id\");\n            return;\n        }\n\n        if (!poid) {\n            this.error(\"load() param expected: poid\");\n            return;\n        }\n\n        if (!roid) {\n            this.error(\"load() param expected: roid\");\n            return;\n        }\n\n        if (!schema) {\n            this.error(\"load() param expected: schema\");\n            return;\n        }\n\n        if (scene.components[modelId]) {\n            this.error(\"Component with this ID already exists in viewer: \" + modelId);\n            return;\n        }\n\n        const edges = !!params.edges;\n        const logging = !!params.logging;\n\n        scene.canvas.spinner.processes++;\n\n        const xeoglBigModel = new BigModel(scene, params);\n\n        bimServerAPI.getModel(poid, roid, schema, false, apiModel => {  // TODO: Preload not necessary combined with the bruteforce tree\n\n            let fired = false;\n\n            apiModel.query(preloadQuery, () => {\n\n                if (!fired) {\n\n                    fired = true;\n\n                    const bimServerModel = new BIMServerModel(bimServerAPI, apiModel);\n\n                    bimServerModel.getTree().then(function (tree) {\n\n                        const oids = [];\n                        const oidToGuid = {};\n                        const guidToOid = {};\n\n                        const visit = n => {\n                            oids[n.gid] = n.id;\n                            oidToGuid[n.id] = n.guid;\n                            guidToOid[n.guid] = n.id;\n                            for (let i = 0; i < (n.children || []).length; ++i) {\n                                visit(n.children[i]);\n                            }\n                        };\n\n                        visit(tree);\n\n                        idMapping.toGuid.push(oidToGuid);\n                        idMapping.toId.push(guidToOid);\n\n                        const models = {};\n\n                        models[bimServerModel.apiModel.roid] = bimServerModel.apiModel; // TODO: Ugh. Undecorate some of the newly created classes\n\n                        const roid = params.roid;\n\n                        const loader = new BIMServerBigGeometryLoader(bimServerAPI, bimServerModel, roid, null, {\n\n                            log: function (msg) {\n                                if (logging) {\n                                    self.log(msg);\n                                }\n                            },\n\n                            error: function (msg) {\n                                self.error(msg);\n                            },\n\n                            warn: function (msg) {\n                                self.warn(msg);\n                            },\n\n                            gotModelBoundary: function (boundary) {\n\n                                //console.log(\"boundary = \" + boundary);\n\n                                const xmin = boundary[0];\n                                const ymin = boundary[1];\n                                const zmin = boundary[2];\n                                const xmax = boundary[3];\n                                const ymax = boundary[4];\n                                const zmax = boundary[5];\n\n                                const diagonal = Math.sqrt(\n                                    Math.pow(xmax - xmin, 2) +\n                                    Math.pow(ymax - ymin, 2) +\n                                    Math.pow(zmax - zmin, 2));\n\n                                const scale = 100 / diagonal;\n\n                                const center = [\n                                    scale * ((xmax + xmin) / 2),\n                                    scale * ((ymax + ymin) / 2),\n                                    scale * ((zmax + zmin) / 2)\n                                ];\n\n                                // TODO\n\n                                //o.viewer.setScale(scale); // Temporary until we find a better scaling system.\n\n                            },\n\n                            createGeometry: function (geometryDataId, positions, normals, indices, reused) {\n                                const geometryId = `${modelId}.${geometryDataId}`;\n                                xeoglBigModel.createGeometry({\n                                    id: geometryId,\n                                    primitive: \"triangles\",\n                                    positions: positions,\n                                    normals: normals,\n                                    indices: indices\n                                });\n                            },\n\n                            createMeshInstancingGeometry: function(geometryDataId, matrix, color) {\n                                const meshId = `${modelId}.${geometryDataId}.mesh`;\n                                const geometryId = `${modelId}.${geometryDataId}`;\n                                xeoglBigModel.createMesh({\n                                    id: meshId,\n                                    geometryId: geometryId,\n                                    matrix: matrix,\n                                    color: color || [1,1,1,1]\n                                });\n                            },\n\n                            createMeshWithGeometry: function(geometryDataId, positions, normals, indices, matrix, color) {\n                                const meshId = `${modelId}.${geometryDataId}.mesh`;\n                                xeoglBigModel.createMesh({\n                                    id: meshId,\n                                    primitive: \"triangles\",\n                                    positions: positions,\n                                    normals: normals,\n                                    indices: indices,\n                                    matrix: matrix,\n                                    color: color || [1,1,1,1]\n                                });\n                            },\n\n                            createObject(oid, geometryDataId, ifcType) {\n                                const objectId = `${modelId}.${oid}`;\n                                const meshId = `${modelId}.${geometryDataId}.mesh`;\n                                if (scene.entities[objectId]) {\n                                    self.error(`Can't create object - object with id ${objectId} already exists`);\n                                    return;\n                                }\n                                if (scene.components[objectId]) {\n                                    self.error(`Can't create object - scene component with this ID already exists: ${objectId}`);\n                                    return;\n                                }\n                                ifcType = ifcType || \"DEFAULT\";\n                                // const guid = (objectId.includes(\"#\")) ? utils.CompressGuid(objectId.split(\"#\")[1].substr(8, 36).replace(/-/g, \"\")) : null; // TODO: Computing GUID looks like a performance bottleneck\n                                // const color = defaultMaterials[ifcType] || defaultMaterials[\"DEFAULT\"];\n\n                                xeoglBigModel.createObject({\n                                    entityType: ifcType,\n                                    meshIds: [meshId]\n                                });\n                            }\n                        });\n\n                        loader.addProgressListener((progress, nrObjectsRead, totalNrObjects) => {\n                            if (progress === \"start\") {\n                                if (logging) {\n                                    self.log(\"Started loading geometries\");\n                                }\n                            } else if (progress === \"done\") {\n                                if (logging) {\n                                    self.log(`Finished loading geometries (${totalNrObjects} objects received)`);\n                                }\n                                viewer.scene.off(onTick);\n                                scene.canvas.spinner.processes--;\n                                xeoglBigModel.finalize();\n                                xeoglBigModel.fire(\"loaded\");\n\n                            }\n                        });\n\n                        loader.setLoadOids(oids); // TODO: Why do we do this?\n\n                        onTick = viewer.scene.on(\"tick\", () => {\n                            loader.process();\n                        });\n\n                        loader.start();\n                    });\n                }\n            });\n        });\n\n        return xeoglBigModel;\n    };\n\n    /**\n     * @private\n     */\n    send(name, value) {\n        //...\n    }\n\n    /**\n     * @private\n     */\n    writeBookmark(bookmark) {\n        //...\n    }\n\n    /**\n     * @private\n     */\n    readBookmark(bookmark, done) {\n        //...\n        done();\n    }\n\n    /**\n     * Destroys this plugin.\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n\nexport {BIMServerBigModelsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "BIMServerBigModelsPlugin",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js",
    "importStyle": "{BIMServerBigModelsPlugin}",
    "description": "A viewer plugin that loads models from a [BIMServer](http://bimserver.org) (1.5 or later).\n\nIn the example below, we'll load the latest revision of a project's model.\n\nRead more about this example in the [Loading IFC Models from BIMServer](https://github.com/xeolabs/xeokit.io/wiki/Loading-IFC-Models-from-BIMServer) tutorial.",
    "examples": [
      "import BimServerClient from \"http://localhost:8082/apps/bimserverjavascriptapi/bimserverclient.js\";\nimport {Viewer} from \"../../../src/viewer/Viewer.js\";\nimport {BIMServerBigModelsPlugin} from \"../../../src/viewer/plugins/BIMServerBigModelsPlugin/BIMServerBigModelsPlugin.js\";\n\nconst bimServerAddress = \"http://localhost:8082\";\nconst username = \"admin@bimserver.org\";\nconst password = \"admin\";\nconst poid = 131073;\n\n// Create a Viewer\nconst viewer = new Viewer({\n    canvasId: \"myCanvas\"\n});\n\n// Create a BIMServer client\nconst bimServerAPI = new BimServerClient(bimServerAddress);\n\n// Add a BIMServerBigModelsPlugin that uses the client\nconst BIMServerBigModelsPlugin = new BIMServerBigModelsPlugin(viewer, {\n    bimServerAPI: bimServerAPI\n});\n\n// Initialize the BIMServer client\nbimServerAPI.init(() => {\n\n    // Login to BIMServer\n    bimServerAPI.login(username, password, () => {\n\n        // Query a project by ID\n        bimServerAPI.call(\"ServiceInterface\", \"getProjectByPoid\", {\n            poid: poid\n        }, (project) => {\n\n            // Load the latest revision of the project\n\n            const roid = project.lastRevisionId;\n            const schema = project.schema;\n\n            const model = BIMServerBigModelsPlugin.load({ // Returns a xeogl.Model\n                id: \"myModel\",\n                poid: poid,\n                roid: roid,\n                schema: schema,\n                edges: true,                    // Render with emphasized edges\n                lambertMaterials: true,         // Lambertian flat-shading instead of Blinn/Phong\n                scale: [0.001, 0.001, 0.001],   // Shrink the model a bit\n                rotation: [-90, 0, 0]           // Rotate model for World +Y \"up\"\n            });\n\n            const scene = viewer.scene;  // xeogl.Scene\n            const camera = scene.camera; // xeogl.Camera\n\n            model.on(\"loaded\", () => { // When loaded, fit camera and start orbiting\n                camera.orbitPitch(20);\n                viewer.cameraFlight.flyTo(model);\n                scene.on(\"tick\", () => {\n                    camera.orbitYaw(0.3);\n                })\n            });\n        });\n    });\n});"
    ],
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BIMServerBigModelsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"BIMServerModels\"",
        "defaultRaw": "BIMServerModels",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.bimServerAPI",
        "description": "A BIMServer client API instance."
      }
    ]
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "BIMSERVER_VERSION",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#BIMSERVER_VERSION",
    "access": "public",
    "description": "Version of BIMServer supported by this plugin.",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "bimServerAPI",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#bimServerAPI",
    "access": "public",
    "description": "The BIMServer API.",
    "lineNumber": 108,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "hiddenTypes",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#hiddenTypes",
    "access": "public",
    "description": "IFC types that are hidden by default.",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "{IfcOpeningElement: boolean, IfcSpace: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#load",
    "access": "public",
    "description": "Loads a <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> from BIMServer into the {@link Viewer}'s <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{xeogl.Model} A <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> representing the loaded model."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Loading parameters. As well as the parameters required by this  method, this can also include configs for the <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> that this method will create."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "ID to assign to the model, unique among all components in the Viewer's <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.poid",
        "description": "ID of the model's project within BIMServer."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.roid",
        "description": "ID of the model's revision within BIMServer. See the class example for how to query the latest project revision ID via the BIMServer client API."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.schema",
        "description": "The model's IFC schema. See the class example for how to query the project's schema via the BIMServer client API."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.position",
        "description": "Local 3D position."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.scale",
        "description": "Local scale."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.rotation",
        "description": "Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]",
        "defaultRaw": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        "name": "params.matrix",
        "description": "Local modelling transform matrix. Overrides the position, scale and rotation parameters."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.edges",
        "description": "When true, will emphasise edges when rendering the model."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.logging",
        "description": "Set this true to log some info to the console while loading."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "xeogl.Model"
      ],
      "spread": false,
      "description": "A <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> representing the loaded model."
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "send",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#send",
    "access": "private",
    "description": "",
    "lineNumber": 361,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "writeBookmark",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#writeBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 368,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "readBookmark",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#readBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 375,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerBigModelsPlugin.js~BIMServerBigModelsPlugin#destroy",
    "access": "public",
    "description": "Destroys this plugin.",
    "lineNumber": 383,
    "params": [],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js",
    "content": "import {Plugin} from \"./../../Plugin.js\";\nimport {\n    LambertMaterial,\n    PhongMaterial,\n    Geometry,\n    Object as xeoglObjectClass,\n    Model as xeoglModelClass,\n    Mesh\n} from \"./../../../xeogl/xeogl.module.js\";\nimport {preloadQuery} from \"./lib/preloadQuery.js\";\nimport {BIMServerGeometryLoader} from \"./lib/BIMServerGeometryLoader.js\";\nimport {defaultMaterials} from \"./lib/defaultMaterials.js\";\nimport {BIMServerModel} from \"./lib/BIMServerModel.js\";\nimport {utils} from \"./lib/utils.js\";\n\n/**\n * A viewer plugin that loads models from a [BIMServer](http://bimserver.org).\n *\n * For each model loaded, BIMServerModelsPlugin creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n * {@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html). You can load multiple models into the same\n * Viewer, giving each its own position, scale and orientation. You can also load multiple copies of the same model.\n *\n * A BIMServerModelsPlugin is configured with a BIMServerClient, which is a class provided by the BIMServer JavaScript\n * API that provides a client interface through which you can query BIMServer and download models. We use that class to\n * query BIMServer's database, while BIMServerModelsPlugin uses it to download models.\n *\n * In the example below, we'll load the latest revision of a project's model. We'll assume that we have a BIMServer\n * instance running and serving requests on port 8082, with a model loaded for project ID ````131073````. We'll get\n * the file that defines the BIMServer JavaScript API from the BIMServer, which ensures that we have the right\n * version of the API for the BIMServer version.\n *\n * Since xeogl's default World \"up\" direction is +Y, while the model's \"up\" is +Z, we'll rotate the\n * model 90 degrees about the X-axis as we load it. Note that we could also instead configure xeogl to use +Z as \"up\".\n *\n * Note that BIMServerModelsPlugin works with BIMServer V1.5 or later.\n *\n * Read more about this example, as well as how to set up the BIMServer instance and load a model, in the\n * [Loading IFC Models from BIMServer](https://github.com/xeolabs/xeokit.io/wiki/Loading-IFC-Models-from-BIMServer) tutorial\n * in the xeokit SDK wiki.\n *\n * @example\n * import BimServerClient from \"http://localhost:8082/apps/bimserverjavascriptapi/bimserverclient.js\";\n * import {Viewer} from \"../../../src/viewer/Viewer.js\";\n * import {BIMServerModelsPlugin} from \"../../../src/viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js\";\n *\n * const bimServerAddress = \"http://localhost:8082\";\n * const username = \"admin@bimserver.org\";\n * const password = \"admin\";\n * const poid = 131073;     // Project ID\n *\n * // Create a xeokit Viewer\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * // Create a BimServerClient\n * const bimServerAPI = new BimServerClient(bimServerAddress);\n *\n * // Add a BIMServerModelsPlugin to the Viewer, configured with the BIMServerClient\n * const bimServerModelsPlugin = new BIMServerModelsPlugin(viewer, {\n *     bimServerAPI: bimServerAPI\n * });\n *\n * // Initialize the BIMServer client\n * bimServerAPI.init(() => {\n *\n *     // Login to BIMServer\n *     bimServerAPI.login(username, password, () => {\n *\n *         // Query a project by ID\n *         bimServerAPI.call(\"ServiceInterface\", \"getProjectByPoid\", {\n *             poid: poid\n *         }, (project) => {\n *\n *             // From the project info returned by BIMServerClient, we'll get the ID of the latest\n *             // model revision and the version of the IFC schema to which the model conforms.\n *\n *             // Load the latest revision of the project\n *\n *             const roid = project.lastRevisionId;\n *             const schema = project.schema;\n *\n *             const model = bimServerModelsPlugin.load({ // Returns a xeogl.Model\n *                 id: \"myModel\",\n *                 poid: poid,                      // Project ID\n *                 roid: roid,                      // Revision ID\n *                 schema: schema,                  // Schema version\n *                 edges: true,                     // Render with emphasized edges (default is false)\n *                 lambertMaterials: true,          // Lambertian flat-shading instead of default Blinn/Phong\n *                 scale: [0.001, 0.001, 0.001],    // Shrink the model a bit\n *                 rotation: [-90, 0, 0]            // Rotate model for World +Y \"up\"\n *             });\n *\n *             const scene = viewer.scene;  // xeogl.Scene\n *             const camera = scene.camera; // xeogl.Camera\n *\n *             model.on(\"loaded\", () => { // When loaded, fit camera and start orbiting\n *                 camera.orbitPitch(20);\n *                 viewer.cameraFlight.flyTo(model);\n *                 scene.on(\"tick\", () => {\n *                     camera.orbitYaw(0.3);\n *                 })\n *             });\n *         });\n *     });\n * });\n *\n * @class BIMServerModelsPlugin\n */\nclass BIMServerModelsPlugin extends Plugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"BIMServerModels\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     * @param {BimServerClient} cfg.bimServerAPI A BIMServer client API instance.\n     */\n    constructor(viewer, cfg) {\n\n        super(\"BIMServerModels\", viewer, cfg);\n\n        /**\n         * Version of BIMServer supported by this plugin.\n         * @type {string}\n         */\n        this.BIMSERVER_VERSION = \"1.5\";\n\n        if (!cfg.bimServerAPI) {\n            this.error(\"Config expected: bimServerAPI\");\n        }\n\n        /**\n         * The BIMServer API.\n         */\n        this.bimServerAPI = cfg.bimServerAPI;\n\n        /**\n         * IFC types that are hidden by default.\n         * @type {{IfcOpeningElement: boolean, IfcSpace: boolean}}\n         */\n        this.hiddenTypes = {\n            \"IfcOpeningElement\": true,\n            \"IfcSpace\": true\n        };\n    }\n\n    /**\n     * Loads a <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> from BIMServer into the {@link Viewer}'s <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.\n     *\n     * @param {*} params  Loading parameters.\n     *\n     * @param {String} params.id ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\n     * unique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {Number} params.poid ID of the model's project within BIMServer.\n     *\n     * @param {Number} params.roid ID of the model's revision within BIMServer. See the class example for how to query the latest project revision ID via the BIMServer client API.\n     *\n     * @param {Number} params.schema The model's IFC schema. See the class example for how to query the project's schema via the BIMServer client API.\n     *\n     * @param {xeogl.Object} [params.parent] A parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\n     * if we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy.\n     *\n     * @param {Boolean} [params.edges=false] Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized.\n     *\n     * @param {Float32Array} [params.position=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local 3D position.\n     *\n     * @param {Float32Array} [params.scale=[1,1,1]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local scale.\n     *\n     * @param {Float32Array} [params.rotation=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\n     * rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * @param {Float32Array} [params.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] The\n     * [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\n     * the position, scale and rotation parameters.\n     *\n     * @param {Boolean} [params.lambertMaterials=true]  When true, gives each [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html)\n     * the same [xeogl.LambertMaterial](http://xeogl.org/docs/classes/LambertMaterial.html) and a ````colorize````\n     * value set the to the corresponding IFC element color. This is typically used for large models, for a lower\n     * memory footprint and smoother performance.\n     *\n     * @param {Boolean} [params.backfaces=false] When true, allows visible backfaces.\n     *\n     * @param {Number} [params.edgeThreshold=20] When ghosting, highlighting, selecting or edging, this is the threshold\n     * angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n     *\n     * @returns {{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded BIMserver model.\n     */\n    load(params) {\n\n        const self = this;\n\n        const modelId = params.id;\n        const poid = params.poid;\n        const roid = params.roid;\n        const schema = params.schema;\n        const viewer = this.viewer;\n        const scene = viewer.scene;\n        const bimServerAPI = this.bimServerAPI;\n        const idMapping = { // This are arrays as multiple models might be loaded or unloaded.\n            'toGuid': [],\n            'toId': []\n        };\n        var onTick;\n\n        if (!modelId) {\n            this.error(\"load() param expected: id\");\n            return;\n        }\n\n        if (!poid) {\n            this.error(\"load() param expected: poid\");\n            return;\n        }\n\n        if (!roid) {\n            this.error(\"load() param expected: roid\");\n            return;\n        }\n\n        if (!schema) {\n            this.error(\"load() param expected: schema\");\n            return;\n        }\n\n        if (scene.components[modelId]) {\n            this.error(\"Component with this ID already exists in viewer: \" + modelId);\n            return;\n        }\n\n        const edges = !!params.edges;\n        const lambertMaterials = params.lambertMaterials !== false;\n        const quantizeGeometry = params.quantizeGeometry !== false;\n        //const combineGeometry = params.combineGeometry !== false;\n        const combineGeometry = false; // Combination is way too slow ATM\n        const logging = !!params.logging;\n\n        scene.canvas.spinner.processes++;\n\n        const xeoglModel = new xeoglModelClass(scene, params);\n\n        const xeoglMaterial = lambertMaterials ? new LambertMaterial(scene, {\n            backfaces: true\n        }) : new PhongMaterial(scene, {\n            diffuse: [1.0, 1.0, 1.0]\n        });\n\n        bimServerAPI.getModel(poid, roid, schema, false, apiModel => {  // TODO: Preload not necessary combined with the bruteforce tree\n\n            let fired = false;\n\n            apiModel.query(preloadQuery, () => {\n\n                if (!fired) {\n\n                    fired = true;\n\n                    const bimServerModel = new BIMServerModel(bimServerAPI, apiModel);\n\n                    bimServerModel.getTree().then(function (tree) {\n\n                        const oids = [];\n                        const oidToGuid = {};\n                        const guidToOid = {};\n\n                        const visit = n => {\n                            oids[n.gid] = n.id;\n                            oidToGuid[n.id] = n.guid;\n                            guidToOid[n.guid] = n.id;\n                            for (let i = 0; i < (n.children || []).length; ++i) {\n                                visit(n.children[i]);\n                            }\n                        };\n\n                        visit(tree);\n\n                        idMapping.toGuid.push(oidToGuid);\n                        idMapping.toId.push(guidToOid);\n\n                        const models = {};\n\n                        models[bimServerModel.apiModel.roid] = bimServerModel.apiModel; // TODO: Ugh. Undecorate some of the newly created classes\n\n                        const roid = params.roid;\n\n                        const loader = new BIMServerGeometryLoader(bimServerAPI, bimServerModel, roid, null, {\n\n                            log: function (msg) {\n                                if (logging) {\n                                    self.log(msg);\n                                }\n                            },\n\n                            error: function (msg) {\n                                self.error(msg);\n                            },\n\n                            warn: function (msg) {\n                                self.warn(msg);\n                            },\n\n                            gotModelBoundary: function (boundary) {\n\n                                //console.log(\"boundary = \" + boundary);\n\n                                const xmin = boundary[0];\n                                const ymin = boundary[1];\n                                const zmin = boundary[2];\n                                const xmax = boundary[3];\n                                const ymax = boundary[4];\n                                const zmax = boundary[5];\n\n                                const diagonal = Math.sqrt(\n                                    Math.pow(xmax - xmin, 2) +\n                                    Math.pow(ymax - ymin, 2) +\n                                    Math.pow(zmax - zmin, 2));\n\n                                const scale = 100 / diagonal;\n\n                                const center = [\n                                    scale * ((xmax + xmin) / 2),\n                                    scale * ((ymax + ymin) / 2),\n                                    scale * ((zmax + zmin) / 2)\n                                ];\n\n                                // TODO\n\n                                //o.viewer.setScale(scale); // Temporary until we find a better scaling system.\n\n                            },\n\n                            createGeometry: function (geometryDataId, positions, normals, indices, reused) {\n                                const geometryId = `${modelId}.${geometryDataId}`;\n                                new Geometry(xeoglModel, {\n                                    id: geometryId,\n                                    primitive: \"triangles\",\n                                    positions: positions,\n                                    normals: normals,\n                                    indices: indices,\n                                    quantized: quantizeGeometry,\n                                    combined: combineGeometry\n                                });\n                            },\n\n                            createObject(oid, geometryDataIds, ifcType, matrix) {\n                                const objectId = `${modelId}.${oid}`;\n                                if (scene.entities[objectId]) {\n                                    self.error(`Can't create object - object with id ${objectId} already exists`);\n                                    return;\n                                }\n                                if (scene.components[objectId]) {\n                                    self.error(`Can't create object - scene component with this ID already exists: ${objectId}`);\n                                    return;\n                                }\n                                ifcType = ifcType || \"DEFAULT\";\n                                const guid = (objectId.includes(\"#\")) ? utils.CompressGuid(objectId.split(\"#\")[1].substr(8, 36).replace(/-/g, \"\")) : null; // TODO: Computing GUID looks like a performance bottleneck\n                                const color = defaultMaterials[ifcType] || defaultMaterials[\"DEFAULT\"];\n                                const xeoglObject = new xeoglObjectClass(xeoglModel, {\n                                    id: objectId,\n                                    guid,\n                                    entityType: ifcType,\n                                    matrix,\n                                    colorize: color, // RGB\n                                    opacity: color[3], // A\n                                    visibility: !self.hiddenTypes[ifcType],\n                                    edges: edges\n                                });\n                                xeoglModel.addChild(xeoglObject, false);\n                                for (let i = 0, len = geometryDataIds.length; i < len; i++) {\n                                    const xeoglMesh = new Mesh(xeoglModel, {\n                                        geometry: `${modelId}.${geometryDataIds[i]}`,\n                                        material: xeoglMaterial\n                                    });\n                                    xeoglObject.addChild(xeoglMesh, true);\n                                    xeoglMesh.colorize = color; // HACK: Overrides state inheritance\n                                    xeoglMesh.opacity = color[3]; // A\n                                }\n                            },\n\n                            addGeometryToObject(oid, geometryDataId) {\n                                const objectId = `${modelId}.${oid}`;\n                                const xeoglObject = xeoglModel.scene.components[objectId];\n                                if (!xeoglObject) {\n                                    //self.error(`Can't find object with id ${objectId}`);\n                                    return;\n                                }\n                                const geometryId = `${modelId}.${geometryDataId}`;\n                                const xeoglMesh = new Mesh(xeoglModel, {\n                                    geometry: geometryId,\n                                    material: xeoglMaterial\n                                });\n                                //  xeoglMesh.colorize = color; // HACK: Overrides state inheritance\n                                xeoglObject.addChild(xeoglMesh, true);\n                            }\n                        });\n\n                        loader.addProgressListener((progress, nrObjectsRead, totalNrObjects) => {\n                            if (progress === \"start\") {\n                                if (logging) {\n                                    self.log(\"Started loading geometries\");\n                                }\n                            } else if (progress === \"done\") {\n                                if (logging) {\n                                    self.log(`Finished loading geometries (${totalNrObjects} objects received)`);\n                                }\n                                viewer.scene.off(onTick);\n                                scene.canvas.spinner.processes--;\n                                xeoglModel.fire(\"loaded\");\n\n                            }\n                        });\n\n                        loader.setLoadOids(oids); // TODO: Why do we do this?\n\n                        onTick = viewer.scene.on(\"tick\", () => {\n                            loader.process();\n                        });\n\n                        loader.start();\n                    });\n                }\n            });\n        });\n\n        return xeoglModel;\n    };\n\n    /**\n     * @private\n     */\n    send(name, value) {\n        //...\n    }\n\n    /**\n     * @private\n     */\n    writeBookmark(bookmark) {\n        //...\n    }\n\n    /**\n     * @private\n     */\n    readBookmark(bookmark, done) {\n        //...\n        done();\n    }\n\n    /**\n     * Destroys this plugin.\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n\nexport {BIMServerModelsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "BIMServerModelsPlugin",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js",
    "importStyle": "{BIMServerModelsPlugin}",
    "description": "A viewer plugin that loads models from a [BIMServer](http://bimserver.org).\n\nFor each model loaded, BIMServerModelsPlugin creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n{@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html). You can load multiple models into the same\nViewer, giving each its own position, scale and orientation. You can also load multiple copies of the same model.\n\nA BIMServerModelsPlugin is configured with a BIMServerClient, which is a class provided by the BIMServer JavaScript\nAPI that provides a client interface through which you can query BIMServer and download models. We use that class to\nquery BIMServer's database, while BIMServerModelsPlugin uses it to download models.\n\nIn the example below, we'll load the latest revision of a project's model. We'll assume that we have a BIMServer\ninstance running and serving requests on port 8082, with a model loaded for project ID ````131073````. We'll get\nthe file that defines the BIMServer JavaScript API from the BIMServer, which ensures that we have the right\nversion of the API for the BIMServer version.\n\nSince xeogl's default World \"up\" direction is +Y, while the model's \"up\" is +Z, we'll rotate the\nmodel 90 degrees about the X-axis as we load it. Note that we could also instead configure xeogl to use +Z as \"up\".\n\nNote that BIMServerModelsPlugin works with BIMServer V1.5 or later.\n\nRead more about this example, as well as how to set up the BIMServer instance and load a model, in the\n[Loading IFC Models from BIMServer](https://github.com/xeolabs/xeokit.io/wiki/Loading-IFC-Models-from-BIMServer) tutorial\nin the xeokit SDK wiki.",
    "examples": [
      "import BimServerClient from \"http://localhost:8082/apps/bimserverjavascriptapi/bimserverclient.js\";\nimport {Viewer} from \"../../../src/viewer/Viewer.js\";\nimport {BIMServerModelsPlugin} from \"../../../src/viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js\";\n\nconst bimServerAddress = \"http://localhost:8082\";\nconst username = \"admin@bimserver.org\";\nconst password = \"admin\";\nconst poid = 131073;     // Project ID\n\n// Create a xeokit Viewer\nconst viewer = new Viewer({\n    canvasId: \"myCanvas\"\n});\n\n// Create a BimServerClient\nconst bimServerAPI = new BimServerClient(bimServerAddress);\n\n// Add a BIMServerModelsPlugin to the Viewer, configured with the BIMServerClient\nconst bimServerModelsPlugin = new BIMServerModelsPlugin(viewer, {\n    bimServerAPI: bimServerAPI\n});\n\n// Initialize the BIMServer client\nbimServerAPI.init(() => {\n\n    // Login to BIMServer\n    bimServerAPI.login(username, password, () => {\n\n        // Query a project by ID\n        bimServerAPI.call(\"ServiceInterface\", \"getProjectByPoid\", {\n            poid: poid\n        }, (project) => {\n\n            // From the project info returned by BIMServerClient, we'll get the ID of the latest\n            // model revision and the version of the IFC schema to which the model conforms.\n\n            // Load the latest revision of the project\n\n            const roid = project.lastRevisionId;\n            const schema = project.schema;\n\n            const model = bimServerModelsPlugin.load({ // Returns a xeogl.Model\n                id: \"myModel\",\n                poid: poid,                      // Project ID\n                roid: roid,                      // Revision ID\n                schema: schema,                  // Schema version\n                edges: true,                     // Render with emphasized edges (default is false)\n                lambertMaterials: true,          // Lambertian flat-shading instead of default Blinn/Phong\n                scale: [0.001, 0.001, 0.001],    // Shrink the model a bit\n                rotation: [-90, 0, 0]            // Rotate model for World +Y \"up\"\n            });\n\n            const scene = viewer.scene;  // xeogl.Scene\n            const camera = scene.camera; // xeogl.Camera\n\n            model.on(\"loaded\", () => { // When loaded, fit camera and start orbiting\n                camera.orbitPitch(20);\n                viewer.cameraFlight.flyTo(model);\n                scene.on(\"tick\", () => {\n                    camera.orbitYaw(0.3);\n                })\n            });\n        });\n    });\n});"
    ],
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BIMServerModelsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"BIMServerModels\"",
        "defaultRaw": "BIMServerModels",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      },
      {
        "nullable": null,
        "types": [
          "BimServerClient"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.bimServerAPI",
        "description": "A BIMServer client API instance."
      }
    ]
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "BIMSERVER_VERSION",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#BIMSERVER_VERSION",
    "access": "public",
    "description": "Version of BIMServer supported by this plugin.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "bimServerAPI",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#bimServerAPI",
    "access": "public",
    "description": "The BIMServer API.",
    "lineNumber": 136,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "hiddenTypes",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#hiddenTypes",
    "access": "public",
    "description": "IFC types that are hidden by default.",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "{IfcOpeningElement: boolean, IfcSpace: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#load",
    "access": "public",
    "description": "Loads a <a href=\"http://xeogl.org/docs/classes/Model.html\">xeogl.Model</a> from BIMServer into the {@link Viewer}'s <a href=\"http://xeogl.org/docs/classes/Scene.html\">xeogl.Scene</a>.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded BIMserver model."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Loading parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\nunique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.poid",
        "description": "ID of the model's project within BIMServer."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.roid",
        "description": "ID of the model's revision within BIMServer. See the class example for how to query the latest project revision ID via the BIMServer client API."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.schema",
        "description": "The model's IFC schema. See the class example for how to query the project's schema via the BIMServer client API."
      },
      {
        "nullable": null,
        "types": [
          "xeogl.Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.parent",
        "description": "A parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\nif we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.edges",
        "description": "Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.position",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal 3D position."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.scale",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal scale."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.rotation",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\nrotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]",
        "defaultRaw": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        "name": "params.matrix",
        "description": "The\n[xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\nthe position, scale and rotation parameters."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.lambertMaterials",
        "description": "When true, gives each [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html)\nthe same [xeogl.LambertMaterial](http://xeogl.org/docs/classes/LambertMaterial.html) and a ````colorize````\nvalue set the to the corresponding IFC element color. This is typically used for large models, for a lower\nmemory footprint and smoother performance."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.backfaces",
        "description": "When true, allows visible backfaces."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.edgeThreshold",
        "description": "When ghosting, highlighting, selecting or edging, this is the threshold\nangle between normals of adjacent triangles, below which their shared wireframe edge is not drawn."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{xeogl.Model}"
      ],
      "spread": false,
      "description": "A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded BIMserver model."
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "send",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#send",
    "access": "private",
    "description": "",
    "lineNumber": 434,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "writeBookmark",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#writeBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 441,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "readBookmark",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#readBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 448,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/BIMServerModelsPlugin.js~BIMServerModelsPlugin#destroy",
    "access": "public",
    "description": "Destroys this plugin.",
    "lineNumber": 456,
    "params": [],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerBigGeometryLoader.js",
    "content": "import {DataInputStreamReader} from \"./DataInputStreamReader.js\";\n\n/**\n *\n * @param bimServerAPI\n * @param bimServerModel\n * @param roid\n * @param globalTransformationMatrix\n * @param bigModelBuilder\n * @constructor\n * @private\n */\nfunction BIMServerBigGeometryLoader(bimServerAPI, bimServerModel, roid, globalTransformationMatrix, bigModelBuilder) {\n\n    var o = this;\n\n    var protocolVersion = null;\n    var currentState = {};\n    const progressListeners = [];\n    var prepareReceived = false;\n    const todo = [];\n    const instancedGeometriesLoaded = {};\n    const geometriesLoaded = {};\n    const objectsWaitingForGeometryData = {};\n\n    const batchedMeshesLoaded = {};\n\n    o.roid = roid;\n    var infoToOid = {};\n\n    this.addProgressListener = function (progressListener) {\n        progressListeners.push(progressListener);\n    };\n\n    function processMessage(stream) {\n        var messageType = stream.readByte();\n        if (messageType === 0) {\n            readStart(stream);\n        } else if (messageType === 6) {\n            readEnd(stream);\n        } else {\n            readObject(stream, messageType);\n        }\n        stream.align8();\n        return stream.remaining() > 0;\n    }\n\n    this.process = function () {\n        var data = todo.shift();\n        var stream;\n        while (data != null) {\n            stream = new DataInputStreamReader(data);\n            var topicId = stream.readLong();\n            while (processMessage(stream)) {\n\n            }\n            data = todo.shift();\n        }\n    };\n\n    this.setLoadOids = function (oids) {\n        o.options = {type: \"oids\", oids: oids};\n    };\n\n    this.start = function () {\n\n        if (!o.options || o.options.type !== \"oids\") {\n            throw new Error(\"Invalid loader configuration\");\n        }\n\n        var obj = [];\n\n        o.groupId = o.roid;\n        infoToOid = o.options.oids;\n\n        for (var k in infoToOid) {\n            var oid = parseInt(infoToOid[k]);\n            bimServerModel.apiModel.get(oid, function (object) {\n                if (object.object._rgeometry != null) {\n                    if (object.model.objects[object.object._rgeometry] != null) {\n                        // Only if this data is preloaded, otherwise just don't include any gi\n                        object.getGeometry(function (geometryInfo) {\n                            obj.push({\n                                gid: object.object._rgeometry,\n                                oid: object.oid,\n                                object: object,\n                                info: geometryInfo.object\n                            });\n                        });\n                    } else {\n                        obj.push({gid: object.object._rgeometry, oid: object.oid, object: object});\n                    }\n                }\n            });\n        }\n\n        obj.sort(function (a, b) {\n            if (a.info != null && b.info != null) {\n                var topa = (a.info._emaxBounds.z + a.info._eminBounds.z) / 2;\n                var topb = (b.info._emaxBounds.z + b.info._eminBounds.z) / 2;\n                return topa - topb;\n            } else {\n                // Resort back to type\n                // TODO this is dodgy when some objects do have info, and others don't\n                return a.object.getType().localeCompare(b.object.getType());\n            }\n        });\n\n        var oids = [];\n\n        obj.forEach(function (wrapper) {\n            oids.push(wrapper.object.object._rgeometry._i);\n        });\n\n        var serializerName = \"org.bimserver.serializers.binarygeometry.BinaryGeometryMessagingStreamingSerializerPlugin\";\n\n        var fieldsToInclude = [\"indices\"];\n        fieldsToInclude.push(\"normals\");\n        fieldsToInclude.push(\"vertices\");\n        fieldsToInclude.push(\"colorsQuantized\");\n\n        var newQuery = {\n            type: \"GeometryInfo\",\n            oids: oids,\n            include: {\n                type: \"GeometryInfo\",\n                field: \"data\",\n                include: {\n                    type: \"GeometryData\",\n                    fieldsDirect: fieldsToInclude\n                }\n            },\n            loaderSettings: {\n                splitGeometry: false\n            }\n        };\n\n        var oldQuery = {\n            type: \"GeometryInfo\",\n            oids: oids,\n            include: {\n                type: \"GeometryInfo\",\n                field: \"data\"\n            }\n        };\n\n        var useNewQuery = false;\n\n        var pluginCallback = function (serializer) {\n            bimServerAPI.call(\"ServiceInterface\", \"download\", {\n                roids: [o.roid],\n                query: JSON.stringify(useNewQuery ? newQuery : oldQuery),\n                serializerOid: serializer.oid,\n                sync: false\n            }, function (topicId) {\n                o.topicId = topicId;\n                bimServerAPI.registerProgressHandler(o.topicId, progressHandler);\n            });\n        };\n\n        var promise = bimServerAPI.getSerializerByPluginClassName(serializerName + \"3\", pluginCallback);\n        if (promise) {\n            // If this returns a promise (it'll never be cancelled btw. even in case of error) we're\n            // talking to a newer version of the plugin ecosystem and we can try the new query.\n            useNewQuery = true;\n            bimServerAPI.getSerializerByPluginClassName(serializerName).then(pluginCallback);\n        }\n    };\n\n    function progressHandler(topicId, state) {\n        if (topicId === o.topicId) {\n            if (state.title === \"Done preparing\") {\n                if (!prepareReceived) {\n                    prepareReceived = true;\n                    downloadInitiated();\n                }\n            }\n            if (state.state === \"FINISHED\") {\n                bimServerAPI.unregisterProgressHandler(o.topicId, progressHandler);\n            }\n        }\n    }\n\n    function downloadInitiated() {\n        currentState = {\n            mode: 0,\n            nrObjectsRead: 0,\n            nrObjects: 0\n        };\n        bimServerAPI.setBinaryDataListener(o.topicId, binaryDataListener);\n        bimServerAPI.downloadViaWebsocket({\n            longActionId: o.topicId,\n            topicId: o.topicId\n        });\n    }\n\n    function binaryDataListener(data) {\n        todo.push(data);\n    }\n\n    function afterRegistration(topicId) {\n        bimServerAPI.call(\"Bimsie1NotificationRegistryInterface\", \"getProgress\", {\n            topicId: o.topicId\n        }, function (state) {\n            progressHandler(o.topicId, state);\n        });\n    }\n\n    function readStart(data) {\n        var start = data.readUTF8();\n        if (start !== \"BGS\") {\n            bigModelBuilder.error(\"data does not start with BGS (\" + start + \")\");\n            return false;\n        }\n        protocolVersion = data.readByte();\n        bigModelBuilder.log(\"BIMServer protocol version = \" + protocolVersion);\n        if (protocolVersion !== 10 && protocolVersion !== 11 && protocolVersion !== 16) {\n            bigModelBuilder.error(\"Unimplemented protocol version\");\n            return false;\n        }\n        if (protocolVersion > 15) {\n            o.multiplierToMm = data.readFloat();\n        }\n        data.align8();\n        var boundary = data.readDoubleArray(6);\n        bigModelBuilder.gotModelBoundary(boundary);\n        currentState.mode = 1;\n        progressListeners.forEach(function (progressListener) {\n            progressListener(\"start\", currentState.nrObjectsRead, currentState.nrObjectsRead);\n        });\n        updateProgress();\n    }\n\n    function readEnd(data) {\n        progressListeners.forEach(function (progressListener) {\n            progressListener(\"done\", currentState.nrObjectsRead, currentState.nrObjectsRead);\n        });\n        bimServerAPI.call(\"ServiceInterface\", \"cleanupLongAction\", {topicId: o.topicId}, function () {\n        });\n    }\n\n    function updateProgress() {\n    }\n\n    function readObject(stream, geometryType) {\n\n        //---------------------------------------------------------------------------------\n        // protocol version assumed to be 16\n        //---------------------------------------------------------------------------------\n\n        const color = new Float32Array([1, 1, 1, 1]);\n\n        if (geometryType === 1) {\n\n            //-----------------------------------------------------------------------------\n            // Geometry\n            //-----------------------------------------------------------------------------\n\n            let reused = stream.readInt();\n            let ifcType = stream.readUTF8();\n\n            stream.align8();\n\n            let roid = stream.readLong();\n            let croid = stream.readLong();\n            let hasTransparency = stream.readLong() === 1;\n\n            let geometryDataId = stream.readLong();\n            let numIndices = stream.readInt();\n            let indices = stream.readShortArray(numIndices);\n\n            stream.align4();\n\n            let b = stream.readInt();\n            let gotColor = (b === 1);\n\n            if (gotColor) {\n                color[0] = stream.readFloat();\n                color[1] = stream.readFloat();\n                color[2] = stream.readFloat();\n                color[3] = stream.readFloat();\n            }\n\n            let numPositions = stream.readInt();\n            let positions = stream.readFloatArray(numPositions);\n            let numNormals = stream.readInt();\n            let normals = stream.readFloatArray(numNormals);\n            let numColors = stream.readInt();\n\n            var colors = null;\n\n            if (numColors > 0) {\n\n                colors = stream.readFloatArray(numColors);\n\n                color[0] = colors[0];\n                color[1] = colors[0];\n                color[2] = colors[0];\n                color[3] = colors[0];\n\n            } else if (color !== null) {\n\n                // Creating vertex colors here anyways (not transmitted over the line is a plus), should find a way to do this with scenejs without vertex-colors\n\n                // colors = new Array(numPositions * 4);\n                //\n                // for (var i = 0; i < numPositions; i++) {\n                //     colors[i * 4] = color.r;\n                //     colors[i * 4 + 1] = color.g;\n                //     colors[i * 4 + 2] = color.b;\n                //     colors[i * 4 + 3] = color.a;\n                // }\n            }\n\n            var instanced = (reused > 1);\n\n            if (!instanced) {\n\n                // Batching\n\n                var matrix = null;\n                var color2 = [1, 1, 1, 1];\n                var batchedGeometry = {\n                    positions: positions,\n                    normals: normals,\n                    indices: indices\n                };\n                bigModelBuilder.createMeshWithGeometry(geometryDataId, positions, normals, indices, reused, matrix, color2);\n                batchedMeshesLoaded[geometryDataId] = batchedGeometry;\n\n            } else {\n\n                // Instancing\n\n                bigModelBuilder.createGeometry(geometryDataId, positions, normals, indices, reused);\n                instancedGeometriesLoaded[geometryDataId] = true;\n            }\n\n            geometriesLoaded[geometryDataId] = true;\n\n            if (objectsWaitingForGeometryData[geometryDataId] !== null) {\n\n                // Object(s) waiting for this geometry\n\n                objectsWaitingForGeometryData[geometryDataId].forEach(function (data) {\n                    var oid = data.oid;\n                    if (instanced) {\n                        bigModelBuilder.createMeshInstancingGeometry(geometryDataId, data.matrix, [1, 1, 1, 1]);\n                    }\n                    bigModelBuilder.createObject(data.oid, geometryDataId, data.ifcType, data.matrix);\n                });\n\n                delete objectsWaitingForGeometryData[geometryDataId];\n            } else {\n\n                delete batchedMeshesLoaded[geometryDataId];\n            }\n\n        } else if (geometryType === 5) {\n\n            //-----------------------------------------------------------------------------\n            // Object\n            //-----------------------------------------------------------------------------\n\n            var oid = stream.readLong();\n            let ifcType = stream.readUTF8();\n\n            stream.align8();\n\n            let roid = stream.readLong();\n            let geometryInfoOid = stream.readLong();\n            let hasTransparency = stream.readLong() === 1;\n            let objectBounds = stream.readDoubleArray(6);\n            let matrix = stream.readDoubleArray(16);\n            let geometryDataId = stream.readLong();\n            let geometryDataOidFound = geometryDataId;\n            oid = infoToOid[geometryInfoOid];\n\n            if (oid === null) {\n                // bigModelBuilder.error(\"Not found\", infoToOid, geometryInfoOid);\n                return;\n            }\n\n            if (batchedMeshesLoaded[geometryDataId]) {\n                var batchedGeometry = batchedMeshesLoaded[geometryDataId];\n                var positions = batchedGeometry.positions;\n                var normals = batchedGeometry.normals;\n                var indices = batchedGeometry.indices;\n                var reused = false;\n                bigModelBuilder.createMeshWithGeometry(geometryDataId, positions, normals, indices, reused, matrix, color2);\n                bigModelBuilder.createObject(oid, geometryDataId, ifcType, matrix);\n                delete batchedMeshesLoaded[geometryDataId];\n\n            } else if (instancedGeometriesLoaded[geometryDataId]) {\n                bigModelBuilder.createMeshInstancingGeometry(geometryDataId, matrix, color);\n                bigModelBuilder.createObject(oid, geometryDataId, ifcType);\n\n            } else {\n\n                // Geometry not yet loaded for this object - save the object as waiting for this geometry\n\n                var list = objectsWaitingForGeometryData[geometryDataId];\n                if (!list) {\n                    list = [];\n                    objectsWaitingForGeometryData[geometryDataId] = list;\n                }\n                var data = {\n                    oid: oid,\n                    ifcType: ifcType,\n                    matrix: matrix\n                };\n                list.push(data);\n            }\n        }\n\n        currentState.nrObjectsRead++;\n\n        updateProgress();\n    }\n}\n\nexport {BIMServerBigGeometryLoader};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/BIMServerBigGeometryLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "BIMServerBigGeometryLoader",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerBigGeometryLoader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerBigGeometryLoader.js~BIMServerBigGeometryLoader",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/BIMServerBigGeometryLoader.js",
    "importStyle": "{BIMServerBigGeometryLoader}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bimServerAPI",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bimServerModel",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "roid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "globalTransformationMatrix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bigModelBuilder",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerGeometryLoader.js",
    "content": "import {DataInputStreamReader} from \"./DataInputStreamReader.js\";\n\n/**\n *\n * @param bimServerAPI\n * @param bimServerModel\n * @param roid\n * @param globalTransformationMatrix\n * @param modelBuilder\n * @constructor\n * @private\n */\nfunction BIMServerGeometryLoader(bimServerAPI, bimServerModel, roid, globalTransformationMatrix, modelBuilder) {\n\n    var o = this;\n\n    var protocolVersion = null;\n    var currentState = {};\n    const progressListeners = [];\n    var prepareReceived = false;\n    const todo = [];\n    const geometriesLoaded = {};\n    const objectsWaitingForGeometryData = {};\n\n    o.roid = roid;\n    var infoToOid = {};\n\n    this.addProgressListener = function (progressListener) {\n        progressListeners.push(progressListener);\n    };\n\n    function processMessage(stream) {\n        var messageType = stream.readByte();\n        if (messageType === 0) {\n            readStart(stream);\n        } else if (messageType === 6) {\n            readEnd(stream);\n        } else {\n            readObject(stream, messageType);\n        }\n        stream.align8();\n        return stream.remaining() > 0;\n    }\n\n    this.process = function () {\n        var data = todo.shift();\n        var stream;\n        while (data != null) {\n            stream = new DataInputStreamReader(data);\n            var topicId = stream.readLong();\n            while (processMessage(stream)) {\n\n            }\n            data = todo.shift();\n        }\n    };\n\n    this.setLoadOids = function (oids) {\n        o.options = {type: \"oids\", oids: oids};\n    };\n\n    this.start = function () {\n\n        if (!o.options || o.options.type !== \"oids\") {\n            throw new Error(\"Invalid loader configuration\");\n        }\n\n        var obj = [];\n\n        o.groupId = o.roid;\n        infoToOid = o.options.oids;\n\n        for (var k in infoToOid) {\n            var oid = parseInt(infoToOid[k]);\n            bimServerModel.apiModel.get(oid, function (object) {\n                if (object.object._rgeometry != null) {\n                    if (object.model.objects[object.object._rgeometry] != null) {\n                        // Only if this data is preloaded, otherwise just don't include any gi\n                        object.getGeometry(function (geometryInfo) {\n                            obj.push({\n                                gid: object.object._rgeometry,\n                                oid: object.oid,\n                                object: object,\n                                info: geometryInfo.object\n                            });\n                        });\n                    } else {\n                        obj.push({gid: object.object._rgeometry, oid: object.oid, object: object});\n                    }\n                }\n            });\n        }\n\n        obj.sort(function (a, b) {\n            if (a.info != null && b.info != null) {\n                var topa = (a.info._emaxBounds.z + a.info._eminBounds.z) / 2;\n                var topb = (b.info._emaxBounds.z + b.info._eminBounds.z) / 2;\n                return topa - topb;\n            } else {\n                // Resort back to type\n                // TODO this is dodgy when some objects do have info, and others don't\n                return a.object.getType().localeCompare(b.object.getType());\n            }\n        });\n\n        var oids = [];\n\n        obj.forEach(function (wrapper) {\n            oids.push(wrapper.object.object._rgeometry._i);\n        });\n\n        var serializerName = \"org.bimserver.serializers.binarygeometry.BinaryGeometryMessagingStreamingSerializerPlugin\";\n\n        var fieldsToInclude = [\"indices\"];\n        fieldsToInclude.push(\"normals\");\n        fieldsToInclude.push(\"vertices\");\n        fieldsToInclude.push(\"colorsQuantized\");\n\n        var newQuery = {\n            type: \"GeometryInfo\",\n            oids: oids,\n            include: {\n                type: \"GeometryInfo\",\n                field: \"data\",\n                include: {\n                    type: \"GeometryData\",\n                    fieldsDirect: fieldsToInclude\n                }\n            },\n            loaderSettings: {\n                splitGeometry: false\n            }\n        };\n\n        var oldQuery = {\n            type: \"GeometryInfo\",\n            oids: oids,\n            include: {\n                type: \"GeometryInfo\",\n                field: \"data\"\n            }\n        };\n\n        var useNewQuery = false;\n\n        var pluginCallback = function (serializer) {\n            bimServerAPI.call(\"ServiceInterface\", \"download\", {\n                roids: [o.roid],\n                query: JSON.stringify(useNewQuery ? newQuery : oldQuery),\n                serializerOid: serializer.oid,\n                sync: false\n            }, function (topicId) {\n                o.topicId = topicId;\n                bimServerAPI.registerProgressHandler(o.topicId, progressHandler);\n            });\n        };\n\n        var promise = bimServerAPI.getSerializerByPluginClassName(serializerName + \"3\", pluginCallback);\n        if (promise) {\n            // If this returns a promise (it'll never be cancelled btw. even in case of error) we're\n            // talking to a newer version of the plugin ecosystem and we can try the new query.\n            useNewQuery = true;\n            bimServerAPI.getSerializerByPluginClassName(serializerName).then(pluginCallback);\n        }\n    };\n\n    function progressHandler(topicId, state) {\n        if (topicId === o.topicId) {\n            if (state.title === \"Done preparing\") {\n                if (!prepareReceived) {\n                    prepareReceived = true;\n                    downloadInitiated();\n                }\n            }\n            if (state.state === \"FINISHED\") {\n                bimServerAPI.unregisterProgressHandler(o.topicId, progressHandler);\n            }\n        }\n    }\n\n    function downloadInitiated() {\n        currentState = {\n            mode: 0,\n            nrObjectsRead: 0,\n            nrObjects: 0\n        };\n        bimServerAPI.setBinaryDataListener(o.topicId, binaryDataListener);\n        bimServerAPI.downloadViaWebsocket({\n            longActionId: o.topicId,\n            topicId: o.topicId\n        });\n    }\n\n    function binaryDataListener(data) {\n        todo.push(data);\n    }\n\n    function afterRegistration(topicId) {\n        bimServerAPI.call(\"Bimsie1NotificationRegistryInterface\", \"getProgress\", {\n            topicId: o.topicId\n        }, function (state) {\n            progressHandler(o.topicId, state);\n        });\n    }\n\n    function readStart(data) {\n        var start = data.readUTF8();\n        if (start !== \"BGS\") {\n            modelBuilder.error(\"data does not start with BGS (\" + start + \")\");\n            return false;\n        }\n        protocolVersion = data.readByte();\n        modelBuilder.log(\"BIMServer protocol version = \" + protocolVersion);\n        if (protocolVersion !== 10 && protocolVersion !== 11 && protocolVersion !== 16) {\n            modelBuilder.error(\"Unimplemented protocol version\");\n            return false;\n        }\n        if (protocolVersion > 15) {\n            o.multiplierToMm = data.readFloat();\n        }\n        data.align8();\n        var boundary = data.readDoubleArray(6);\n        modelBuilder.gotModelBoundary(boundary);\n        currentState.mode = 1;\n        progressListeners.forEach(function (progressListener) {\n            progressListener(\"start\", currentState.nrObjectsRead, currentState.nrObjectsRead);\n        });\n        updateProgress();\n    }\n\n    function readEnd(data) {\n        progressListeners.forEach(function (progressListener) {\n            progressListener(\"done\", currentState.nrObjectsRead, currentState.nrObjectsRead);\n        });\n        bimServerAPI.call(\"ServiceInterface\", \"cleanupLongAction\", {topicId: o.topicId}, function () {\n        });\n    }\n\n    function updateProgress() {\n    }\n\n    function readObject(stream, geometryType) {\n\n        //---------------------------------------------------------------------------------\n        // protocol version assumed to be 16\n        //---------------------------------------------------------------------------------\n\n        const color = new Float32Array([1, 1, 1, 1]);\n\n        if (geometryType === 1) {\n\n            //-----------------------------------------------------------------------------\n            // Geometry\n            //-----------------------------------------------------------------------------\n\n            let reused = stream.readInt();\n            let ifcType = stream.readUTF8();\n\n            stream.align8();\n\n            let roid = stream.readLong();\n            let croid = stream.readLong();\n            let hasTransparency = stream.readLong() === 1;\n\n            let geometryDataId = stream.readLong();\n            let numIndices = stream.readInt();\n            let indices = stream.readShortArray(numIndices);\n\n            stream.align4();\n\n            let b = stream.readInt();\n            let gotColor = (b === 1);\n\n            if (gotColor) {\n                color[0] = stream.readFloat();\n                color[1] = stream.readFloat();\n                color[2] = stream.readFloat();\n                color[3] = stream.readFloat();\n            }\n\n            let numPositions = stream.readInt();\n            let positions = stream.readFloatArray(numPositions);\n            let numNormals = stream.readInt();\n            let normals = stream.readFloatArray(numNormals);\n            let numColors = stream.readInt();\n\n            var colors = null;\n\n            if (numColors > 0) {\n\n                colors = stream.readFloatArray(numColors);\n\n                color[0] = colors[0];\n                color[1] = colors[0];\n                color[2] = colors[0];\n                color[3] = colors[0];\n\n            } else if (color !== null) {\n\n                // Creating vertex colors here anyways (not transmitted over the line is a plus), should find a way to do this with scenejs without vertex-colors\n\n                // colors = new Array(numPositions * 4);\n                //\n                // for (var i = 0; i < numPositions; i++) {\n                //     colors[i * 4] = color.r;\n                //     colors[i * 4 + 1] = color.g;\n                //     colors[i * 4 + 2] = color.b;\n                //     colors[i * 4 + 3] = color.a;\n                // }\n            }\n\n            modelBuilder.createGeometry(geometryDataId, positions, normals, indices, reused);\n\n            geometriesLoaded[geometryDataId] = true;\n\n            if (objectsWaitingForGeometryData[geometryDataId] !== null) {\n\n                // Object(s) waiting for this geometry\n\n                objectsWaitingForGeometryData[geometryDataId].forEach(function (oid) {\n                    modelBuilder.addGeometryToObject(oid, geometryDataId);\n                });\n\n                delete objectsWaitingForGeometryData[geometryDataId];\n            }\n\n        } else if (geometryType === 5) {\n\n            //-----------------------------------------------------------------------------\n            // Object\n            //-----------------------------------------------------------------------------\n\n            var oid = stream.readLong();\n            let ifcType = stream.readUTF8();\n\n            stream.align8();\n\n            let roid = stream.readLong();\n            let geometryInfoOid = stream.readLong();\n            let hasTransparency = stream.readLong() === 1;\n            let objectBounds = stream.readDoubleArray(6);\n            let matrix = stream.readDoubleArray(16);\n            let geometryDataId = stream.readLong();\n            let geometryDataOidFound = geometryDataId;\n            oid = infoToOid[geometryInfoOid];\n\n            if (oid === null) {\n                modelBuilder.error(\"Not found\", infoToOid, geometryInfoOid);\n                return;\n            }\n\n            let geometryLoaded = geometriesLoaded[geometryDataId];\n\n            modelBuilder.createObject(oid, geometryLoaded ? [geometryDataId] : [], ifcType, matrix);\n\n            if (!geometryLoaded) {\n\n                // Geometry not yet loaded for this object - save the object as waiting for this geometry\n\n                var list = objectsWaitingForGeometryData[geometryDataId];\n                if (!list) {\n                    list = [];\n                    objectsWaitingForGeometryData[geometryDataId] = list;\n                }\n                list.push(oid);\n            }\n        }\n\n        currentState.nrObjectsRead++;\n\n        updateProgress();\n    }\n}\n\nexport {BIMServerGeometryLoader};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/BIMServerGeometryLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "BIMServerGeometryLoader",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerGeometryLoader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerGeometryLoader.js~BIMServerGeometryLoader",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/BIMServerGeometryLoader.js",
    "importStyle": "{BIMServerGeometryLoader}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bimServerAPI",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bimServerModel",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "roid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "globalTransformationMatrix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelBuilder",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js",
    "content": "/**\n * @private\n */\nclass BIMServerModel {\n\n    constructor(bimServerAPI, apiModel) {\n        this.bimServerAPI = bimServerAPI;\n        this.apiModel = apiModel;\n        this.tree = null;\n        this.treePromise = null;\n    }\n\n    getTree(args) {\n\n        /*\n         // TODO: This is rather tricky. Never know when the list of Projects is exhausted.\n         // Luckily a valid IFC contains one and only one. Let's assume there is just one.\n         var projectEncountered = false;\n\n         this.model.getAllOfType(\"IfcProject\", false, function(project) {\n         if (projectEncountered) {\n         throw new Error(\"More than a single project encountered, bleh!\");\n         }\n         console.log('project', project);\n         });\n         */\n\n        var self = this;\n\n        return self.treePromise || (self.treePromise = new Promise(function (resolve, reject) {\n\n            if (self.tree) {\n                resolve(self.tree);\n            }\n\n            var query =\n                {\n                    defines: {\n                        Representation: {\n                            type: \"IfcProduct\",\n                            field: \"Representation\"\n                        },\n                        ContainsElementsDefine: {\n                            type: \"IfcSpatialStructureElement\",\n                            field: \"ContainsElements\",\n                            include: {\n                                type: \"IfcRelContainedInSpatialStructure\",\n                                field: \"RelatedElements\",\n                                includes: [\n                                    \"IsDecomposedByDefine\",\n                                    \"ContainsElementsDefine\",\n                                    \"Representation\"\n                                ]\n                            }\n                        },\n                        IsDecomposedByDefine: {\n                            type: \"IfcObjectDefinition\",\n                            field: \"IsDecomposedBy\",\n                            include: {\n                                type: \"IfcRelDecomposes\",\n                                field: \"RelatedObjects\",\n                                includes: [\n                                    \"IsDecomposedByDefine\",\n                                    \"ContainsElementsDefine\",\n                                    \"Representation\"\n                                ]\n                            }\n                        },\n                    },\n                    queries: [{\n                        type: \"IfcProject\",\n                        includes: [\n                            \"IsDecomposedByDefine\",\n                            \"ContainsElementsDefine\"\n                        ]\n                    }, {\n                        type: \"IfcRepresentation\",\n                        includeAllSubtypes: true\n                    }, {\n                        type: \"IfcProductRepresentation\"\n                    }, {\n                        type: \"IfcPresentationLayerWithStyle\"\n                    }, {\n                        type: \"IfcProduct\",\n                        includeAllSubtypes: true\n                    }, {\n                        type: \"IfcProductDefinitionShape\"\n                    }, {\n                        type: \"IfcPresentationLayerAssignment\"\n                    }, {\n                        type: \"IfcRelAssociatesClassification\",\n                        includes: [{\n                            type: \"IfcRelAssociatesClassification\",\n                            field: \"RelatedObjects\"\n                        }, {\n                            type: \"IfcRelAssociatesClassification\",\n                            field: \"RelatingClassification\"\n                        }]\n                    }, {\n                        type: \"IfcSIUnit\"\n                    }, {\n                        type: \"IfcPresentationLayerAssignment\"\n                    }]\n                };\n\n            // Perform the download\n            self.apiModel.query(query, function (o) {\n            }).done(function () {\n\n                // A list of entities that define parent-child relationships\n                var entities = {\n                    'IfcRelDecomposes': 1,\n                    'IfcRelAggregates': 1,\n                    'IfcRelContainedInSpatialStructure': 1,\n                    'IfcRelFillsElement': 1,\n                    'IfcRelVoidsElement': 1\n                };\n\n                // Create a mapping from id->instance\n                var instance_by_id = {};\n                var objects = [];\n\n                for (var e in self.apiModel.objects) {\n                    // The root node in a dojo store should have its parent\n                    // set to null, not just something that evaluates to false\n                    var o = self.apiModel.objects[e].object;\n                    o.parent = null;\n                    instance_by_id[o._i] = o;\n                    objects.push(o);\n                }\n\n                // Filter all instances based on relationship entities\n                var relationships = objects.filter(function (o) {\n                    return entities[o._t];\n                });\n\n                // Construct a tuple of {parent, child} ids\n                var parents = relationships.map(function (o) {\n                    var ks = Object.keys(o);\n                    var related = ks.filter(function (k) {\n                        return k.indexOf('Related') !== -1;\n                    });\n                    var relating = ks.filter(function (k) {\n                        return k.indexOf('Relating') !== -1;\n                    });\n                    return [o[relating[0]], o[related[0]]];\n                });\n\n                var is_array = function (o) {\n                    return Object.prototype.toString.call(o) === '[object Array]';\n                };\n\n                var data = [];\n                var visited = {};\n                parents.forEach(function (a) {\n                    // Relationships in IFC can be one to one/many\n                    var ps = is_array(a[0]) ? a[0] : [a[0]];\n                    var cs = is_array(a[1]) ? a[1] : [a[1]];\n                    for (var i = 0; i < ps.length; ++i) {\n                        for (var j = 0; j < cs.length; ++j) {\n                            // Lookup the instance ids in the mapping\n                            var p = instance_by_id[ps[i]._i];\n                            var c = instance_by_id[cs[j]._i];\n\n                            // parent, id, hasChildren are significant attributes in a dojo store\n                            c.parent = p.id = p._i;\n                            c.id = c._i;\n                            p.hasChildren = true;\n\n                            // Make sure to only add instances once\n                            if (!visited[c.id]) {\n                                data.push(c);\n                            }\n                            if (!visited[p.id]) {\n                                data.push(p);\n                            }\n                            visited[p.id] = visited[c.id] = true;\n                        }\n                    }\n                });\n\n                var make_element = function (o) {\n                    return {\n                        name: o.Name,\n                        id: o.id,\n                        guid: o.GlobalId,\n                        parent: o.parent,\n                        gid: (o._rgeometry == null ? null : o._rgeometry._i)\n                    };\n                };\n\n                var fold = (function () {\n                    var root = null;\n                    return function (li) {\n                        var by_oid = {};\n                        li.forEach(function (elem) {\n                            by_oid[elem.id] = elem;\n                        });\n                        li.forEach(function (elem) {\n                            if (elem.parent === null) {\n                                root = elem;\n                            } else {\n                                var p = by_oid[elem.parent];\n                                (p.children || (p.children = [])).push(elem);\n                            }\n                        });\n                        return root;\n                    }\n                })();\n\n                resolve(self.tree = fold(data.map(make_element)));\n            });\n        }));\n    };\n\n}\n\nexport {BIMServerModel}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "BIMServerModel",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js",
    "importStyle": "{BIMServerModel}",
    "description": "",
    "lineNumber": 4,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "bimServerAPI",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel#bimServerAPI",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "apiModel",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel#apiModel",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "tree",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel#tree",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "treePromise",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel#treePromise",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "getTree",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/BIMServerModel.js~BIMServerModel#getTree",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js",
    "content": "import {StringView} from \"./StringView.js\";\n\n/**\n * @private\n */\nclass DataInputStreamReader {\n\n    constructor(arrayBuffer) {\n        this.arrayBuffer = arrayBuffer;\n        this.dataView = new DataView(this.arrayBuffer);\n        this.pos = 0;\n    }\n\n    readUTF8() {\n        var length = this.dataView.getInt16(this.pos);\n        this.pos += 2;\n        var view = this.arrayBuffer.slice(this.pos, this.pos + length);\n        var result = new StringView(view).toString();\n        this.pos += length;\n        return result;\n    }\n\n    remaining() {\n        return this.arrayBuffer.byteLength - this.pos;\n    }\n\n    align4() {\n        // Skips to the next alignment of 4 (source should have done the same!)\n        var skip = 4 - (this.pos % 4);\n        if (skip > 0 && skip != 4) {\n            //\t\t\tconsole.log(\"Skip\", skip);\n            this.pos += skip;\n        }\n    }\n\n    align8() {\n        // Skips to the next alignment of 4 (source should have done the same!)\n        var skip = 8 - (this.pos % 8);\n        if (skip > 0 && skip != 8) {\n            //\t\t\tconsole.log(\"Skip\", skip);\n            this.pos += skip;\n        }\n    }\n\n    readDoubleArray(length) {\n        var result = new Float64Array(this.arrayBuffer, this.pos, length);\n        this.pos += length * 8;\n        return result;\n    }\n\n    readFloat() {\n        var value = this.dataView.getFloat32(this.pos, true);\n        this.pos += 4;\n        return value;\n    }\n\n    readInt() {\n        var value = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return value;\n    }\n\n    readByte() {\n        var value = this.dataView.getInt8(this.pos);\n        this.pos += 1;\n        return value;\n    }\n\n    readLong() {\n        var value = this.dataView.getUint32(this.pos, true) + 0x100000000 * this.dataView.getUint32(this.pos + 4, true);\n        this.pos += 8;\n        return value;\n    }\n\n    readFloatArray2(length) {\n        var results = [];\n        for (var i = 0; i < length; i++) {\n            var value = this.dataView.getFloat32(this.pos, true);\n            this.pos += 4;\n            results.push(value);\n        }\n        return results;\n    }\n\n    readFloatArray(length) {\n        var result = new Float32Array(this.arrayBuffer, this.pos, length);\n        this.pos += length * 4;\n        return result;\n    }\n\n    readIntArray2(length) {\n        var results = [];\n        for (var i = 0; i < length; i++) {\n            var value = this.dataView.getInt32(this.pos, true);\n            this.pos += 4;\n            results.push(value);\n        }\n        return results;\n    }\n\n    readIntArray(length) {\n        var result = new Int32Array(this.arrayBuffer, this.pos, length);\n        this.pos += length * 4;\n        return result;\n    }\n\n    readShortArray(length) {\n        try {\n            var result = new Int16Array(this.arrayBuffer, this.pos, length);\n            this.pos += length * 2;\n            return result;\n        } catch (e) {\n            debugger;\n        }\n    }\n}\n\nexport {DataInputStreamReader}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "DataInputStreamReader",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js",
    "importStyle": "{DataInputStreamReader}",
    "description": "",
    "lineNumber": 6,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "arrayBuffer",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#arrayBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "dataView",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#dataView",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "pos",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#pos",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "readUTF8",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readUTF8",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "remaining",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#remaining",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "align4",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#align4",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "align8",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#align8",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "readDoubleArray",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readDoubleArray",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "readFloat",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readFloat",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "readInt",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readInt",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "readByte",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readByte",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "readLong",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readLong",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "readFloatArray2",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readFloatArray2",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "readFloatArray",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readFloatArray",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "readIntArray2",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readIntArray2",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "readIntArray",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readIntArray",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "readShortArray",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/DataInputStreamReader.js~DataInputStreamReader#readShortArray",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "content": "/*\\\n |*|\n |*|  :: Number.isInteger() polyfill ::\n |*|\n |*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n |*|\n \\*/\n\nif (!Number.isInteger) {\n    Number.isInteger = function isInteger(nVal) {\n        return typeof nVal === \"number\" && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal;\n    };\n}\n\n/*\\\n |*|\n |*|  StringView - Mozilla Developer Network - revision #6\n |*|\n |*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/StringView\n |*|  https://developer.mozilla.org/User:fusionchess\n |*|\n |*|  This framework is released under the GNU Public License, version 3 or later.\n |*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html\n |*|\n \\*/\n\n/**\n * @private\n */\nfunction StringView(vInput, sEncoding /* optional (default: UTF-8) */, nOffset /* optional */, nLength /* optional */) {\n\n    var fTAView, aWhole, aRaw, fPutOutptCode, fGetOutptChrSize, nInptLen, nStartIdx = isFinite(nOffset) ? nOffset : 0,\n        nTranscrType = 15;\n\n    if (sEncoding) {\n        this.encoding = sEncoding.toString();\n    }\n\n    encSwitch: switch (this.encoding) {\n        case \"UTF-8\":\n            fPutOutptCode = StringView.putUTF8CharCode;\n            fGetOutptChrSize = StringView.getUTF8CharLength;\n            fTAView = Uint8Array;\n            break encSwitch;\n        case \"UTF-16\":\n            fPutOutptCode = StringView.putUTF16CharCode;\n            fGetOutptChrSize = StringView.getUTF16CharLength;\n            fTAView = Uint16Array;\n            break encSwitch;\n        case \"UTF-32\":\n            fTAView = Uint32Array;\n            nTranscrType &= 14;\n            break encSwitch;\n        default:\n            /* case \"ASCII\", or case \"BinaryString\" or unknown cases */\n            fTAView = Uint8Array;\n            nTranscrType &= 14;\n    }\n\n    typeSwitch: switch (typeof vInput) {\n        case \"string\":\n            /* the input argument is a primitive string: a new buffer will be created. */\n            nTranscrType &= 7;\n            break typeSwitch;\n        case \"object\":\n            classSwitch: switch (vInput.constructor) {\n                case StringView:\n                    /* the input argument is a stringView: a new buffer will be created. */\n                    nTranscrType &= 3;\n                    break typeSwitch;\n                case String:\n                    /* the input argument is an objectified string: a new buffer will be created. */\n                    nTranscrType &= 7;\n                    break typeSwitch;\n                case ArrayBuffer:\n                    /* the input argument is an arrayBuffer: the buffer will be shared. */\n                    aWhole = new fTAView(vInput);\n                    nInptLen = this.encoding === \"UTF-32\" ?\n                        vInput.byteLength >>> 2\n                        : this.encoding === \"UTF-16\" ?\n                            vInput.byteLength >>> 1\n                            :\n                            vInput.byteLength;\n                    aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?\n                        aWhole\n                        : new fTAView(vInput, nStartIdx, !isFinite(nLength) ? nInptLen - nStartIdx : nLength);\n\n                    break typeSwitch;\n                case Uint32Array:\n                case Uint16Array:\n                case Uint8Array:\n                    /* the input argument is a typedArray: the buffer, and possibly the array itself, will be shared. */\n                    fTAView = vInput.constructor;\n                    nInptLen = vInput.length;\n                    aWhole = vInput.byteOffset === 0 && vInput.length === (\n                        fTAView === Uint32Array ?\n                            vInput.buffer.byteLength >>> 2\n                            : fTAView === Uint16Array ?\n                            vInput.buffer.byteLength >>> 1\n                            :\n                            vInput.buffer.byteLength\n                    ) ? vInput : new fTAView(vInput.buffer);\n                    aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?\n                        vInput\n                        : vInput.subarray(nStartIdx, isFinite(nLength) ? nStartIdx + nLength : nInptLen);\n\n                    break typeSwitch;\n                default:\n                    /* the input argument is an array or another serializable object: a new typedArray will be created. */\n                    aWhole = new fTAView(vInput);\n                    nInptLen = aWhole.length;\n                    aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?\n                        aWhole\n                        : aWhole.subarray(nStartIdx, isFinite(nLength) ? nStartIdx + nLength : nInptLen);\n            }\n            break typeSwitch;\n        default:\n            /* the input argument is a number, a boolean or a function: a new typedArray will be created. */\n            aWhole = aRaw = new fTAView(Number(vInput) || 0);\n\n    }\n\n    if (nTranscrType < 8) {\n\n        var vSource, nOutptLen, nCharStart, nCharEnd, nEndIdx, fGetInptChrSize, fGetInptChrCode;\n\n        if (nTranscrType & 4) { /* input is string */\n\n            vSource = vInput;\n            nOutptLen = nInptLen = vSource.length;\n            nTranscrType ^= this.encoding === \"UTF-32\" ? 0 : 2;\n            /* ...or...: nTranscrType ^= Number(this.encoding !== \"UTF-32\") << 1; */\n            nStartIdx = nCharStart = nOffset ? Math.max((nOutptLen + nOffset) % nOutptLen, 0) : 0;\n            nEndIdx = nCharEnd = (Number.isInteger(nLength) ? Math.min(Math.max(nLength, 0) + nStartIdx, nOutptLen) : nOutptLen) - 1;\n\n        } else { /* input is stringView */\n\n            vSource = vInput.rawData;\n            nInptLen = vInput.makeIndex();\n            nStartIdx = nCharStart = nOffset ? Math.max((nInptLen + nOffset) % nInptLen, 0) : 0;\n            nOutptLen = Number.isInteger(nLength) ? Math.min(Math.max(nLength, 0), nInptLen - nCharStart) : nInptLen;\n            nEndIdx = nCharEnd = nOutptLen + nCharStart;\n\n            if (vInput.encoding === \"UTF-8\") {\n                fGetInptChrSize = StringView.getUTF8CharLength;\n                fGetInptChrCode = StringView.loadUTF8CharCode;\n            } else if (vInput.encoding === \"UTF-16\") {\n                fGetInptChrSize = StringView.getUTF16CharLength;\n                fGetInptChrCode = StringView.loadUTF16CharCode;\n            } else {\n                nTranscrType &= 1;\n            }\n\n        }\n\n        if (nOutptLen === 0 || nTranscrType < 4 && vSource.encoding === this.encoding && nCharStart === 0 && nOutptLen === nInptLen) {\n\n            /* the encoding is the same, the length too and the offset is 0... or the input is empty! */\n\n            nTranscrType = 7;\n\n        }\n\n        conversionSwitch: switch (nTranscrType) {\n\n            case 0:\n\n                /* both the source and the new StringView have a fixed-length encoding... */\n\n                aWhole = new fTAView(nOutptLen);\n                for (var nOutptIdx = 0; nOutptIdx < nOutptLen; aWhole[nOutptIdx] = vSource[nStartIdx + nOutptIdx++]) ;\n                break conversionSwitch;\n\n            case 1:\n\n                /* the source has a fixed-length encoding but the new StringView has a variable-length encoding... */\n\n                /* mapping... */\n\n                nOutptLen = 0;\n\n                for (var nInptIdx = nStartIdx; nInptIdx < nEndIdx; nInptIdx++) {\n                    nOutptLen += fGetOutptChrSize(vSource[nInptIdx]);\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription of the source... */\n\n                for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx++) {\n                    nOutptIdx = fPutOutptCode(aWhole, vSource[nInptIdx], nOutptIdx);\n                }\n\n                break conversionSwitch;\n\n            case 2:\n\n                /* the source has a variable-length encoding but the new StringView has a fixed-length encoding... */\n\n                /* mapping... */\n\n                nStartIdx = 0;\n\n                var nChrCode;\n\n                for (nChrIdx = 0; nChrIdx < nCharStart; nChrIdx++) {\n                    nChrCode = fGetInptChrCode(vSource, nStartIdx);\n                    nStartIdx += fGetInptChrSize(nChrCode);\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription of the source... */\n\n                for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx += fGetInptChrSize(nChrCode), nOutptIdx++) {\n                    nChrCode = fGetInptChrCode(vSource, nInptIdx);\n                    aWhole[nOutptIdx] = nChrCode;\n                }\n\n                break conversionSwitch;\n\n            case 3:\n\n                /* both the source and the new StringView have a variable-length encoding... */\n\n                /* mapping... */\n\n                nOutptLen = 0;\n\n                var nChrCode;\n\n                for (var nChrIdx = 0, nInptIdx = 0; nChrIdx < nCharEnd; nInptIdx += fGetInptChrSize(nChrCode)) {\n                    nChrCode = fGetInptChrCode(vSource, nInptIdx);\n                    if (nChrIdx === nCharStart) {\n                        nStartIdx = nInptIdx;\n                    }\n                    if (++nChrIdx > nCharStart) {\n                        nOutptLen += fGetOutptChrSize(nChrCode);\n                    }\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx += fGetInptChrSize(nChrCode)) {\n                    nChrCode = fGetInptChrCode(vSource, nInptIdx);\n                    nOutptIdx = fPutOutptCode(aWhole, nChrCode, nOutptIdx);\n                }\n\n                break conversionSwitch;\n\n            case 4:\n\n                /* DOMString to ASCII or BinaryString or other unknown encodings */\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nIdx = 0; nIdx < nOutptLen; nIdx++) {\n                    aWhole[nIdx] = vSource.charCodeAt(nIdx) & 0xff;\n                }\n\n                break conversionSwitch;\n\n            case 5:\n\n                /* DOMString to UTF-8 or to UTF-16 */\n\n                /* mapping... */\n\n                nOutptLen = 0;\n\n                for (var nMapIdx = 0; nMapIdx < nInptLen; nMapIdx++) {\n                    if (nMapIdx === nCharStart) {\n                        nStartIdx = nOutptLen;\n                    }\n                    nOutptLen += fGetOutptChrSize(vSource.charCodeAt(nMapIdx));\n                    if (nMapIdx === nCharEnd) {\n                        nEndIdx = nOutptLen;\n                    }\n                }\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nOutptIdx = 0, nChrIdx = 0; nOutptIdx < nOutptLen; nChrIdx++) {\n                    nOutptIdx = fPutOutptCode(aWhole, vSource.charCodeAt(nChrIdx), nOutptIdx);\n                }\n\n                break conversionSwitch;\n\n            case 6:\n\n                /* DOMString to UTF-32 */\n\n                aWhole = new fTAView(nOutptLen);\n\n                /* transcription... */\n\n                for (var nIdx = 0; nIdx < nOutptLen; nIdx++) {\n                    aWhole[nIdx] = vSource.charCodeAt(nIdx);\n                }\n\n                break conversionSwitch;\n\n            case 7:\n\n                aWhole = new fTAView(nOutptLen ? vSource : 0);\n                break conversionSwitch;\n\n        }\n\n        aRaw = nTranscrType > 3 && (nStartIdx > 0 || nEndIdx < aWhole.length - 1) ? aWhole.subarray(nStartIdx, nEndIdx) : aWhole;\n\n    }\n\n    this.buffer = aWhole.buffer;\n    this.bufferView = aWhole;\n    this.rawData = aRaw;\n\n    Object.freeze(this);\n\n}\n\n/* CONSTRUCTOR'S METHODS */\n\nStringView.loadUTF8CharCode = function (aChars, nIdx) {\n\n    var nLen = aChars.length, nPart = aChars[nIdx];\n\n    return nPart > 251 && nPart < 254 && nIdx + 5 < nLen ?\n        /* (nPart - 252 << 32) is not possible in ECMAScript! So...: */\n        /* six bytes */ (nPart - 252) * 1073741824 + (aChars[nIdx + 1] - 128 << 24) + (aChars[nIdx + 2] - 128 << 18) + (aChars[nIdx + 3] - 128 << 12) + (aChars[nIdx + 4] - 128 << 6) + aChars[nIdx + 5] - 128\n        : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ?\n            /* five bytes */ (nPart - 248 << 24) + (aChars[nIdx + 1] - 128 << 18) + (aChars[nIdx + 2] - 128 << 12) + (aChars[nIdx + 3] - 128 << 6) + aChars[nIdx + 4] - 128\n            : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ?\n                /* four bytes */(nPart - 240 << 18) + (aChars[nIdx + 1] - 128 << 12) + (aChars[nIdx + 2] - 128 << 6) + aChars[nIdx + 3] - 128\n                : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ?\n                    /* three bytes */ (nPart - 224 << 12) + (aChars[nIdx + 1] - 128 << 6) + aChars[nIdx + 2] - 128\n                    : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ?\n                        /* two bytes */ (nPart - 192 << 6) + aChars[nIdx + 1] - 128\n                        :\n                        /* one byte */ nPart;\n\n};\n\nStringView.putUTF8CharCode = function (aTarget, nChar, nPutAt) {\n\n    var nIdx = nPutAt;\n\n    if (nChar < 0x80 /* 128 */) {\n        /* one byte */\n        aTarget[nIdx++] = nChar;\n    } else if (nChar < 0x800 /* 2048 */) {\n        /* two bytes */\n        aTarget[nIdx++] = 0xc0 /* 192 */ + (nChar >>> 6);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else if (nChar < 0x10000 /* 65536 */) {\n        /* three bytes */\n        aTarget[nIdx++] = 0xe0 /* 224 */ + (nChar >>> 12);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else if (nChar < 0x200000 /* 2097152 */) {\n        /* four bytes */\n        aTarget[nIdx++] = 0xf0 /* 240 */ + (nChar >>> 18);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else if (nChar < 0x4000000 /* 67108864 */) {\n        /* five bytes */\n        aTarget[nIdx++] = 0xf8 /* 248 */ + (nChar >>> 24);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 18) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    } else /* if (nChar <= 0x7fffffff) */ { /* 2147483647 */\n        /* six bytes */\n        aTarget[nIdx++] = 0xfc /* 252 */ + /* (nChar >>> 32) is not possible in ECMAScript! So...: */ (nChar / 1073741824);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 24) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 18) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);\n        aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);\n    }\n\n    return nIdx;\n\n};\n\nStringView.getUTF8CharLength = function (nChar) {\n    return nChar < 0x80 ? 1 : nChar < 0x800 ? 2 : nChar < 0x10000 ? 3 : nChar < 0x200000 ? 4 : nChar < 0x4000000 ? 5 : 6;\n};\n\nStringView.loadUTF16CharCode = function (aChars, nIdx) {\n\n    /* UTF-16 to DOMString decoding algorithm */\n    var nFrstChr = aChars[nIdx];\n\n    return nFrstChr > 0xD7BF /* 55231 */ && nIdx + 1 < aChars.length ?\n        (nFrstChr - 0xD800 /* 55296 */ << 10) + aChars[nIdx + 1] + 0x2400 /* 9216 */\n        : nFrstChr;\n\n};\n\nStringView.putUTF16CharCode = function (aTarget, nChar, nPutAt) {\n\n    var nIdx = nPutAt;\n\n    if (nChar < 0x10000 /* 65536 */) {\n        /* one element */\n        aTarget[nIdx++] = nChar;\n    } else {\n        /* two elements */\n        aTarget[nIdx++] = 0xD7C0 /* 55232 */ + (nChar >>> 10);\n        aTarget[nIdx++] = 0xDC00 /* 56320 */ + (nChar & 0x3FF /* 1023 */);\n    }\n\n    return nIdx;\n\n};\n\nStringView.getUTF16CharLength = function (nChar) {\n    return nChar < 0x10000 ? 1 : 2;\n};\n\n/* Array of bytes to base64 string decoding */\n\nStringView.b64ToUint6 = function (nChr) {\n\n    return nChr > 64 && nChr < 91 ?\n        nChr - 65\n        : nChr > 96 && nChr < 123 ?\n            nChr - 71\n            : nChr > 47 && nChr < 58 ?\n                nChr + 4\n                : nChr === 43 ?\n                    62\n                    : nChr === 47 ?\n                        63\n                        :\n                        0;\n\n};\n\nStringView.uint6ToB64 = function (nUint6) {\n\n    return nUint6 < 26 ?\n        nUint6 + 65\n        : nUint6 < 52 ?\n            nUint6 + 71\n            : nUint6 < 62 ?\n                nUint6 - 4\n                : nUint6 === 62 ?\n                    43\n                    : nUint6 === 63 ?\n                        47\n                        :\n                        65;\n\n};\n\n/* Base64 string to array encoding */\n\nStringView.bytesToBase64 = function (aBytes) {\n\n    var sB64Enc = \"\";\n\n    for (var nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n        nMod3 = nIdx % 3;\n        if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) {\n            sB64Enc += \"\\r\\n\";\n        }\n        nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\n        if (nMod3 === 2 || aBytes.length - nIdx === 1) {\n            sB64Enc += String.fromCharCode(StringView.uint6ToB64(nUint24 >>> 18 & 63), StringView.uint6ToB64(nUint24 >>> 12 & 63), StringView.uint6ToB64(nUint24 >>> 6 & 63), StringView.uint6ToB64(nUint24 & 63));\n            nUint24 = 0;\n        }\n    }\n\n    return sB64Enc.replace(/A(?=A$|$)/g, \"=\");\n\n};\n\n\nStringView.base64ToBytes = function (sBase64, nBlockBytes) {\n\n    var\n        sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"), nInLen = sB64Enc.length,\n        nOutLen = nBlockBytes ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockBytes) * nBlockBytes : nInLen * 3 + 1 >>> 2,\n        aBytes = new Uint8Array(nOutLen);\n\n    for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n        nMod4 = nInIdx & 3;\n        nUint24 |= StringView.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n        if (nMod4 === 3 || nInLen - nInIdx === 1) {\n            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n                aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n            }\n            nUint24 = 0;\n        }\n    }\n\n    return aBytes;\n\n};\n\nStringView.makeFromBase64 = function (sB64Inpt, sEncoding, nByteOffset, nLength) {\n\n    return new StringView(sEncoding === \"UTF-16\" || sEncoding === \"UTF-32\" ? StringView.base64ToBytes(sB64Inpt, sEncoding === \"UTF-16\" ? 2 : 4).buffer : StringView.base64ToBytes(sB64Inpt), sEncoding, nByteOffset, nLength);\n\n};\n\n/* DEFAULT VALUES */\n\nStringView.prototype.encoding = \"UTF-8\";\n/* Default encoding... */\n\n/* INSTANCES' METHODS */\n\nStringView.prototype.makeIndex = function (nChrLength, nStartFrom) {\n\n    var\n\n        aTarget = this.rawData, nChrEnd, nRawLength = aTarget.length,\n        nStartIdx = nStartFrom || 0, nIdxEnd = nStartIdx, nStopAtChr = isNaN(nChrLength) ? Infinity : nChrLength;\n\n    if (nChrLength + 1 > aTarget.length) {\n        throw new RangeError(\"StringView.prototype.makeIndex - The offset can\\'t be major than the length of the array - 1.\");\n    }\n\n    switch (this.encoding) {\n\n        case \"UTF-8\":\n\n            var nPart;\n\n            for (nChrEnd = 0; nIdxEnd < nRawLength && nChrEnd < nStopAtChr; nChrEnd++) {\n                nPart = aTarget[nIdxEnd];\n                nIdxEnd += nPart > 251 && nPart < 254 && nIdxEnd + 5 < nRawLength ? 6\n                    : nPart > 247 && nPart < 252 && nIdxEnd + 4 < nRawLength ? 5\n                        : nPart > 239 && nPart < 248 && nIdxEnd + 3 < nRawLength ? 4\n                            : nPart > 223 && nPart < 240 && nIdxEnd + 2 < nRawLength ? 3\n                                : nPart > 191 && nPart < 224 && nIdxEnd + 1 < nRawLength ? 2\n                                    : 1;\n            }\n\n            break;\n\n        case \"UTF-16\":\n\n            for (nChrEnd = nStartIdx; nIdxEnd < nRawLength && nChrEnd < nStopAtChr; nChrEnd++) {\n                nIdxEnd += aTarget[nIdxEnd] > 0xD7BF /* 55231 */ && nIdxEnd + 1 < aTarget.length ? 2 : 1;\n            }\n\n            break;\n\n        default:\n\n            nIdxEnd = nChrEnd = isFinite(nChrLength) ? nChrLength : nRawLength - 1;\n\n    }\n\n    if (nChrLength) {\n        return nIdxEnd;\n    }\n\n    return nChrEnd;\n\n};\n\nStringView.prototype.toBase64 = function (bWholeBuffer) {\n\n    return StringView.bytesToBase64(\n        bWholeBuffer ?\n            (\n                this.bufferView.constructor === Uint8Array ?\n                    this.bufferView\n                    :\n                    new Uint8Array(this.buffer)\n            )\n            : this.rawData.constructor === Uint8Array ?\n            this.rawData\n            :\n            new Uint8Array(this.buffer, this.rawData.byteOffset, this.rawData.length << (this.rawData.constructor === Uint16Array ? 1 : 2))\n    );\n\n};\n\nStringView.prototype.subview = function (nCharOffset /* optional */, nCharLength /* optional */) {\n\n    var\n\n        nChrLen, nCharStart, nStrLen, bVariableLen = this.encoding === \"UTF-8\" || this.encoding === \"UTF-16\",\n        nStartOffset = nCharOffset, nStringLength, nRawLen = this.rawData.length;\n\n    if (nRawLen === 0) {\n        return new StringView(this.buffer, this.encoding);\n    }\n\n    nStringLength = bVariableLen ? this.makeIndex() : nRawLen;\n    nCharStart = nCharOffset ? Math.max((nStringLength + nCharOffset) % nStringLength, 0) : 0;\n    nStrLen = Number.isInteger(nCharLength) ? Math.max(nCharLength, 0) + nCharStart > nStringLength ? nStringLength - nCharStart : nCharLength : nStringLength;\n\n    if (nCharStart === 0 && nStrLen === nStringLength) {\n        return this;\n    }\n\n    if (bVariableLen) {\n        nStartOffset = this.makeIndex(nCharStart);\n        nChrLen = this.makeIndex(nStrLen, nStartOffset) - nStartOffset;\n    } else {\n        nStartOffset = nCharStart;\n        nChrLen = nStrLen - nCharStart;\n    }\n\n    if (this.encoding === \"UTF-16\") {\n        nStartOffset <<= 1;\n    } else if (this.encoding === \"UTF-32\") {\n        nStartOffset <<= 2;\n    }\n\n    return new StringView(this.buffer, this.encoding, nStartOffset, nChrLen);\n\n};\n\nStringView.prototype.forEachChar = function (fCallback, oThat, nChrOffset, nChrLen) {\n\n    var aSource = this.rawData, nRawEnd, nRawIdx;\n\n    if (this.encoding === \"UTF-8\" || this.encoding === \"UTF-16\") {\n\n        var fGetInptChrSize, fGetInptChrCode;\n\n        if (this.encoding === \"UTF-8\") {\n            fGetInptChrSize = StringView.getUTF8CharLength;\n            fGetInptChrCode = StringView.loadUTF8CharCode;\n        } else if (this.encoding === \"UTF-16\") {\n            fGetInptChrSize = StringView.getUTF16CharLength;\n            fGetInptChrCode = StringView.loadUTF16CharCode;\n        }\n\n        nRawIdx = isFinite(nChrOffset) ? this.makeIndex(nChrOffset) : 0;\n        nRawEnd = isFinite(nChrLen) ? this.makeIndex(nChrLen, nRawIdx) : aSource.length;\n\n        for (var nChrCode, nChrIdx = 0; nRawIdx < nRawEnd; nChrIdx++) {\n            nChrCode = fGetInptChrCode(aSource, nRawIdx);\n            fCallback.call(oThat || null, nChrCode, nChrIdx, nRawIdx, aSource);\n            nRawIdx += fGetInptChrSize(nChrCode);\n        }\n\n    } else {\n\n        nRawIdx = isFinite(nChrOffset) ? nChrOffset : 0;\n        nRawEnd = isFinite(nChrLen) ? nChrLen + nRawIdx : aSource.length;\n\n        for (nRawIdx; nRawIdx < nRawEnd; nRawIdx++) {\n            fCallback.call(oThat || null, aSource[nRawIdx], nRawIdx, nRawIdx, aSource);\n        }\n\n    }\n\n};\n\nStringView.prototype.valueOf = StringView.prototype.toString = function () {\n\n    if (this.encoding !== \"UTF-8\" && this.encoding !== \"UTF-16\") {\n        /* ASCII, UTF-32 or BinaryString to DOMString */\n        return String.fromCharCode.apply(null, this.rawData);\n    }\n\n    var fGetCode, fGetIncr, sView = \"\";\n\n    if (this.encoding === \"UTF-8\") {\n        fGetIncr = StringView.getUTF8CharLength;\n        fGetCode = StringView.loadUTF8CharCode;\n    } else if (this.encoding === \"UTF-16\") {\n        fGetIncr = StringView.getUTF16CharLength;\n        fGetCode = StringView.loadUTF16CharCode;\n    }\n\n    for (var nChr, nLen = this.rawData.length, nIdx = 0; nIdx < nLen; nIdx += fGetIncr(nChr)) {\n        nChr = fGetCode(this.rawData, nIdx);\n        sView += String.fromCharCode(nChr);\n    }\n\n    return sView;\n\n};\n\nexport {StringView};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "loadUTF8CharCode",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~loadUTF8CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "params": [
      {
        "name": "aChars",
        "types": [
          "*"
        ]
      },
      {
        "name": "nIdx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "putUTF8CharCode",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~putUTF8CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "params": [
      {
        "name": "aTarget",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      },
      {
        "name": "nPutAt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "getUTF8CharLength",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~getUTF8CharLength",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 393,
    "undocument": true,
    "params": [
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "loadUTF16CharCode",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~loadUTF16CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "params": [
      {
        "name": "aChars",
        "types": [
          "*"
        ]
      },
      {
        "name": "nIdx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "putUTF16CharCode",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~putUTF16CharCode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "params": [
      {
        "name": "aTarget",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      },
      {
        "name": "nPutAt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "getUTF16CharLength",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~getUTF16CharLength",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 425,
    "undocument": true,
    "params": [
      {
        "name": "nChar",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "b64ToUint6",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~b64ToUint6",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "params": [
      {
        "name": "nChr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "uint6ToB64",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~uint6ToB64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 448,
    "undocument": true,
    "params": [
      {
        "name": "nUint6",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "bytesToBase64",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~bytesToBase64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 467,
    "undocument": true,
    "params": [
      {
        "name": "aBytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "base64ToBytes",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~base64ToBytes",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "params": [
      {
        "name": "sBase64",
        "types": [
          "*"
        ]
      },
      {
        "name": "nBlockBytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "makeFromBase64",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~makeFromBase64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "params": [
      {
        "name": "sB64Inpt",
        "types": [
          "*"
        ]
      },
      {
        "name": "sEncoding",
        "types": [
          "*"
        ]
      },
      {
        "name": "nByteOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "function",
    "name": "makeIndex",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~makeIndex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "params": [
      {
        "name": "nChrLength",
        "types": [
          "*"
        ]
      },
      {
        "name": "nStartFrom",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "toBase64",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~toBase64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 574,
    "undocument": true,
    "params": [
      {
        "name": "bWholeBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "subview",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~subview",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "params": [
      {
        "name": "nCharOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nCharLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "forEachChar",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~forEachChar",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 629,
    "undocument": true,
    "params": [
      {
        "name": "fCallback",
        "types": [
          "*"
        ]
      },
      {
        "name": "oThat",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChrOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nChrLen",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "StringView",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/StringView.js~StringView",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/StringView.js",
    "importStyle": "{StringView}",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "params": [
      {
        "name": "vInput",
        "types": [
          "*"
        ]
      },
      {
        "name": "sEncoding",
        "types": [
          "*"
        ]
      },
      {
        "name": "nOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "nLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/defaultMaterials.js",
    "content": "/**\n * @private\n */\nconst defaultMaterials = {\n    IfcSpace: [0.137255, 0.403922, 0.870588, 0.5],\n    IfcRoof: [0.837255, 0.203922, 0.270588, 1.0],\n    IfcSlab: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcWall: [0.537255, 0.337255, 0.237255, 1.0],\n    IfcWallStandardCase: [0.537255, 0.337255, 0.237255, 1.0],\n    IfcDoor: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcWindow: [0.137255, 0.403922, 0.870588, 0.5],\n    IfcOpeningElement: [0.137255, 0.403922, 0.870588, 0],\n    IfcRailing: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcColumn: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcBeam: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcFurnishingElement: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcCurtainWall: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcStair: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcStairFlight: [0.637255, 0.603922, 0.670588, 1.0],\n    IfcBuildingElementProxy: [0.5, 0.5, 0.5, 1.0],\n    IfcFlowSegment: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcFlowitting: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcFlowTerminal: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcProxy: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcSite: [0.137255, 0.403922, 0.870588, 1.0],\n    IfcLightFixture: [0.8470588235, 0.8470588235, 0.870588, 1.0],\n    IfcDuctSegment: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcDistributionFlowElement: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcDuctFitting: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcPlate: [0.8470588235, 0.427450980392, 0, 0.5],\n    IfcAirTerminal: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcMember: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcCovering: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcTransportElement: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFlowController: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFlowFitting: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcRamp: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFurniture: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcFooting: [0.8470588235, 0.427450980392, 0, 1.0],\n    IfcSystemFurnitureElement: [0.8470588235, 0.427450980392, 0, 1.0],\n    //IfcSpace: [ 0.137255, 0.303922,  0.570588,  0.5],\n    DEFAULT: [0.5, 0.5, 0.5, 1.0]\n};\n\nexport {defaultMaterials}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/defaultMaterials.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "defaultMaterials",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/defaultMaterials.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/defaultMaterials.js~defaultMaterials",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/defaultMaterials.js",
    "importStyle": "{defaultMaterials}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "{\"IfcSpace\": *, \"IfcRoof\": *, \"IfcSlab\": *, \"IfcWall\": *, \"IfcWallStandardCase\": *, \"IfcDoor\": *, \"IfcWindow\": *, \"IfcOpeningElement\": *, \"IfcRailing\": *, \"IfcColumn\": *, \"IfcBeam\": *, \"IfcFurnishingElement\": *, \"IfcCurtainWall\": *, \"IfcStair\": *, \"IfcStairFlight\": *, \"IfcBuildingElementProxy\": *, \"IfcFlowSegment\": *, \"IfcFlowitting\": *, \"IfcFlowTerminal\": *, \"IfcProxy\": *, \"IfcSite\": *, \"IfcLightFixture\": *, \"IfcDuctSegment\": *, \"IfcDistributionFlowElement\": *, \"IfcDuctFitting\": *, \"IfcPlate\": *, \"IfcAirTerminal\": *, \"IfcMember\": *, \"IfcCovering\": *, \"IfcTransportElement\": *, \"IfcFlowController\": *, \"IfcFlowFitting\": *, \"IfcRamp\": *, \"IfcFurniture\": *, \"IfcFooting\": *, \"IfcSystemFurnitureElement\": *, \"DEFAULT\": *}"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/preloadQuery.js",
    "content": "/**\n * @private\n */\nconst preloadQuery = {\n    defines: {\n        Representation: {\n            type: \"IfcProduct\",\n            fields: [\"Representation\", \"geometry\"]\n        },\n        ContainsElementsDefine: {\n            type: \"IfcSpatialStructureElement\",\n            field: \"ContainsElements\",\n            include: {\n                type: \"IfcRelContainedInSpatialStructure\",\n                field: \"RelatedElements\",\n                includes: [\n                    \"IsDecomposedByDefine\",\n                    \"ContainsElementsDefine\",\n                    \"Representation\"\n                ]\n            }\n        },\n        IsDecomposedByDefine: {\n            type: \"IfcObjectDefinition\",\n            field: \"IsDecomposedBy\",\n            include: {\n                type: \"IfcRelDecomposes\",\n                field: \"RelatedObjects\",\n                includes: [\n                    \"IsDecomposedByDefine\",\n                    \"ContainsElementsDefine\",\n                    \"Representation\"\n                ]\n            }\n        }\n    },\n    queries: [\n        {\n            type: \"IfcProject\",\n            includes: [\n                \"IsDecomposedByDefine\",\n                \"ContainsElementsDefine\"\n            ]\n        },\n        {\n            type: \"IfcRepresentation\",\n            includeAllSubtypes: true\n        },\n        {\n            type: \"IfcProductRepresentation\"\n        },\n        {\n            type: \"IfcPresentationLayerWithStyle\"\n        },\n        {\n            type: \"IfcProduct\",\n            includeAllSubtypes: true\n        },\n        {\n            type: \"IfcProductDefinitionShape\"\n        },\n        {\n            type: \"IfcPresentationLayerAssignment\"\n        },\n        {\n            type: \"IfcRelAssociatesClassification\",\n            includes: [\n                {\n                    type: \"IfcRelAssociatesClassification\",\n                    field: \"RelatedObjects\"\n                },\n                {\n                    type: \"IfcRelAssociatesClassification\",\n                    field: \"RelatingClassification\"\n                }\n            ]\n        },\n        {\n            type: \"IfcSIUnit\"\n        },\n        {\n            type: \"IfcPresentationLayerAssignment\"\n        }\n    ]\n};\n\n\nexport {preloadQuery};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/preloadQuery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "preloadQuery",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/preloadQuery.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/preloadQuery.js~preloadQuery",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/preloadQuery.js",
    "importStyle": "{preloadQuery}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "{\"defines\": *, \"queries\": *}"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "content": "var guidChars = [[\"0\", 10], [\"A\", 26], [\"a\", 26], [\"_\", 1], [\"$\", 1]].map(function (a) {\n    var li = [];\n    var st = a[0].charCodeAt(0);\n    var en = st + a[1];\n    for (var i = st; i < en; ++i) {\n        li.push(i);\n    }\n    return String.fromCharCode.apply(null, li);\n}).join(\"\");\n\nvar b64 = function (v, len) {\n    var r = (!len || len == 4) ? [0, 6, 12, 18] : [0, 6];\n    return r.map(function (i) {\n        return guidChars.substr(parseInt(v / (1 << i)) % 64, 1)\n    }).reverse().join(\"\");\n};\n\n/**\n * @private\n */\nconst utils = {\n\n    XmlToJson: function (node, attributeRenamer) {\n        if (node.nodeType === node.TEXT_NODE) {\n            var v = node.nodeValue;\n            if (v.match(/^\\s+$/) === null) {\n                return v;\n            }\n        } else if (node.nodeType === node.ELEMENT_NODE ||\n            node.nodeType === node.DOCUMENT_NODE) {\n            var json = {type: node.nodeName, children: []};\n\n            if (node.nodeType === node.ELEMENT_NODE) {\n                for (var j = 0; j < node.attributes.length; j++) {\n                    var attribute = node.attributes[j];\n                    var nm = attributeRenamer[attribute.nodeName] || attribute.nodeName;\n                    json[nm] = attribute.nodeValue;\n                }\n            }\n\n            for (var i = 0; i < node.childNodes.length; i++) {\n                var item = node.childNodes[i];\n                var j = xmlToJson(item, attributeRenamer);\n                if (j) json.children.push(j);\n            }\n\n            return json;\n        }\n    },\n\n    Clone: function (ob) {\n        return JSON.parse(JSON.stringify(ob));\n    },\n\n    CompressGuid: function (g) {\n        var bs = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30].map(function (i) {\n            return parseInt(g.substr(i, 2), 16);\n        });\n        return b64(bs[0], 2) + [1, 4, 7, 10, 13].map(function (i) {\n            return b64((bs[i] << 16) + (bs[i + 1] << 8) + bs[i + 2]);\n        }).join(\"\");\n    },\n\n    FindNodeOfType: function (m, t) {\n        var li = [];\n        var _ = function (n) {\n            if (n.type === t) li.push(n);\n            (n.children || []).forEach(function (c) {\n                _(c);\n            });\n        };\n        _(m);\n        return li;\n    },\n\n    Delay: function (dt) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(resolve, dt);\n        });\n    }\n};\n\n\nexport {utils};\n\n// return {\n//     'XmlToJson': xmlToJson,\n//     'Clone': clone,\n//     'CompressGuid': compressGuid,\n//     'FindNodeOfType': findNodeOfType,\n//     'Delay': timeout\n// };\n\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "guidChars",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/utils.js~guidChars",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "b64",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/utils.js~b64",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "v",
        "types": [
          "*"
        ]
      },
      {
        "name": "len",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "utils",
    "memberof": "viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "static": true,
    "longname": "viewer/plugins/BIMServerModelsPlugin/lib/utils.js~utils",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/BIMServerModelsPlugin/lib/utils.js",
    "importStyle": "{utils}",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "{\"XmlToJson\": *, \"Clone\": *, \"CompressGuid\": *, \"FindNodeOfType\": *, \"Delay\": *}"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "viewer/plugins/ClipsPlugin/ClipsPlugin.js",
    "content": "import {Plugin} from \"./../../Plugin.js\";\nimport {Clip, math} from \"../../../xeogl/xeogl.module.js\"\n\n/**\n * A viewer plugin that manages user cross-section planes.\n *\n * @example\n *\n * // Create a viewer\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * // Add a GLTFModelsPlugin\n * var gltfModelsPlugin = new GLTFModelsPlugin(viewer, {\n *      id: \"GLTFModels\"\n * });\n *\n * // Add a ClipsPlugin\n * var clipsPlugin = new ClipsPlugin(viewer, {\n *      id: \"Clips\"\n * });\n *\n * // Load a glTF model\n * gltfModelsPlugin.load({\n *      id: \"myModel\",\n *      src: \"./models/gltf/mygltfmodel.gltf\"\n * });\n *\n * // When the model has loaded, create some cross-sections\n * model.on(\"loaded\", function() {\n *\n *     clipsPlugin.createClip({\n *         id: \"myClip\",\n *         pos: [0,0,0],\n *         dir: [0.5, 0.5, 0.5]\n *     });\n *\n *     clipsPlugin.createClip({\n *         id: \"myClip2\",\n *         pos: [0,0,0],\n *         dir: [0.5, -0.5, 0.5]\n *     });\n * });\n *\n * @class ClipsPlugin\n */\nclass ClipsPlugin extends Plugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"Clips\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     */\n    constructor(viewer, cfg) {\n        super(\"Clips\", viewer);\n        this.clips = viewer.scene.clips;\n    }\n\n    /**\n     * @private\n     */\n    send(name, value) {\n        switch (name) {\n            case \"clearClips\":\n                this.clear();\n                break;\n        }\n    }\n\n    /**\n     * @private\n     */\n    writeBookmark(bookmark) {\n        var states = [];\n        var vecToArray = math.vecToArray;\n        for (var id in this.clips) {\n            if (this.clips.hasOwnProperty(id)) {\n                var clip = this.clips[id];\n                states.push({\n                    id: id,\n                    pos: vecToArray(clip.pos),\n                    dir: vecToArray(clip.dir),\n                    active: clip.active\n                });\n            }\n        }\n        if (states.length > 0) {\n            (bookmark.plugins = bookmark.plugins || {}).clips = states;\n        }\n    }\n\n    /**\n     * @private\n     */\n    readBookmark(bookmark) {\n        this.clear();\n        var plugins = bookmark.plugins;\n        if (plugins) {\n            var states = plugins.clips;\n            if (states) {\n                for (var i = 0, len = states.length; i < len; i++) {\n                    var state = states[i];\n                    this.createClip(state.id, state);\n                }\n            }\n        }\n    }\n\n    /**\n     Creates a clipping plane.\n\n     @param {Object} params Clip plane configuration.\n     @param {String} params.id Unique ID to assign to the clipping plane. Must be unique among all components in the Viewer.\n     @param {[Number, Number, Number]} [params.pos=0,0,0] World-space position of the clip plane.\n     @param {[Number, Number, Number]} [params.dir=[0,0,-1]} Vector indicating the orientation of the clip plane.\n     @param {Boolean} [params.active=true] Whether the clip plane is initially active. Only clips while this is true.\n     @param {Boolean} [params.shown=true] Whether to show a helper object to indicate the clip plane's position and orientation.\n     @returns {xeogl.Clip}  A <a href=\"http://xeogl.org/docs/classes/Clip.html\">xeogl.Model</a> representing the clipping plane.\n     */\n    createClip(params) {\n        if (this.viewer.scene.components[params.id]) {\n            this.error(\"Viewer component with this ID already exists: \" + id);\n            return this;\n        }\n        return new Clip(this.viewer.scene, {\n            id: params.id,\n            pos: params.pos,\n            dir: params.dir,\n            active: true || params.active\n        });\n    }\n\n    /**\n     Destroys a clipping plane.\n\n     @param {String} id ID of clipping plane to destroy.\n     */\n    destroyClip(id) {\n        var clip = viewer.scene.clips[id];\n        if (!clip) {\n            this.log(\"Clip not found: \" + id);\n            return;\n        }\n        clip.destroy();\n    }\n\n    /**\n     Destroys all clipping planes.\n     */\n    clear() {\n        var ids = Object.keys(this.viewer.scene.clips);\n        for (var i = 0, len = ids.length; i < len; i++) {\n            this.destroyClip(ids[i]);\n        }\n    }\n\n    /**\n     * Destroys this plugin.\n     *\n     * Removes all cross-section planes from the viewer first.\n     */\n    destroy() {\n        this.clear();\n        super.destroy();\n    }\n}\n\nexport {ClipsPlugin}\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/ClipsPlugin/ClipsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "class",
    "name": "ClipsPlugin",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/ClipsPlugin/ClipsPlugin.js",
    "importStyle": "{ClipsPlugin}",
    "description": "A viewer plugin that manages user cross-section planes.",
    "examples": [
      "\n// Create a viewer\nconst viewer = new Viewer({\n     canvasId: \"myCanvas\"\n});\n\n// Add a GLTFModelsPlugin\nvar gltfModelsPlugin = new GLTFModelsPlugin(viewer, {\n     id: \"GLTFModels\"\n});\n\n// Add a ClipsPlugin\nvar clipsPlugin = new ClipsPlugin(viewer, {\n     id: \"Clips\"\n});\n\n// Load a glTF model\ngltfModelsPlugin.load({\n     id: \"myModel\",\n     src: \"./models/gltf/mygltfmodel.gltf\"\n});\n\n// When the model has loaded, create some cross-sections\nmodel.on(\"loaded\", function() {\n\n    clipsPlugin.createClip({\n        id: \"myClip\",\n        pos: [0,0,0],\n        dir: [0.5, 0.5, 0.5]\n    });\n\n    clipsPlugin.createClip({\n        id: \"myClip2\",\n        pos: [0,0,0],\n        dir: [0.5, -0.5, 0.5]\n    });\n});"
    ],
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ClipsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 282,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"Clips\"",
        "defaultRaw": "Clips",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      }
    ]
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "clips",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#clips",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "send",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#send",
    "access": "private",
    "description": "",
    "lineNumber": 64,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "writeBookmark",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#writeBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 75,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "readBookmark",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#readBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 97,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "createClip",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#createClip",
    "access": "public",
    "description": "Creates a clipping plane.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{xeogl.Clip}  A <a href=\"http://xeogl.org/docs/classes/Clip.html\">xeogl.Model</a> representing the clipping plane."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Clip plane configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "Unique ID to assign to the clipping plane. Must be unique among all components in the Viewer."
      },
      {
        "nullable": null,
        "types": [
          "[Number, Number, Number]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0,0,0",
        "defaultRaw": "0,0,0",
        "name": "params.pos",
        "description": "World-space position of the clip plane."
      },
      {
        "nullable": null,
        "types": [
          "[Number, Number, Number]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,-1]} Vector indicating the orientation of the clip plane.",
        "defaultRaw": "[0,0,-1]} Vector indicating the orientation of the clip plane.",
        "name": "params.dir",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.active",
        "description": "Whether the clip plane is initially active. Only clips while this is true."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.shown",
        "description": "Whether to show a helper object to indicate the clip plane's position and orientation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "xeogl.Clip"
      ],
      "spread": false,
      "description": "A <a href=\"http://xeogl.org/docs/classes/Clip.html\">xeogl.Model</a> representing the clipping plane."
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "destroyClip",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#destroyClip",
    "access": "public",
    "description": "Destroys a clipping plane.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of clipping plane to destroy."
      }
    ],
    "return": null
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "clear",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#clear",
    "access": "public",
    "description": "Destroys all clipping planes.",
    "lineNumber": 152,
    "params": [],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/ClipsPlugin/ClipsPlugin.js~ClipsPlugin#destroy",
    "access": "public",
    "description": "Destroys this plugin.\n\nRemoves all cross-section planes from the viewer first.",
    "lineNumber": 164,
    "params": [],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "file",
    "name": "viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js",
    "content": "import {ModelsPlugin} from \"./../../../viewer/ModelsPlugin.js\";\nimport {GLTFBigModel} from \"../../../xeogl/GLTFBigModel/GLTFBigModel.js\";\n\n/**\n * A viewer plugin that loads large scale models from [glTF](https://www.khronos.org/gltf/).\n *\n * For each model loaded, creates a [xeogl.BigModel](http://xeogl.org/docs/classes/BigModel.html) within its\n * {@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n *\n *\n *\n * See the {@link GLTFBigModelsPlugin#load} method for parameters that you can configure\n * each [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.\n *\n * @example\n * // Create a xeokit Viewer\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * // Add a GLTFBigModelsPlugin to the Viewer\n * var plugin = new GLTFBigModelsPlugin(viewer, {\n *      id: \"GLTFBigModels\"  // Default value\n * });\n *\n * // We can also get the plugin by its ID on the Viewer\n * plugin = viewer.plugins.GLTFBigModels;\n *\n * // Load the glTF model\n * // These params can include all the xeogl.GLTFModel configs\n * const model = plugin.load({\n *      id: \"myModel\",\n *      src: \"models/mygltfmodel.gltf\",\n *      scale: [0.1, 0.1, 0.1],\n *      rotate: [90, 0, 0],\n *      translate: [100,0,0],\n *      edges: true\n * });\n *\n * // Recall that the model is a xeogl.Model\n *\n * // When the model has loaded, fit it to view\n * model.on(\"loaded\", function() {\n *      viewer.cameraFlight.flyTo(model);\n * });\n *\n * // Update properties of the model via the xeogl.Model\n * model.translate = [200,0,0];\n *\n * // You can unload the model via the plugin\n * plugin.unload(\"myModel\");\n *\n * // Or unload it by calling destroy() on the xeogl.Model itself\n * model.destroy();\n *\n * @class GLTFBigModelsPlugin\n */\nclass GLTFBigModelsPlugin extends ModelsPlugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"GLTFBigModels\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     */\n    constructor(viewer, cfg) {\n        super(\"GLTFBigModels\", viewer, GLTFBigModel, cfg);\n    }\n\n    /**\n     Loads a large-scale glTF model from the file system into the viewer.\n\n     @param params {*} Configs\n     @param [params.id] {String} Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\n     generated automatically when omitted.\n     @param [params.entityType] {String} Optional entity classification when using within a semantic data model. See the {{#crossLink \"Object\"}}{{/crossLink}} documentation for usage.\n     @param [params.meta] {String:Object} Optional map of user-defined metadata to attach to this GLTFModel.\n     @param [params.parent] The parent Object.\n     @param [params.visible=true] {Boolean}  Indicates if this GLTFModel is visible.\n     @param [params.culled=false] {Boolean}  Indicates if this GLTFModel is culled from view.\n     @param [params.pickable=true] {Boolean}  Indicates if this GLTFModel is pickable.\n     @param [params.clippable=true] {Boolean} Indicates if this GLTFModel is clippable.\n     @param [params.outlined=false] {Boolean} Whether an outline is rendered around this GLTFModel.\n     @param [params.ghosted=false] {Boolean} Whether this GLTFModel is rendered ghosted.\n     @param [params.highlighted=false] {Boolean} Whether this GLTFModel is rendered highlighted.\n     @param [params.selected=false] {Boolean} Whether this GLTFModel is rendered selected.\n     @param [params.edges=false] {Boolean} Whether this GLTFModel is rendered with edges emphasized.\n     @param [params.colorize=[1.0,1.0,1.0]] {Float32Array}  RGB colorize color, multiplies by the rendered fragment colors.\n     @param [params.opacity=1.0] {Number} Opacity factor, multiplies by the rendered fragment alpha.\n     @param [params.position=[0,0,0]] {Float32Array} The GLTFModel's local 3D position.\n     @param [params.scale=[1,1,1]] {Float32Array} The GLTFModel's local scale.\n     @param [params.rotation=[0,0,0]] {Float32Array} The GLTFModel's local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     @param [params.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} GLTFThe Model's local modelling transform matrix. Overrides the position, scale and rotation parameters.\n     @param [params.src] {String} Path to a glTF file. You can set this to a new file path at any time, which will cause the\n     @param [params.lambertMaterials=false] {Boolean} When true, gives each {{#crossLink \"Mesh\"}}{{/crossLink}} the same {{#crossLink \"LambertMaterial\"}}{{/crossLink}} and a {{#crossLink \"Mesh/colorize:property\"}}{{/crossLink}} value set the to diffuse color extracted from the glTF material. This is typically used for CAD models with huge amounts of objects, and will ignore textures.\n     @param [params.quantizeGeometry=true] {Boolean} When true, quantizes geometry to reduce memory and GPU bus usage.\n     @param [params.combineGeometry=true] {Boolean} When true, combines geometry vertex buffers to improve rendering performance.\n     @param [params.backfaces=false] {Boolean} When true, allows visible backfaces, wherever specified in the glTF. When false, ignores backfaces.\n     @param [params.edgeThreshold=20] {Number} When ghosting, highlighting, selecting or edging, this is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n     @param [params.handleNode] {Function} Optional callback to mask which {{#crossLink \"Object\"}}Objects{{/crossLink}} are loaded. Each Object will only be loaded when this callback returns ````true``` for its ID.\n     */\n    load(params) {\n        if (!params.id) {\n            this.error(\"load() param expected: id\");\n            return;\n        }\n        if (this.viewer.scene.components[params.id]) {\n            this.error(\"Component with this ID already exists in viewer: \" + id);\n            return;\n        }\n        var model = new GLTFBigModel(this.viewer.scene, params);\n        return model; // TODO: register loading params within this plugin for inclusion in bookmarks\n    }\n}\n\nexport {GLTFBigModelsPlugin}\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 292,
    "kind": "class",
    "name": "GLTFBigModelsPlugin",
    "memberof": "viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js~GLTFBigModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js",
    "importStyle": "{GLTFBigModelsPlugin}",
    "description": "A viewer plugin that loads large scale models from [glTF](https://www.khronos.org/gltf/).\n\nFor each model loaded, creates a [xeogl.BigModel](http://xeogl.org/docs/classes/BigModel.html) within its\n{@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n\n\n\nSee the {@link GLTFBigModelsPlugin#load} method for parameters that you can configure\neach [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.",
    "examples": [
      "// Create a xeokit Viewer\nconst viewer = new Viewer({\n     canvasId: \"myCanvas\"\n});\n\n// Add a GLTFBigModelsPlugin to the Viewer\nvar plugin = new GLTFBigModelsPlugin(viewer, {\n     id: \"GLTFBigModels\"  // Default value\n});\n\n// We can also get the plugin by its ID on the Viewer\nplugin = viewer.plugins.GLTFBigModels;\n\n// Load the glTF model\n// These params can include all the xeogl.GLTFModel configs\nconst model = plugin.load({\n     id: \"myModel\",\n     src: \"models/mygltfmodel.gltf\",\n     scale: [0.1, 0.1, 0.1],\n     rotate: [90, 0, 0],\n     translate: [100,0,0],\n     edges: true\n});\n\n// Recall that the model is a xeogl.Model\n\n// When the model has loaded, fit it to view\nmodel.on(\"loaded\", function() {\n     viewer.cameraFlight.flyTo(model);\n});\n\n// Update properties of the model via the xeogl.Model\nmodel.translate = [200,0,0];\n\n// You can unload the model via the plugin\nplugin.unload(\"myModel\");\n\n// Or unload it by calling destroy() on the xeogl.Model itself\nmodel.destroy();"
    ],
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "GLTFBigModelsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/ModelsPlugin.js~ModelsPlugin"
    ]
  },
  {
    "__docId__": 293,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js~GLTFBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js~GLTFBigModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"GLTFBigModels\"",
        "defaultRaw": "GLTFBigModels",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      }
    ]
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js~GLTFBigModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/GLTFBigModelsPlugin/GLTFBigModelsPlugin.js~GLTFBigModelsPlugin#load",
    "access": "public",
    "description": "Loads a large-scale glTF model from the file system into the viewer.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{*} Configs"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.id",
        "description": "{String} Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.entityType",
        "description": "{String} Optional entity classification when using within a semantic data model. See the {{#crossLink \"Object\"}}{{/crossLink}} documentation for usage."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.meta",
        "description": "{String:Object} Optional map of user-defined metadata to attach to this GLTFModel."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.parent",
        "description": "The parent Object."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.visible",
        "description": "{Boolean}  Indicates if this GLTFModel is visible."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.culled",
        "description": "{Boolean}  Indicates if this GLTFModel is culled from view."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.pickable",
        "description": "{Boolean}  Indicates if this GLTFModel is pickable."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.clippable",
        "description": "{Boolean} Indicates if this GLTFModel is clippable."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.outlined",
        "description": "{Boolean} Whether an outline is rendered around this GLTFModel."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.ghosted",
        "description": "{Boolean} Whether this GLTFModel is rendered ghosted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.highlighted",
        "description": "{Boolean} Whether this GLTFModel is rendered highlighted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.selected",
        "description": "{Boolean} Whether this GLTFModel is rendered selected."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.edges",
        "description": "{Boolean} Whether this GLTFModel is rendered with edges emphasized."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1.0,1.0,1.0]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.colorize",
        "description": "{Float32Array}  RGB colorize color, multiplies by the rendered fragment colors."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "params.opacity",
        "description": "{Number} Opacity factor, multiplies by the rendered fragment alpha."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.position",
        "description": "{Float32Array} The GLTFModel's local 3D position."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.scale",
        "description": "{Float32Array} The GLTFModel's local scale."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.rotation",
        "description": "{Float32Array} The GLTFModel's local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} GLTFThe Model's local modelling transform matrix. Overrides the position, scale and rotation parameters.",
        "defaultRaw": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} GLTFThe Model's local modelling transform matrix. Overrides the position, scale and rotation parameters.",
        "name": "params.matrix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.src",
        "description": "{String} Path to a glTF file. You can set this to a new file path at any time, which will cause the"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.lambertMaterials",
        "description": "{Boolean} When true, gives each {{#crossLink \"Mesh\"}}{{/crossLink}} the same {{#crossLink \"LambertMaterial\"}}{{/crossLink}} and a {{#crossLink \"Mesh/colorize:property\"}}{{/crossLink}} value set the to diffuse color extracted from the glTF material. This is typically used for CAD models with huge amounts of objects, and will ignore textures."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.quantizeGeometry",
        "description": "{Boolean} When true, quantizes geometry to reduce memory and GPU bus usage."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.combineGeometry",
        "description": "{Boolean} When true, combines geometry vertex buffers to improve rendering performance."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.backfaces",
        "description": "{Boolean} When true, allows visible backfaces, wherever specified in the glTF. When false, ignores backfaces."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.edgeThreshold",
        "description": "{Number} When ghosting, highlighting, selecting or edging, this is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.handleNode",
        "description": "{Function} Optional callback to mask which {{#crossLink \"Object\"}}Objects{{/crossLink}} are loaded. Each Object will only be loaded when this callback returns ````true``` for its ID."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "file",
    "name": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js",
    "content": "import {_apply} from \"../../../xeogl/xeogl.module.js\"\nimport {GLTFModel} from \"././../../../xeogl/GLTFModel/GLTFModel.js\";\n\nimport {ModelsPlugin} from \"./../../../viewer/ModelsPlugin.js\";\n\n/**\n * A viewer plugin that loads models from [glTF](https://www.khronos.org/gltf/).\n *\n * For each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n * {@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n *\n * See the {@link GLTFModelsPlugin#load} method for parameters that you can configure\n * each [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.\n *\n * @example\n * // Create a xeokit Viewer\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * // Add a GLTFModelsPlugin to the Viewer\n * var plugin = new GLTFModelsPlugin(viewer, {\n *      id: \"GLTFModels\"  // Default value\n * });\n *\n * // We can also get the plugin by its ID on the Viewer\n * plugin = viewer.plugins.GLTFModels;\n *\n * // Load the glTF model\n * // These params can include all the xeogl.GLTFModel configs\n * const model = plugin.load({\n *      id: \"myModel\",\n *      src: \"models/mygltfmodel.gltf\",\n *      scale: [0.1, 0.1, 0.1],\n *      rotate: [90, 0, 0],\n *      translate: [100,0,0],\n *      edges: true\n * });\n *\n * // Recall that the model is a xeogl.Model\n *\n * // When the model has loaded, fit it to view\n * model.on(\"loaded\", function() {\n *      viewer.cameraFlight.flyTo(model);\n * });\n *\n * // Update properties of the model via the xeogl.Model\n * model.translate = [200,0,0];\n *\n * // You can unload the model via the plugin\n * plugin.unload(\"myModel\");\n *\n * // Or unload it by calling destroy() on the xeogl.Model itself\n * model.destroy();\n *\n * @class GLTFModelsPlugin\n */\nclass GLTFModelsPlugin extends ModelsPlugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"GLTFModels\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     */\n    constructor(viewer, cfg) {\n        super(\"GLTFModels\", viewer, GLTFModel, cfg);\n    }\n\n    /**\n     * Loads a glTF model from a file into this GLTFModelsPlugin's {@link Viewer}.\n     *\n     * Creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {*} params  Loading parameters.\n     *\n     * @param {String} params.id ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\n     * unique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {String} [params.src] Path to a glTF file.\n     *\n     * @param {xeogl.Object} [params.parent] The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\n     * if we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy.\n     *\n     * @param {Boolean} [params.edges=false] Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized.\n     *\n     * @param {Float32Array} [params.position=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local 3D position.\n     *\n     * @param {Float32Array} [params.scale=[1,1,1]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local scale.\n     *\n     * @param {Float32Array} [params.rotation=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\n     * rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * @param {Float32Array} [params.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] The\n     * [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\n     * the position, scale and rotation parameters.\n     *\n     * @param {Boolean} [params.lambertMaterials=false]  When true, gives each [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html)\n     * the same [xeogl.LambertMaterial](http://xeogl.org/docs/classes/LambertMaterial.html) and a ````colorize````\n     * value set the to diffuse color extracted from the glTF material. This is typically used for large CAD models and\n     * will cause loading to ignore textures in the glTF.\n     *\n     * @param {Boolean} [params.backfaces=false] When true, allows visible backfaces, wherever specified in the glTF.\n     * When false, ignores backfaces.\n     *\n     * @param {Number} [params.edgeThreshold=20] When ghosting, highlighting, selecting or edging, this is the threshold\n     * angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n     *\n     * @param {Function} [params.handleNode] Optional callback to control how\n     * [xeogl.Objects](http://xeogl.org/docs/classes/Object.html) and\n     * [xeogl.Meshes](http://xeogl.org/docs/classes/Meshes.html) are created as the glTF node hierarchy is\n     * parsed. See usage examples.\n     *\n     * @returns {{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded glTF model.\n     */\n    load(params) {\n\n        var modelId = params.id;\n        var self = this;\n\n        return super.load(_apply(params, {\n            handleNode: function (nodeInfo, actions) {\n                return self._defaultHhandleNode(modelId, nodeInfo, actions);\n            }\n        }));\n    }\n\n    _defaultHhandleNode(modelId, nodeInfo, actions) {\n        var name = nodeInfo.name;\n        if (!name) {\n            return true; // Continue descending this node subtree\n        }\n        actions.createObject = {\n            id: modelId + \"#\" + name,\n            entityType: \"default\",\n            visible: true\n        };\n        return true; // Continue descending this glTF node subtree\n    }\n}\n\nexport {GLTFModelsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "class",
    "name": "GLTFModelsPlugin",
    "memberof": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js~GLTFModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js",
    "importStyle": "{GLTFModelsPlugin}",
    "description": "A viewer plugin that loads models from [glTF](https://www.khronos.org/gltf/).\n\nFor each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n{@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n\nSee the {@link GLTFModelsPlugin#load} method for parameters that you can configure\neach [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.",
    "examples": [
      "// Create a xeokit Viewer\nconst viewer = new Viewer({\n     canvasId: \"myCanvas\"\n});\n\n// Add a GLTFModelsPlugin to the Viewer\nvar plugin = new GLTFModelsPlugin(viewer, {\n     id: \"GLTFModels\"  // Default value\n});\n\n// We can also get the plugin by its ID on the Viewer\nplugin = viewer.plugins.GLTFModels;\n\n// Load the glTF model\n// These params can include all the xeogl.GLTFModel configs\nconst model = plugin.load({\n     id: \"myModel\",\n     src: \"models/mygltfmodel.gltf\",\n     scale: [0.1, 0.1, 0.1],\n     rotate: [90, 0, 0],\n     translate: [100,0,0],\n     edges: true\n});\n\n// Recall that the model is a xeogl.Model\n\n// When the model has loaded, fit it to view\nmodel.on(\"loaded\", function() {\n     viewer.cameraFlight.flyTo(model);\n});\n\n// Update properties of the model via the xeogl.Model\nmodel.translate = [200,0,0];\n\n// You can unload the model via the plugin\nplugin.unload(\"myModel\");\n\n// Or unload it by calling destroy() on the xeogl.Model itself\nmodel.destroy();"
    ],
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "GLTFModelsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/ModelsPlugin.js~ModelsPlugin"
    ]
  },
  {
    "__docId__": 297,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js~GLTFModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js~GLTFModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"GLTFModels\"",
        "defaultRaw": "GLTFModels",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      }
    ]
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js~GLTFModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js~GLTFModelsPlugin#load",
    "access": "public",
    "description": "Loads a glTF model from a file into this GLTFModelsPlugin's {@link Viewer}.\n\nCreates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded glTF model."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Loading parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\nunique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html)."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "params.src",
        "description": "Path to a glTF file."
      },
      {
        "nullable": null,
        "types": [
          "xeogl.Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.parent",
        "description": "The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\nif we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.edges",
        "description": "Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.position",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal 3D position."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.scale",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal scale."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.rotation",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\nrotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]",
        "defaultRaw": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        "name": "params.matrix",
        "description": "The\n[xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\nthe position, scale and rotation parameters."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.lambertMaterials",
        "description": "When true, gives each [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html)\nthe same [xeogl.LambertMaterial](http://xeogl.org/docs/classes/LambertMaterial.html) and a ````colorize````\nvalue set the to diffuse color extracted from the glTF material. This is typically used for large CAD models and\nwill cause loading to ignore textures in the glTF."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.backfaces",
        "description": "When true, allows visible backfaces, wherever specified in the glTF.\nWhen false, ignores backfaces."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.edgeThreshold",
        "description": "When ghosting, highlighting, selecting or edging, this is the threshold\nangle between normals of adjacent triangles, below which their shared wireframe edge is not drawn."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "params.handleNode",
        "description": "Optional callback to control how\n[xeogl.Objects](http://xeogl.org/docs/classes/Object.html) and\n[xeogl.Meshes](http://xeogl.org/docs/classes/Meshes.html) are created as the glTF node hierarchy is\nparsed. See usage examples."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{xeogl.Model}"
      ],
      "spread": false,
      "description": "A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded glTF model."
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "_defaultHhandleNode",
    "memberof": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js~GLTFModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/GLTFModelsPlugin/GLTFModelsPlugin.js~GLTFModelsPlugin#_defaultHhandleNode",
    "access": "private",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "modelId",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeInfo",
        "types": [
          "*"
        ]
      },
      {
        "name": "actions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "file",
    "name": "viewer/plugins/LightsPlugin/LightsPlugin.js",
    "content": "import {Plugin} from \"./../../Plugin.js\";\nimport {DirLight} from \"../../../xeogl/xeogl.module.js\"\n\n/**\n * A viewer plugin that manages light sources.\n *\n * @example\n *\n * // Create a Viewer\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * // Add a GLTFModelsPlugin\n * var gltfModelsPlugin = new GLTFModelsPlugin(viewer, {\n *     id: \"GLTFModels\"  // Default value\n * });\n *\n * // Add a LightsPlugin\n * var lightsPlugin = new LightsPlugin(viewer, {\n *     id: \"Lights\" // Default value\n * });\n *\n * // Load a glTF model\n * const model = gltfModelsPlugin.load({\n *     id: \"myModel\",\n *     src: \"./models/gltf/mygltfmodel.gltf\"\n * });\n *\n * // Clear default lights\n * lightsPlugin.clear();\n *\n * // Create three directional World-space lights. \"World\" means that they will appear as if part\n * // of the world, instead of \"View\", where they move with the user's head.\n *\n * lightsPlugin.createLight({\n *     id: \"keyLight\",\n *     dir: [0.8, -0.6, -0.8],\n *     color: [1.0, 0.3, 0.3],\n *     intensity: 1.0,\n *     space: \"world\"\n * });\n *\n * lightsPlugin.createLight({\n *     id: \"fillLight\",\n *     dir: [-0.8, -0.4, -0.4],\n *     color: [0.3, 1.0, 0.3],\n *     intensity: 1.0,\n *     space: \"world\"\n * });\n *\n * lightsPlugin.createDirLight({\n *     id: \"rimLight\",\n *     dir: [0.2, -0.8, 0.8],\n *     color: [0.6, 0.6, 0.6],\n *     intensity: 1.0,\n *     space: \"world\"\n * });\n *\n * @class LightsPlugin\n */\nclass LightsPlugin extends Plugin {\n\n    constructor(viewer) {\n        super(\"lights\", viewer);\n        this.lights = viewer.scene.lights;\n    }\n\n    /**\n     * @private\n     */\n    send(propName, propValue) {\n    }\n\n    /**\n     * @private\n     */\n    writeBookmark(bookmark) {\n        var states = [];\n        var vecToArray = xeogl.math.vecToArray;\n        for (var id in this.lights) {\n            if (this.lights.hasOwnProperty(id)) {\n                var light = this.lights[id];\n                states.push({\n                    id: id,\n                    pos: vecToArray(light.pos),\n                    dir: vecToArray(light.dir),\n                    intensity: light.intensity\n                });\n            }\n        }\n        if (states.length > 0) {\n            (bookmark.plugins = bookmark.plugins || {}).lights = states;\n        }\n    }\n\n    /**\n     * @private\n     */\n    readBookmark(bookmark) {\n        this.clear();\n        var plugins = bookmark.plugins;\n        if (plugins) {\n            var states = plugins.lights;\n            if (states) {\n                for (var i = 0, len = states.length; i < len; i++) {\n                    var state = states[i];\n                    this.createLight(state.id, state);\n                }\n            }\n        }\n    }\n\n    /**\n     Creates a directional light source.\n\n     @param {Object} params Light source configuration.\n     @param {String} id Unique ID to assign to the light source.\n     @param {[Number, Number, Number]} [params.dir=[0,0,-1]} Direction vector.\n     @param {[Number, Number, Number]} [params.color=[0,0,-1]} RGB color.\n     @param {Number} [params.intensity=1} Intensity.\n     @param {String} [space=\"view\"] \"view\" for head-mounted, \"world\" to position in world-space.\n     @returns {xeogl.DirLight} The new light source.\n     */\n    createLight(params) {\n        if (this.viewer.scene.components[id]) {\n            this.error(\"Component with this ID already exists: \" + id);\n            return this;\n        }\n        params.id = id;\n        return new DirLight(this.viewer.scene, params);\n    }\n\n    /**\n     Destroys all lights. Note that the Viewer will have initially have some default lights, so you may want to call this before defining your own.\n     */\n    clear() {\n        this.viewer.scene.clearLights();\n    }\n\n    /**\n     * Destroys this plugin.\n     *\n     * Clears cross-section planes from the Viewer first.\n     */\n    destroy() {\n        this.clear();\n        super.destroy();\n    }\n}\n\nexport {LightsPlugin}\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/LightsPlugin/LightsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "class",
    "name": "LightsPlugin",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/LightsPlugin/LightsPlugin.js",
    "importStyle": "{LightsPlugin}",
    "description": "A viewer plugin that manages light sources.",
    "examples": [
      "\n// Create a Viewer\nconst viewer = new Viewer({\n    canvasId: \"myCanvas\"\n});\n\n// Add a GLTFModelsPlugin\nvar gltfModelsPlugin = new GLTFModelsPlugin(viewer, {\n    id: \"GLTFModels\"  // Default value\n});\n\n// Add a LightsPlugin\nvar lightsPlugin = new LightsPlugin(viewer, {\n    id: \"Lights\" // Default value\n});\n\n// Load a glTF model\nconst model = gltfModelsPlugin.load({\n    id: \"myModel\",\n    src: \"./models/gltf/mygltfmodel.gltf\"\n});\n\n// Clear default lights\nlightsPlugin.clear();\n\n// Create three directional World-space lights. \"World\" means that they will appear as if part\n// of the world, instead of \"View\", where they move with the user's head.\n\nlightsPlugin.createLight({\n    id: \"keyLight\",\n    dir: [0.8, -0.6, -0.8],\n    color: [1.0, 0.3, 0.3],\n    intensity: 1.0,\n    space: \"world\"\n});\n\nlightsPlugin.createLight({\n    id: \"fillLight\",\n    dir: [-0.8, -0.4, -0.4],\n    color: [0.3, 1.0, 0.3],\n    intensity: 1.0,\n    space: \"world\"\n});\n\nlightsPlugin.createDirLight({\n    id: \"rimLight\",\n    dir: [0.2, -0.8, 0.8],\n    color: [0.6, 0.6, 0.6],\n    intensity: 1.0,\n    space: \"world\"\n});"
    ],
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LightsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "lights",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#lights",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "send",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#send",
    "access": "private",
    "description": "",
    "lineNumber": 72,
    "ignore": true,
    "params": [
      {
        "name": "propName",
        "types": [
          "*"
        ]
      },
      {
        "name": "propValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "writeBookmark",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#writeBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 78,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "readBookmark",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#readBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 100,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "createLight",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#createLight",
    "access": "public",
    "description": "Creates a directional light source.",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{xeogl.DirLight} The new light source."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Light source configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Unique ID to assign to the light source."
      },
      {
        "nullable": null,
        "types": [
          "[Number, Number, Number]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,-1]} Direction vector.",
        "defaultRaw": "[0,0,-1]} Direction vector.",
        "name": "params.dir",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "[Number, Number, Number]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,-1]} RGB color.",
        "defaultRaw": "[0,0,-1]} RGB color.",
        "name": "params.color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1} Intensity.",
        "defaultRaw": "1} Intensity.",
        "name": "params.intensity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"view\"",
        "defaultRaw": "view",
        "name": "space",
        "description": "\"view\" for head-mounted, \"world\" to position in world-space."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "xeogl.DirLight"
      ],
      "spread": false,
      "description": "The new light source."
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "clear",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#clear",
    "access": "public",
    "description": "Destroys all lights. Note that the Viewer will have initially have some default lights, so you may want to call this before defining your own.",
    "lineNumber": 137,
    "params": [],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/LightsPlugin/LightsPlugin.js~LightsPlugin#destroy",
    "access": "public",
    "description": "Destroys this plugin.\n\nClears cross-section planes from the Viewer first.",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js",
    "content": "import {ModelsPlugin} from \"./../../../viewer/ModelsPlugin.js\";\nimport {OBJModel} from \"./../../../xeogl/OBJModel/OBJModel.js\";\n\n/**\n * A viewer plugin that loads models from [OBJ](https://en.wikipedia.org/wiki/Wavefront_.obj_file) files.\n *\n * For each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n * {@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n *\n * See the {@link OBJModelsPlugin#load} method for parameters that you can configure\n * each [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.\n *\n * @example\n * // Create a xeokit Viewer\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * // Add an OBJModelsPlugin to the Viewer\n * var plugin = new GLTFModelsPlugin(viewer, {\n *      id: \"OBJModels\"  // Default value\n * });\n *\n * // We can also get the plugin by its ID on the Viewer\n * plugin = viewer.plugins.OBJModels;\n *\n * // Load the glTF model\n * // These params can include all the xeogl.OBJModel configs\n * const model = plugin.load({\n *      id: \"myModel\",\n *      src: \"models/myObjModel.obj\",\n *      scale: [0.1, 0.1, 0.1],\n *      rotate: [90, 0, 0],\n *      translate: [100,0,0],\n *      edges: true\n * });\n *\n * // Recall that the model is a xeogl.Model\n *\n * // When the model has loaded, fit it to view\n * model.on(\"loaded\", function() {\n *      viewer.cameraFlight.flyTo(model);\n * });\n *\n * // Update properties of the model via the xeogl.Model\n * model.translate = [200,0,0];\n *\n * // You can unload the model via the plugin\n * plugin.unload(\"myModel\");\n *\n * // Or unload it by calling destroy() on the xeogl.Model itself\n * model.destroy();\n *\n * @class OBJModelsPlugin\n */\nclass OBJModelsPlugin extends ModelsPlugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"OBJModels\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     */\n    constructor(viewer, cfg) {\n        super(\"OBJModels\", viewer, OBJModel, cfg);\n    }\n\n    /**\n     * Loads an OBJ model from a file into this OBJModelsPlugin's {@link Viewer}.\n     *\n     * Creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {*} params  Loading parameters.\n     *\n     * @param {String} params.id ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\n     * unique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {String} [params.src] Path to an OBJ file.\n     *\n     * @param {xeogl.Object} [params.parent] The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\n     * if we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy.\n     *\n     * @param {Boolean} [params.edges=false] Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized.\n     *\n     * @param {Float32Array} [params.position=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local 3D position.\n     *\n     * @param {Float32Array} [params.scale=[1,1,1]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local scale.\n     *\n     * @param {Float32Array} [params.rotation=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\n     * rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * @param {Float32Array} [params.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] The\n     * [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\n     * the position, scale and rotation parameters.\n     *\n     * @param {Number} [params.edgeThreshold=20] When ghosting, highlighting, selecting or edging, this is the threshold\n     * angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n     *\n     * @returns {{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded OBJ model.\n     */\n    load(params) {\n        return super.load(params);\n    }\n}\n\nexport {OBJModelsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "class",
    "name": "OBJModelsPlugin",
    "memberof": "viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js~OBJModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js",
    "importStyle": "{OBJModelsPlugin}",
    "description": "A viewer plugin that loads models from [OBJ](https://en.wikipedia.org/wiki/Wavefront_.obj_file) files.\n\nFor each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n{@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n\nSee the {@link OBJModelsPlugin#load} method for parameters that you can configure\neach [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.",
    "examples": [
      "// Create a xeokit Viewer\nconst viewer = new Viewer({\n     canvasId: \"myCanvas\"\n});\n\n// Add an OBJModelsPlugin to the Viewer\nvar plugin = new GLTFModelsPlugin(viewer, {\n     id: \"OBJModels\"  // Default value\n});\n\n// We can also get the plugin by its ID on the Viewer\nplugin = viewer.plugins.OBJModels;\n\n// Load the glTF model\n// These params can include all the xeogl.OBJModel configs\nconst model = plugin.load({\n     id: \"myModel\",\n     src: \"models/myObjModel.obj\",\n     scale: [0.1, 0.1, 0.1],\n     rotate: [90, 0, 0],\n     translate: [100,0,0],\n     edges: true\n});\n\n// Recall that the model is a xeogl.Model\n\n// When the model has loaded, fit it to view\nmodel.on(\"loaded\", function() {\n     viewer.cameraFlight.flyTo(model);\n});\n\n// Update properties of the model via the xeogl.Model\nmodel.translate = [200,0,0];\n\n// You can unload the model via the plugin\nplugin.unload(\"myModel\");\n\n// Or unload it by calling destroy() on the xeogl.Model itself\nmodel.destroy();"
    ],
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "OBJModelsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/ModelsPlugin.js~ModelsPlugin"
    ]
  },
  {
    "__docId__": 312,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js~OBJModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js~OBJModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"OBJModels\"",
        "defaultRaw": "OBJModels",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      }
    ]
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js~OBJModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/OBJModelsPlugin/OBJModelsPlugin.js~OBJModelsPlugin#load",
    "access": "public",
    "description": "Loads an OBJ model from a file into this OBJModelsPlugin's {@link Viewer}.\n\nCreates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded OBJ model."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Loading parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\nunique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html)."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "params.src",
        "description": "Path to an OBJ file."
      },
      {
        "nullable": null,
        "types": [
          "xeogl.Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.parent",
        "description": "The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\nif we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.edges",
        "description": "Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.position",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal 3D position."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.scale",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal scale."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.rotation",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\nrotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]",
        "defaultRaw": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        "name": "params.matrix",
        "description": "The\n[xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\nthe position, scale and rotation parameters."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.edgeThreshold",
        "description": "When ghosting, highlighting, selecting or edging, this is the threshold\nangle between normals of adjacent triangles, below which their shared wireframe edge is not drawn."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{xeogl.Model}"
      ],
      "spread": false,
      "description": "A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded OBJ model."
    }
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "viewer/plugins/STLModelsPlugin/STLModelsPlugin.js",
    "content": "import {ModelsPlugin} from \"./../../../viewer/ModelsPlugin.js\";\nimport {STLModel} from \"./../../../xeogl/STLModel/STLModel.js\";\n\n/**\n * A viewer plugin that loads models from <a href=\"https://en.wikipedia.org/wiki/STL_(file_format)\">STL</a> files.\n *\n * For each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n * {@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n *\n * Supports both binary and ASCII formats.\n *\n * ## Smoothing STL Normals\n *\n * STL models are normally flat-shaded, however providing a ````smoothNormals```` parameter when loading gives a smooth\n * appearance. Triangles in STL are disjoint, where each triangle has its own separate vertex positions, normals and\n * (optionally) colors. This means that you can have gaps between triangles in an STL model. Normals for each triangle\n * are perpendicular to the triangle's surface, which gives the model a faceted appearance by default.\n *\n * The ```smoothNormals``` parameter causes the plugin to recalculate the STL normals, so that each normal's direction is\n * the average of the orientations of the triangles adjacent to its vertex. When smoothing, each vertex normal is set to\n * the average of the orientations of all other triangles that have a vertex at the same position, excluding those triangles\n * whose direction deviates from the direction of the vertice's triangle by a threshold given in\n * the ````smoothNormalsAngleThreshold```` loading parameter. This makes smoothing robust for hard edges.\n *\n * ## Creating Separate Meshes\n *\n * An STL model is normally one single mesh, however providing a ````splitMeshes```` parameter when loading\n * will create a separate [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html) within the\n * [xeogl.Model](http://xeogl.org/docs/classes/Model.html) for each group of faces that share the same vertex colors.\n * This option only works with binary STL files.\n *\n * See the {@link STLModelsPlugin#load} method for parameters that you can configure\n * each [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.\n *\n * @example\n * // Create a xeokit Viewer\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * // Add an STLModelsPlugin to the Viewer\n * var plugin = new GLTFModelsPlugin(viewer, {\n *      id: \"STLModels\"  // Default value\n * });\n *\n * // We can also get the plugin by its ID on the Viewer\n * plugin = viewer.plugins.STLModels;\n *\n * // Load the glTF model\n * // These params can include all the xeogl.STLModel configs\n * const model = plugin.load({\n *      id: \"myModel\",\n *      src: \"models/mySTLModel.stl\",\n *      scale: [0.1, 0.1, 0.1],\n *      rotate: [90, 0, 0],\n *      translate: [100,0,0],\n *      edges: true,\n *      smoothNormals: true,                // Default\n *      smoothNormalsAngleThreshold: 20,    // Default\n *      splitMeshes: true                   // Default\n * });\n *\n * // Recall that the model is a xeogl.Model\n *\n * // When the model has loaded, fit it to view\n * model.on(\"loaded\", function() {\n *      viewer.cameraFlight.flyTo(model);\n * });\n *\n * // Update properties of the model via the xeogl.Model\n * model.translate = [200,0,0];\n *\n * // You can unload the model via the plugin\n * plugin.unload(\"myModel\");\n *\n * // Or unload it by calling destroy() on the xeogl.Model itself\n * model.destroy();\n *\n * @class STLModelsPlugin\n */\nclass STLModelsPlugin extends ModelsPlugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"STLModels\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     */\n    constructor(viewer, cfg) {\n        super(\"STLModels\", viewer, STLModel, cfg);\n    }\n\n    /**\n     * Loads an STL model from a file into this STLModelsPlugin's {@link Viewer}.\n     *\n     * Creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {*} params  Loading parameters.\n     *\n     * @param {String} params.id ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\n     * unique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {String} [params.src] Path to an STL file.\n     *\n     * @param {xeogl.Object} [params.parent] The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\n     * if we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy.\n     *\n     * @param {Boolean} [params.edges=false] Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized.\n     *\n     * @param {Float32Array} [params.position=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local 3D position.\n     *\n     * @param {Float32Array} [params.scale=[1,1,1]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local scale.\n     *\n     * @param {Float32Array} [params.rotation=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\n     * rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * @param {Float32Array} [params.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] The\n     * [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\n     * the position, scale and rotation parameters.\n     *\n     * @param {Boolean} [params.backfaces=false] When true, allows visible backfaces, wherever specified in the STL.\n     * When false, ignores backfaces.\n     *\n     * @param {Boolean} [params.smoothNormals=true] When true, automatically converts face-oriented normals to vertex\n     * normals for a smooth appearance.\n     *\n     * @param {Number} [params.smoothNormalsAngleThreshold=20] When ghosting, highlighting, selecting or edging, this is the threshold\n     * angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n     *\n     * @param {Number} [params.edgeThreshold=20] When ghosting, highlighting, selecting or edging, this is the threshold\n     * angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n     *\n     * @param {Boolean} [params.splitMeshes=true] When true, creates a\n     * separate [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html) for each group of faces that share the same vertex\n     * colors. Only works with binary STL.\n     *\n     * @returns {{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded STL model.\n     */\n    load(params) {\n        return super.load(params);\n    }\n}\n\nexport {STLModelsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/STLModelsPlugin/STLModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "class",
    "name": "STLModelsPlugin",
    "memberof": "viewer/plugins/STLModelsPlugin/STLModelsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/STLModelsPlugin/STLModelsPlugin.js~STLModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/STLModelsPlugin/STLModelsPlugin.js",
    "importStyle": "{STLModelsPlugin}",
    "description": "A viewer plugin that loads models from <a href=\"https://en.wikipedia.org/wiki/STL_(file_format)\">STL</a> files.\n\nFor each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n{@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n\nSupports both binary and ASCII formats.\n\n## Smoothing STL Normals\n\nSTL models are normally flat-shaded, however providing a ````smoothNormals```` parameter when loading gives a smooth\nappearance. Triangles in STL are disjoint, where each triangle has its own separate vertex positions, normals and\n(optionally) colors. This means that you can have gaps between triangles in an STL model. Normals for each triangle\nare perpendicular to the triangle's surface, which gives the model a faceted appearance by default.\n\nThe ```smoothNormals``` parameter causes the plugin to recalculate the STL normals, so that each normal's direction is\nthe average of the orientations of the triangles adjacent to its vertex. When smoothing, each vertex normal is set to\nthe average of the orientations of all other triangles that have a vertex at the same position, excluding those triangles\nwhose direction deviates from the direction of the vertice's triangle by a threshold given in\nthe ````smoothNormalsAngleThreshold```` loading parameter. This makes smoothing robust for hard edges.\n\n## Creating Separate Meshes\n\nAn STL model is normally one single mesh, however providing a ````splitMeshes```` parameter when loading\nwill create a separate [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html) within the\n[xeogl.Model](http://xeogl.org/docs/classes/Model.html) for each group of faces that share the same vertex colors.\nThis option only works with binary STL files.\n\nSee the {@link STLModelsPlugin#load} method for parameters that you can configure\neach [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.",
    "examples": [
      "// Create a xeokit Viewer\nconst viewer = new Viewer({\n     canvasId: \"myCanvas\"\n});\n\n// Add an STLModelsPlugin to the Viewer\nvar plugin = new GLTFModelsPlugin(viewer, {\n     id: \"STLModels\"  // Default value\n});\n\n// We can also get the plugin by its ID on the Viewer\nplugin = viewer.plugins.STLModels;\n\n// Load the glTF model\n// These params can include all the xeogl.STLModel configs\nconst model = plugin.load({\n     id: \"myModel\",\n     src: \"models/mySTLModel.stl\",\n     scale: [0.1, 0.1, 0.1],\n     rotate: [90, 0, 0],\n     translate: [100,0,0],\n     edges: true,\n     smoothNormals: true,                // Default\n     smoothNormalsAngleThreshold: 20,    // Default\n     splitMeshes: true                   // Default\n});\n\n// Recall that the model is a xeogl.Model\n\n// When the model has loaded, fit it to view\nmodel.on(\"loaded\", function() {\n     viewer.cameraFlight.flyTo(model);\n});\n\n// Update properties of the model via the xeogl.Model\nmodel.translate = [200,0,0];\n\n// You can unload the model via the plugin\nplugin.unload(\"myModel\");\n\n// Or unload it by calling destroy() on the xeogl.Model itself\nmodel.destroy();"
    ],
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "STLModelsPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/ModelsPlugin.js~ModelsPlugin"
    ]
  },
  {
    "__docId__": 316,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/STLModelsPlugin/STLModelsPlugin.js~STLModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/STLModelsPlugin/STLModelsPlugin.js~STLModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"STLModels\"",
        "defaultRaw": "STLModels",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      }
    ]
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/plugins/STLModelsPlugin/STLModelsPlugin.js~STLModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/STLModelsPlugin/STLModelsPlugin.js~STLModelsPlugin#load",
    "access": "public",
    "description": "Loads an STL model from a file into this STLModelsPlugin's {@link Viewer}.\n\nCreates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded STL model."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Loading parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\nunique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html)."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "params.src",
        "description": "Path to an STL file."
      },
      {
        "nullable": null,
        "types": [
          "xeogl.Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.parent",
        "description": "The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\nif we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.edges",
        "description": "Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.position",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal 3D position."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.scale",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal scale."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.rotation",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\nrotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]",
        "defaultRaw": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        "name": "params.matrix",
        "description": "The\n[xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\nthe position, scale and rotation parameters."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.backfaces",
        "description": "When true, allows visible backfaces, wherever specified in the STL.\nWhen false, ignores backfaces."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.smoothNormals",
        "description": "When true, automatically converts face-oriented normals to vertex\nnormals for a smooth appearance."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.smoothNormalsAngleThreshold",
        "description": "When ghosting, highlighting, selecting or edging, this is the threshold\nangle between normals of adjacent triangles, below which their shared wireframe edge is not drawn."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.edgeThreshold",
        "description": "When ghosting, highlighting, selecting or edging, this is the threshold\nangle between normals of adjacent triangles, below which their shared wireframe edge is not drawn."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.splitMeshes",
        "description": "When true, creates a\nseparate [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html) for each group of faces that share the same vertex\ncolors. Only works with binary STL."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{xeogl.Model}"
      ],
      "spread": false,
      "description": "A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded STL model."
    }
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js",
    "content": "import {Plugin} from \"./../../Plugin.js\";\nimport {Skybox} from \"../../../xeogl/skybox/skybox.js\"\n\n/**\n * A viewer plugin that manages skyboxes\n *\n * @example\n *\n * // Create a Viewer\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * // Add a GLTFModelsPlugin\n * var gltfModelsPlugin = new GLTFModelsPlugin(viewer, {\n *     id: \"GLTFModels\"  // Default value\n * });\n *\n * // Add a SkyboxesPlugin\n * var skyboxesPlugin = new SkyboxesPlugin(viewer, {\n *     id: \"Skyboxes\" // Default value\n * });\n *\n * // Load a glTF model\n * const model = gltfModelsPlugin.load({\n *     id: \"myModel\",\n *     src: \"./models/gltf/mygltfmodel.gltf\"\n * });\n *\n * // Create three directional World-space lights. \"World\" means that they will appear as if part\n * // of the world, instead of \"View\", where they move with the user's head.\n *\n * skyboxesPlugin.createLight({\n *     id: \"keyLight\",\n *     dir: [0.8, -0.6, -0.8],\n *     color: [1.0, 0.3, 0.3],\n *     intensity: 1.0,\n *     space: \"world\"\n * });\n *\n * skyboxesPlugin.createLight({\n *     id: \"fillLight\",\n *     dir: [-0.8, -0.4, -0.4],\n *     color: [0.3, 1.0, 0.3],\n *     intensity: 1.0,\n *     space: \"world\"\n * });\n *\n * skyboxesPlugin.createDirLight({\n *     id: \"rimLight\",\n *     dir: [0.2, -0.8, 0.8],\n *     color: [0.6, 0.6, 0.6],\n *     intensity: 1.0,\n *     space: \"world\"\n * });\n *\n * @class SkyboxesPlugin\n */\nclass SkyboxesPlugin extends Plugin {\n\n    constructor(viewer) {\n        super(\"skyboxes\", viewer);\n        this.skyboxes = {};\n    }\n\n    /**\n     * @private\n     */\n    send(name, value) {\n        switch (name) {\n            case \"clear\":\n                this.clear();\n                break;\n        }\n    }\n\n    /**\n     * @private\n     */\n    writeBookmark(bookmark) {\n        // var states = [];\n        // for (var id in this.skyboxes) {\n        //     if (this.skyboxes.hasOwnProperty(id)) {\n        //         var skybox = this.skyboxes[id];\n        //         states.push({\n        //             id: id,\n        //             active: skybox.active\n        //         });\n        //     }\n        // }\n        // if (states.length > 0) {\n        //     (bookmark.plugins = bookmark.plugins || {}).skyboxes = states;\n        // }\n    }\n\n    /**\n     * @private\n     */\n    readBookmark(bookmark) {\n        this.clear();\n        // var plugins = bookmark.plugins;\n        // if (plugins) {\n        //     var states = plugins.skyboxes;\n        //     if (states) {\n        //         for (var i = 0, len = states.length; i < len; i++) {\n        //             var state = states[i];\n        //             this.createSkybox(state.id, state);\n        //         }\n        //     }\n        // }\n    }\n\n    /**\n     Creates a skybox.\n\n     @param {String} id Unique ID to assign to the skybox.\n     @param {Object} params Skybox configuration.\n     @param {Boolean} [params.active=true] Whether the skybox plane is initially active. Only skyboxes while this is true.\n     @returns {xeogl.Skybox} The new skybox.\n     */\n    createSkybox(id, params) {\n        if (this.viewer.scene.components[id]) {\n            this.error(\"Component with this ID already exists: \" + id);\n            return this;\n        }\n        var skybox = new Skybox(this.viewer.scene, {\n            id: id,\n            pos: params.pos,\n            dir: params.dir,\n            active: true || params.active\n        });\n        this.skyboxes[id] = skybox;\n        return skybox;\n    }\n\n    /**\n     Destroys a skybox.\n     @param id\n     */\n    destroySkybox(id) {\n        var skybox = this.skyboxes[id];\n        if (!skybox) {\n            this.error(\"Skybox not found: \" + id);\n            return;\n        }\n        skybox.destroy();\n    }\n\n    /**\n     Destroys all skyboxes.\n     */\n    clear() {\n        var ids = Object.keys(this.viewer.scene.skyboxes);\n        for (var i = 0, len = ids.length; i < len; i++) {\n            this.destroySkybox(ids[i]);\n        }\n    }\n\n    /**\n     * Destroys this plugin.\n     *\n     * Clears skyboxes from the Viewer first.\n     */\n    destroy() {\n        this.clear();\n        super.clear();\n    }\n}\n\nexport {SkyboxesPlugin}\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "SkyboxesPlugin",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js",
    "static": true,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js",
    "importStyle": "{SkyboxesPlugin}",
    "description": "A viewer plugin that manages skyboxes",
    "examples": [
      "\n// Create a Viewer\nconst viewer = new Viewer({\n    canvasId: \"myCanvas\"\n});\n\n// Add a GLTFModelsPlugin\nvar gltfModelsPlugin = new GLTFModelsPlugin(viewer, {\n    id: \"GLTFModels\"  // Default value\n});\n\n// Add a SkyboxesPlugin\nvar skyboxesPlugin = new SkyboxesPlugin(viewer, {\n    id: \"Skyboxes\" // Default value\n});\n\n// Load a glTF model\nconst model = gltfModelsPlugin.load({\n    id: \"myModel\",\n    src: \"./models/gltf/mygltfmodel.gltf\"\n});\n\n// Create three directional World-space lights. \"World\" means that they will appear as if part\n// of the world, instead of \"View\", where they move with the user's head.\n\nskyboxesPlugin.createLight({\n    id: \"keyLight\",\n    dir: [0.8, -0.6, -0.8],\n    color: [1.0, 0.3, 0.3],\n    intensity: 1.0,\n    space: \"world\"\n});\n\nskyboxesPlugin.createLight({\n    id: \"fillLight\",\n    dir: [-0.8, -0.4, -0.4],\n    color: [0.3, 1.0, 0.3],\n    intensity: 1.0,\n    space: \"world\"\n});\n\nskyboxesPlugin.createDirLight({\n    id: \"rimLight\",\n    dir: [0.2, -0.8, 0.8],\n    color: [0.6, 0.6, 0.6],\n    intensity: 1.0,\n    space: \"world\"\n});"
    ],
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SkyboxesPlugin"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/Plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "skyboxes",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#skyboxes",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "send",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#send",
    "access": "private",
    "description": "",
    "lineNumber": 69,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "writeBookmark",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#writeBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 80,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "readBookmark",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#readBookmark",
    "access": "private",
    "description": "",
    "lineNumber": 99,
    "ignore": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "createSkybox",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#createSkybox",
    "access": "public",
    "description": "Creates a skybox.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{xeogl.Skybox} The new skybox."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Unique ID to assign to the skybox."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Skybox configuration."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.active",
        "description": "Whether the skybox plane is initially active. Only skyboxes while this is true."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "xeogl.Skybox"
      ],
      "spread": false,
      "description": "The new skybox."
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "destroySkybox",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#destroySkybox",
    "access": "public",
    "description": "Destroys a skybox.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "clear",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#clear",
    "access": "public",
    "description": "Destroys all skyboxes.",
    "lineNumber": 152,
    "params": [],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/SkyboxesPlugin/SkyboxesPlugin.js~SkyboxesPlugin#destroy",
    "access": "public",
    "description": "Destroys this plugin.\n\nClears skyboxes from the Viewer first.",
    "lineNumber": 164,
    "params": [],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "content": "import {\n    Model,\n    Mesh,\n    Group,\n    Geometry,\n    LambertMaterial,\n    PhongMaterial,\n    MetallicMaterial,\n    SpecularMaterial,\n    _isString,\n    math\n} from \"../../../xeogl/xeogl.module.js\"\n\nimport {zipLib} from \"./zipjs/zip.js\";\nimport {zipExt} from \"./zipjs/zip-ext.js\";\n\nconst zip = zipLib.zip;\nzipExt(zip);\n\n/**\n * @private\n */\nclass XML3DModel extends Model {\n\n    init(cfg) {\n\n        super.init(cfg);\n\n        /**\n         * Supported 3DXML schema versions\n         * @property supportedSchemas\n         * @type {string[]}\n         */\n        this.supportedSchemas = [\"4.2\"];\n\n        this._defaultMaterial = new MetallicMaterial(this, {\n            baseColor: [1, 1, 1],\n            metallic: 0.6,\n            roughness: 0.6\n        });\n\n        // Material shared by all Meshes that have \"lines\" Geometry\n        // Overrides whatever material 3DXML would apply.\n        this._wireframeMaterial = new LambertMaterial(this, {\n            color: [0, 0, 0],\n            lineWidth: 2\n        });\n\n        this._ghostOpacity = 0.7;\n        this._src = null;\n        this._options = cfg;\n\n        /**\n         * Default viewpoint, containing eye, look and up vectors.\n         * Only defined if found in the 3DXML file.\n         * @property viewpoint\n         * @type {Float32Array}\n         */\n        this.viewpoint = null;\n\n        if (!cfg.workerScriptsPath) {\n            this.error(\"Config expected: workerScriptsPath\");\n            return\n        }\n        zip.workerScriptsPath = cfg.workerScriptsPath;\n\n        this.src = cfg.src;\n        this.ghostOpacity = 0.7;\n        this.displayEffect = cfg.displayEffect;\n    }\n\n    /**\n     Path to a 3DXML file.\n\n     You can set this to a new file path at any time (except while loading), which will cause the XML3D to load components from\n     the new file (after first destroying any components loaded from a previous file path).\n\n     Fires a {{#crossLink \"XML3D/loaded:event\"}}{{/crossLink}} event when the 3DXML has loaded.\n\n     @property src\n     @type String\n     */\n    set src(value) {\n        if (!value) {\n            return;\n        }\n        if (!_isString(value)) {\n            this.error(\"Value for 'src' should be a string\");\n            return;\n        }\n        if (value === this._src) { // Already loaded this XML3D\n\n            /**\n             Fired whenever this XML3D has finished loading components from the 3DXML file\n             specified by {{#crossLink \"XML3D/src:property\"}}{{/crossLink}}.\n             @event loaded\n             */\n            this.fire(\"loaded\", true, true);\n            return;\n        }\n        this.destroyAll();\n        this._displayEffect = \"solid\";\n        this._src = value;\n        XML3DModel.load(this, this._src, this._options); // Don't need completion callbacks (model fires \"loaded\" or \"error\")\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    /**\n     Display effect to render with: \"shaded\" |\"shadedWithEdges\" | \"hiddenLinesRemoved\" | \"hiddenLinesVisible\" | \"wireframe\".\n\n     @property displayEffect\n     @default \"shaded\"\n     @type String\n     */\n    set displayEffect(displayEffect) {\n        displayEffect = displayEffect || \"shaded\";\n        var edgeMaterial = this.scene.edgeMaterial;\n        var highlightMaterial = this.scene.highlightMaterial;\n        this._displayEffect = displayEffect;\n        var meshes = this.types[\"Mesh\"];\n        if (meshes) {\n            switch (this._displayEffect) {\n\n                case \"shaded\":\n                    for (var id in meshes) {\n                        var mesh = meshes[id];\n                        mesh.highlighted = false;\n                        mesh.edges = false;\n                        mesh.opacity = 1.0;\n                    }\n                    break;\n\n                case \"shadedWithEdges\":\n                    for (var id in meshes) {\n                        var mesh = meshes[id];\n                        mesh.highlighted = false;\n                        mesh.edges = true;\n                        mesh.opacity = 1.0;\n                    }\n                    edgeMaterial.edgeWidth = 2;\n                    break;\n\n                case \"hiddenLinesRemoved\": // TODO: Doesn't work well with transparent background - remove this mode?\n                    edgeMaterial.lineWidth = 1;\n                    for (var id in meshes) {\n                        var mesh = meshes[id];\n                        mesh.highlighted = true;\n                        mesh.edges = false;\n                        mesh.opacity = 1.0;\n                    }\n                    highlightMaterial.fillAlpha = 1.0;\n                    highlightMaterial.fillColor = [1, 1, 1];\n                    highlightMaterial.edgeAlpha = 1.0;\n                    highlightMaterial.edgeColor = [0, 0, 0];\n                    edgeMaterial.edgeWidth = 3;\n                    break;\n\n                case \"hiddenLinesVisible\":\n                    edgeMaterial.lineWidth = 1;\n                    for (var id in meshes) {\n                        var mesh = meshes[id];\n                        mesh.highlighted = false;\n                        mesh.edges = true;\n                        mesh.opacity = this._ghostOpacity;\n                    }\n                    edgeMaterial.edgeWidth = 1;\n                    break;\n\n                case \"wireframe\":\n                    edgeMaterial.lineWidth = 1;\n                    for (var id in meshes) {\n                        var mesh = meshes[id];\n                        for (var id in meshes) {\n                            var mesh = meshes[id];\n                            mesh.highlighted = false;\n                            mesh.edges = true;\n                            mesh.opacity = 0.0;\n                        }\n                    }\n                    edgeMaterial.edgeWidth = 1;\n                    break;\n            }\n        }\n    }\n\n    get displayEffect() {\n        return this._displayEffect;\n    }\n\n    /**\n     Opacity factor for the \"hiddenLinesVisible\" display effect.\n     @property ghostOpacity\n     @default 0.7\n     @type Number\n     */\n    set ghostOpacity(opacity) {\n        this._ghostOpacity = opacity;\n        if (this._displayEffect === \"hiddenLinesVisible\") {\n            var meshes = this.types[\"Mesh\"];\n            if (meshes) {\n                for (var id in meshes) {\n                    var mesh = meshes[id];\n                    mesh.opacity = this._ghostOpacity = opacity;\n                }\n            }\n        }\n    }\n\n    get ghostOpacity() {\n        return this._ghostOpacity;\n    }\n\n    /**\n     Color of edges for the \"shadedWithEdges\", \"hiddenLinesRemoved\",\n     \"hiddenLinesVisible\" and \"wireframe\" display effects.\n     @property edgeColor\n     @default [0,0,0]\n     @type Array\n     */\n    set edgeColor(edgeColor) {\n        this.scene.edgeMaterial.edgeColor = edgeColor;\n    }\n\n    get edgeColor() {\n        return this.scene.edgeMaterial.edgeColor;\n    }\n\n    destroy() {\n        this.destroyAll();\n        super.destroy();\n    }\n};\n\n/**\n * Loads 3DXML from a URL into a {{#crossLink \"Model\"}}{{/crossLink}}.\n *\n * @method load\n * @static\n * @param {Model} model Model to load into.\n * @param {String} src Path to 3DXML file.\n * @param {Object} options Loading options.\n * @param {Function} [ok] Completion callback.\n * @param {Function} [error] Error callback.\n */\nXML3DModel.load = function (model, src, options, ok, error) {\n\n    var spinner = model.scene.canvas.spinner;\n    spinner.processes++;\n\n    load3DXML(model, src, options, function () {\n            spinner.processes--;\n            if (ok) {\n                ok();\n            }\n            model.fire(\"loaded\", true, true);\n        },\n        function (msg) {\n            spinner.processes--;\n            model.error(msg);\n            if (error) {\n                error(msg);\n            }\n            /**\n             Fired whenever this XML3D fails to load the 3DXML file\n             specified by {{#crossLink \"XML3D/src:property\"}}{{/crossLink}}.\n             @event error\n             @param msg {String} Description of the error\n             */\n            model.fire(\"error\", msg);\n        },\n        function (err) {\n            console.log(\"Error, Will Robinson: \" + err);\n        });\n};\n\nvar load3DXML = (function () {\n    return function (model, src, options, ok, error) {\n        loadZIP(src, function (zip) { // OK\n                parse3DXML(zip, options, model, ok, error);\n            },\n            error);\n    };\n})();\n\nvar parse3DXML = (function () {\n\n    return function (zip, options, model, ok) {\n        var ctx = {\n            zip: zip,\n            edgeThreshold: 30, // Guess at degrees of normal deviation between adjacent tris below which we remove edge between them\n            materialWorkflow: options.materialWorkflow,\n            scene: model.scene,\n            model: model,\n            info: {\n                references: {}\n            },\n            materials: {}\n        };\n        model.scene.loading++; // Disables (re)compilation\n\n\n        // Now parse 3DXML\n\n        parseDocument(ctx, function () {\n            model.scene.loading--; // Re-enables (re)compilation\n            //console.log(\"3DXML parsed.\");\n            ok();\n        });\n    };\n\n    function parseDocument(ctx, ok) {\n        ctx.zip.getFile(\"Manifest.xml\", function (xmlDoc, json) {\n            var node = json;\n            var children = node.children;\n            for (var i = 0, len = children.length; i < len; i++) {\n                var child = children[i];\n                switch (child.type) {\n                    case \"Manifest\":\n                        parseManifest(ctx, child, ok);\n                        break;\n                }\n            }\n        });\n    }\n\n    function parseManifest(ctx, manifest, ok) {\n        var children = manifest.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Root\":\n                    var rootFileSrc = child.children[0];\n                    ctx.zip.getFile(rootFileSrc, function (xmlDoc, json) {\n                        parseRoot(ctx, json, ok);\n                    });\n                    break;\n            }\n        }\n    }\n\n    function parseRoot(ctx, node, ok) {\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Model_3dxml\":\n                    parseModel(ctx, child, ok);\n                    break;\n            }\n        }\n    }\n\n    function parseModel(ctx, node, ok) {\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Header\":\n                    parseHeader(ctx, child);\n                    break;\n                case \"ProductStructure\":\n                    parseProductStructure(ctx, child, ok);\n                    break;\n                case \"DefaultView\":\n                    parseDefaultView(ctx, child);\n                    break;\n            }\n        }\n    }\n\n    function parseHeader(ctx, node) {\n        var children = node.children;\n        var metaData = {};\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"SchemaVersion\":\n                    metaData.schemaVersion = child.children[0];\n                    if (!isSchemaVersionSupported(ctx, metaData.schemaVersion)) {\n                        ctx.model.error(\"Schema version not supported: \" + metaData.schemaVersion + \" - supported versions are: \" + ctx.model.supportedSchemas.join(\",\"));\n                    } else {\n                        //ctx.model.log(\"Parsing schema version: \" + metaData.schemaVersion);\n                    }\n                    break;\n                case \"Title\":\n                    metaData.title = child.children[0];\n                    break;\n                case \"Author\":\n                    metaData.author = child.children[0];\n                    break;\n                case \"Created\":\n                    metaData.created = child.children[0];\n                    break;\n            }\n        }\n        ctx.model.meta = metaData;\n    }\n\n    function isSchemaVersionSupported(ctx, schemaVersion) {\n        var supportedSchemas = ctx.model.supportedSchemas;\n        for (var i = 0, len = supportedSchemas.length; i < len; i++) {\n            if (schemaVersion === supportedSchemas[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function parseProductStructure(ctx, productStructureNode, ok) {\n\n        parseReferenceReps(ctx, productStructureNode, function (referenceReps) {\n\n            //----------------------------------------------------------------------------------\n            // Parse out an intermediate scene DAG representation, that we can then\n            // recursive descend through to build a xeogl Object hierarchy.\n            //----------------------------------------------------------------------------------\n\n            var children = productStructureNode.children;\n\n            var reference3Ds = {};\n            var instanceReps = {};\n            var instance3Ds = {};\n\n            var rootNode;\n            var nodes = {};\n\n            // Map all the elements\n\n            for (var i = 0, len = children.length; i < len; i++) {\n                var child = children[i];\n                switch (child.type) {\n\n                    case \"Reference3D\":\n                        reference3Ds[child.id] = {\n                            type: \"Reference3D\",\n                            id: child.id,\n                            name: child.name,\n                            instance3Ds: {},\n                            instanceReps: {}\n                        };\n                        break;\n\n                    case \"InstanceRep\":\n                        var isAggregatedBy;\n                        var isInstanceOf;\n                        var relativeMatrix;\n                        for (var j = 0, lenj = child.children.length; j < lenj; j++) {\n                            var child2 = child.children[j];\n                            switch (child2.type) {\n                                case \"IsAggregatedBy\":\n                                    isAggregatedBy = child2.children[0];\n                                    break;\n                                case \"IsInstanceOf\":\n                                    isInstanceOf = child2.children[0];\n                                    break;\n                            }\n                        }\n                        instanceReps[child.id] = {\n                            type: \"InstanceRep\",\n                            id: child.id,\n                            isAggregatedBy: isAggregatedBy,\n                            isInstanceOf: isInstanceOf,\n                            referenceReps: {}\n                        };\n                        break;\n\n                    case \"Instance3D\":\n                        var isAggregatedBy;\n                        var isInstanceOf;\n                        var relativeMatrix;\n                        for (var j = 0, lenj = child.children.length; j < lenj; j++) {\n                            var child2 = child.children[j];\n                            switch (child2.type) {\n                                case \"IsAggregatedBy\":\n                                    isAggregatedBy = child2.children[0];\n                                    break;\n                                case \"IsInstanceOf\":\n                                    isInstanceOf = child2.children[0];\n                                    break;\n                                case \"RelativeMatrix\":\n                                    relativeMatrix = child2.children[0];\n                                    break;\n                            }\n                        }\n                        instance3Ds[child.id] = {\n                            type: \"Instance3D\",\n                            id: child.id,\n                            isAggregatedBy: isAggregatedBy,\n                            isInstanceOf: isInstanceOf,\n                            relativeMatrix: relativeMatrix,\n                            reference3Ds: {}\n                        };\n                        break;\n                }\n            }\n\n            // Connect Reference3Ds to the Instance3Ds they aggregate\n\n            for (var id in instance3Ds) {\n                var instance3D = instance3Ds[id];\n                var reference3D = reference3Ds[instance3D.isAggregatedBy];\n                if (reference3D) {\n                    reference3D.instance3Ds[instance3D.id] = instance3D;\n                } else {\n                    alert(\"foo\")\n                }\n            }\n\n            // Connect Instance3Ds to the Reference3Ds they instantiate\n\n            for (var id in instance3Ds) {\n                var instance3D = instance3Ds[id];\n                var reference3D = reference3Ds[instance3D.isInstanceOf];\n                instance3D.reference3Ds[reference3D.id] = reference3D;\n                reference3D.instance3D = instance3D;\n            }\n\n            // Connect InstanceReps to the ReferenceReps they instantiate\n\n            for (var id in instanceReps) {\n                var instanceRep = instanceReps[id];\n                var referenceRep = referenceReps[instanceRep.isInstanceOf];\n                if (referenceRep) {\n                    instanceRep.referenceReps[referenceRep.id] = referenceRep;\n                }\n            }\n\n            // Connect Reference3Ds to the InstanceReps they aggregate\n\n            for (var id in instanceReps) {\n                var instanceRep = instanceReps[id];\n                var reference3D = reference3Ds[instanceRep.isAggregatedBy];\n                if (reference3D) {\n                    reference3D.instanceReps[instanceRep.id] = instanceRep;\n                }\n            }\n\n            function parseReference3D(ctx, reference3D, group) {\n                //ctx.model.log(\"parseReference3D( \" + reference3D.id + \" )\");\n                for (var id in reference3D.instance3Ds) {\n                    parseInstance3D(ctx, reference3D.instance3Ds[id], group);\n                }\n                for (var id in reference3D.instanceReps) {\n                    parseInstanceRep(ctx, reference3D.instanceReps[id], group);\n                }\n            }\n\n            function parseInstance3D(ctx, instance3D, group) {\n                //ctx.model.log(\"parseInstance3D( \" + instance3D.id + \" )\");\n\n                if (instance3D.relativeMatrix) {\n                    var matrix = parseFloatArray(instance3D.relativeMatrix, 12);\n                    var translate = [matrix[9], matrix[10], matrix[11]];\n                    var mat3 = matrix.slice(0, 9); // Rotation matrix\n                    var mat4 = math.mat3ToMat4(mat3, math.identityMat4()); // Convert rotation matrix to 4x4\n                    var childGroup = new Group(ctx.model.scene, {\n                        position: translate\n                    });\n                    if (group) {\n                        group.addChild(childGroup, true);\n                    } else {\n                        ctx.model.addChild(childGroup, true);\n                    }\n                    group = childGroup;\n                    childGroup = new Group(ctx.model.scene, {\n                        matrix: mat4\n                    });\n                    group.addChild(childGroup, true);\n                    group = childGroup;\n                } else {\n                    var childGroup = new Group(ctx.model.scene, {});\n                    if (group) {\n                        group.addChild(childGroup, true);\n                    } else {\n                        ctx.model.addChild(childGroup, true);\n                    }\n                    group = childGroup;\n                }\n                for (var id in instance3D.reference3Ds) {\n                    parseReference3D(ctx, instance3D.reference3Ds[id], group);\n                }\n            }\n\n            function parseInstanceRep(ctx, instanceRep, group) {\n                //ctx.model.log(\"parseInstanceRep( \" + instanceRep.id + \" )\");\n                if (instanceRep.referenceReps) {\n                    for (var id in instanceRep.referenceReps) {\n                        var referenceRep = instanceRep.referenceReps[id];\n                        for (var id2 in referenceRep) {\n                            if (id2 === \"id\") {\n                                continue; // HACK\n                            }\n                            var meshCfg = referenceRep[id2];\n                            var lines = meshCfg.geometry.primitive === \"lines\";\n                            var material = lines ? ctx.model._wireframeMaterial : (meshCfg.materialId ? ctx.materials[meshCfg.materialId] : null);\n                            var colorize = meshCfg.color;\n                            var mesh = new Mesh(ctx.model.scene, {\n                                geometry: meshCfg.geometry,\n                                material: material || ctx.model._defaultMaterial,\n                                colorize: colorize,\n                                backfaces: false\n                            });\n                            ctx.model._addComponent(mesh);\n                            if (group) {\n                                group.addChild(mesh, true);\n                            } else {\n                                ctx.model.addChild(mesh, true);\n                            }\n                            mesh.colorize = colorize; // HACK: Mesh has inherited model's colorize state, so we need to restore it (we'd better not modify colorize on the model).\n                        }\n                    }\n                }\n            }\n\n            // Find the root Reference3D\n\n            for (var id in reference3Ds) {\n                var reference3D = reference3Ds[id];\n                if (!reference3D.instance3D) {\n                    parseReference3D(ctx, reference3D, null); // HACK: Assuming that root has id == \"1\"\n                    ok();\n                    return;\n                }\n            }\n\n            alert(\"No root Reference3D element found in this model - can't load.\");\n\n            ok();\n        });\n    }\n\n    function parseIntArray(str) {\n        var parts = str.trim().split(\" \");\n        var result = new Int32Array(parts.length);\n        for (var i = 0; i < parts.length; i++) {\n            result[i] = parseInt(parts[i]);\n        }\n        return result;\n    }\n\n    function parseReferenceReps(ctx, node, ok) {\n        var referenceReps = {};\n        var children = node.children;\n        var numToLoad = 0;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            if (child.type === \"ReferenceRep\") {\n                numToLoad++;\n            }\n        }\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"ReferenceRep\":\n                    if (child.associatedFile) {\n                        var src = stripURN(child.associatedFile);\n                        (function () {\n                            var childId = child.id;\n                            ctx.zip.getFile(src, function (xmlDoc, json) {\n\n                                    var materialIds = xmlDoc.getElementsByTagName(\"MaterialId\");\n\n                                    loadCATMaterialRefDocuments(ctx, materialIds, function () {\n\n                                        // ctx.model.log(\"reference loaded: \" + src);\n                                        var referenceRep = {\n                                            id: childId\n                                        };\n                                        parse3DRepDocument(ctx, json, referenceRep);\n                                        referenceReps[childId] = referenceRep;\n                                        if (--numToLoad === 0) {\n                                            ok(referenceReps);\n                                        }\n                                    });\n                                },\n                                function (error) {\n                                    // TODO:\n                                });\n                        })();\n                    }\n                    break;\n            }\n        }\n    }\n\n\n    function parseDefaultView(ctx, node) {\n        // ctx.model.log(\"parseDefaultView\");\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Viewpoint\":\n                    var children2 = child.children;\n                    ctx.model.viewpoint = {};\n                    for (var i2 = 0, len2 = children2.length; i2 < len2; i2++) {\n                        var child2 = children2[i];\n                        switch (child2.type) {\n                            case \"Position\":\n                                ctx.model.viewpoint.eye = parseFloatArray(child2.children[0], 3);\n                                break;\n                            case \"Sight\":\n                                ctx.model.viewpoint.look = parseFloatArray(child2.children[0], 3);\n                                break;\n                            case \"Up\":\n                                ctx.model.viewpoint.up = parseFloatArray(child2.children[0], 3);\n                                break;\n                        }\n                    }\n                    break;\n                case \"DefaultViewProperty\":\n                    break;\n            }\n        }\n    }\n\n    function parse3DRepDocument(ctx, node, result) {\n        // ctx.model.log(\"parse3DRepDocument\");\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"XMLRepresentation\":\n                    parseXMLRepresentation(ctx, child, result);\n                    break;\n            }\n        }\n    }\n\n    function parseXMLRepresentation(ctx, node, result) {\n        // ctx.model.log(\"parseXMLRepresentation\");\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Root\":\n                    parse3DRepRoot(ctx, child, result);\n                    break;\n            }\n        }\n    }\n\n    function parse3DRepRoot(ctx, node, result) {\n        // ctx.model.log(\"parse3DRepRoot\");\n        switch (node[\"xsi:type\"]) {\n            case \"BagRepType\":\n                break;\n            case \"PolygonalRepType\":\n                break;\n        }\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Rep\":\n                    parse3DRepRep(ctx, child, result);\n                    break;\n            }\n        }\n    }\n\n    function parse3DRepRep(ctx, node, result) {\n        // ctx.model.log(\"parse3DRep\");\n        switch (node[\"xsi:type\"]) {\n            case \"BagRepType\":\n                break;\n            case \"PolygonalRepType\":\n                break;\n        }\n        var meshesResult = {\n            edgeThreshold: ctx.edgeThreshold || 30,\n            combined: true,\n            quantized: true\n        };\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Rep\":\n                    parse3DRepRep(ctx, child, result);\n                    break;\n                case \"Edges\":\n\n                    //----------------------------------------------------------------------\n                    // NOTE: Ignoring edges because we auto-generate our own using xeogl\n                    //----------------------------------------------------------------------\n\n                    // meshesResult.primitive = \"lines\";\n                    // parseEdges(ctx, child, meshesResult);\n                    break;\n                case \"Faces\":\n                    meshesResult.primitive = \"triangles\";\n                    parseFaces(ctx, child, meshesResult);\n                    break;\n                case \"VertexBuffer\":\n                    parseVertexBuffer(ctx, child, meshesResult);\n                    break;\n                case \"SurfaceAttributes\":\n                    parseSurfaceAttributes(ctx, child, meshesResult);\n                    break;\n            }\n        }\n        if (meshesResult.positions) {\n            var geometry = new Geometry(ctx.model.scene, meshesResult);\n            ctx.model._addComponent(geometry);\n            result[geometry.id] = {\n                geometry: geometry,\n                color: meshesResult.color || [1.0, 1.0, 1.0, 1.0],\n                materialId: meshesResult.materialId\n            };\n        }\n    }\n\n    function parseEdges(ctx, node, result) {\n        // ctx.model.log(\"parseEdges\");\n        result.positions = [];\n        result.indices = [];\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Polyline\":\n                    parsePolyline(ctx, child, result);\n                    break;\n            }\n        }\n    }\n\n    function parsePolyline(ctx, node, result) {\n        //ctx.model.log(\"parsePolyline\");\n        var vertices = node.vertices;\n        if (vertices) {\n            var positions = parseFloatArray(vertices, 3);\n            if (positions.length > 0) {\n                var positionsOffset = result.positions.length / 3;\n                for (var i = 0, len = positions.length; i < len; i++) {\n                    result.positions.push(positions[i]);\n                }\n                for (var i = 0, len = (positions.length / 3) - 1; i < len; i++) {\n                    result.indices.push(positionsOffset + i);\n                    result.indices.push(positionsOffset + i + 1);\n                }\n            }\n        }\n    }\n\n    function parseFaces(ctx, node, result) {\n        // ctx.model.log(\"parseFaces\");\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Face\":\n                    parseFace(ctx, child, result);\n                    break;\n            }\n        }\n    }\n\n    function parseFace(ctx, node, result) {\n        // ctx.model.log(\"parseFace\");\n\n        var strips = node.strips;\n        if (strips) {\n\n            // Triangle strips\n\n            var arrays = parseIntArrays(strips);\n            if (arrays.length > 0) {\n                result.primitive = \"triangles\";\n                var indices = [];\n                for (var i = 0, len = arrays.length; i < len; i++) {\n                    var array = convertTriangleStrip(arrays[i]);\n                    for (var j = 0, lenj = array.length; j < lenj; j++) {\n                        indices.push(array[j]);\n                    }\n                }\n                result.indices = indices; // TODO\n            }\n        } else {\n\n            // Triangle meshes\n\n            var triangles = node.triangles;\n            if (triangles) {\n                result.primitive = \"triangles\";\n                result.indices = parseIntArray(triangles);\n            }\n        }\n\n        // Material\n\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"SurfaceAttributes\":\n                    parseSurfaceAttributes(ctx, child, result);\n                    break;\n            }\n        }\n    }\n\n    function convertTriangleStrip(indices) {\n        var ccw = false;\n        var indices2 = [];\n        for (var i = 0, len = indices.length; i < len - 2; i++) {\n            if (ccw) {\n                if (i & 1) { //\n                    indices2.push(indices[i]);\n                    indices2.push(indices[i + 1]);\n                    indices2.push(indices[i + 2]);\n                } else {\n                    indices2.push(indices[i]);\n                    indices2.push(indices[i + 2]);\n                    indices2.push(indices[i + 1]);\n                }\n            } else {\n                if (i & 1) { //\n                    indices2.push(indices[i]);\n                    indices2.push(indices[i + 2]);\n                    indices2.push(indices[i + 1]);\n                } else {\n                    indices2.push(indices[i]);\n                    indices2.push(indices[i + 1]);\n                    indices2.push(indices[i + 2]);\n                }\n            }\n        }\n        return indices2;\n    }\n\n    function parseVertexBuffer(ctx, node, result) {\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Positions\":\n                    result.positions = parseFloatArray(child.children[0], 3);\n                    break;\n                case \"Normals\":\n                    result.normals = parseFloatArray(child.children[0], 3);\n                    break;\n                case \"TextureCoordinates\": // TODO: Support dimension and channel?\n                    result.uv = parseFloatArray(child.children[0], 2);\n                    break;\n            }\n        }\n    }\n\n    function parseIntArrays(str) {\n        var coordStrings = str.split(\",\");\n        var array = [];\n        for (var i = 0, len = coordStrings.length; i < len; i++) {\n            var coordStr = coordStrings[i].trim();\n            if (coordStr.length > 0) {\n                var elemStrings = coordStr.trim().split(\" \");\n                var arr = new Int16Array(elemStrings.length);\n                var arrIdx = 0;\n                for (var j = 0, lenj = elemStrings.length; j < lenj; j++) {\n                    if (elemStrings[j] !== \"\") {\n                        arr[arrIdx++] = parseInt(elemStrings[j]);\n                    }\n                }\n                array.push(arr);\n            }\n        }\n        return array;\n    }\n\n    function parseFloatArray(str, numElems) {\n        str = str.split(\",\");\n        var arr = new Float32Array(str.length * numElems);\n        var arrIdx = 0;\n        for (var i = 0, len = str.length; i < len; i++) {\n            var value = str[i];\n            value = value.split(\" \");\n            for (var j = 0, lenj = value.length; j < lenj; j++) {\n                if (value[j] !== \"\") {\n                    arr[arrIdx++] = parseFloat(value[j]);\n                }\n            }\n        }\n        return arr;\n    }\n\n    function parseIntArray(str) {\n        str = str.trim().split(\" \");\n        var arr = new Int32Array(str.length);\n        var arrIdx = 0;\n        for (var i = 0, len = str.length; i < len; i++) {\n            var value = str[i];\n            arr[i] = parseInt(value);\n        }\n        return arr;\n    }\n\n    function parseSurfaceAttributes(ctx, node, result) {\n        result.color = [1, 1, 1, 1];\n        var children = node.children;\n        for (var i = 0, len = children.length; i < len; i++) {\n            var child = children[i];\n            switch (child.type) {\n                case \"Color\":\n                    result.color[0] = child.red;\n                    result.color[1] = child.green;\n                    result.color[2] = child.blue;\n                    result.color[3] = child.alpha;\n                    break;\n                case \"MaterialApplication\":\n                    var children2 = child.children;\n                    for (var j = 0, lenj = children2.length; j < lenj; j++) {\n                        var child2 = children2[j];\n                        switch (child2.type) {\n                            case \"MaterialId\":\n                                var materialId = getIDFromURI(child2.id);\n                                var material = ctx.materials[materialId];\n                                if (!material) {\n                                    ctx.model.error(\"material  not found: \" + materialId);\n                                }\n                                result.materialId = materialId;\n                                break;\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n})();\n\n//----------------------------------------------------------------------------------------------------\n// Materials\n//----------------------------------------------------------------------------------------------------\n\nfunction loadCATMaterialRefDocuments(ctx, materialIds, ok) {\n    var loaded = {};\n\n    function load(i, done) {\n        if (i >= materialIds.length) {\n            ok();\n            return;\n        }\n        var materialId = materialIds[i];\n        var src = materialId.id;\n        var colonIdx = src.lastIndexOf(\":\");\n        if (colonIdx > 0) {\n            src = src.substring(colonIdx + 1);\n        }\n        var hashIdx = src.lastIndexOf(\"#\");\n        if (hashIdx > 0) {\n            src = src.substring(0, hashIdx);\n        }\n        if (!loaded[src]) {\n            loadCATMaterialRefDocument(ctx, src, function () {\n                loaded[src] = true;\n                load(i + 1, done);\n            });\n        } else {\n            load(i + 1, done);\n        }\n    }\n\n    load(0, ok);\n}\n\nfunction loadCATMaterialRefDocument(ctx, src, ok) { // Loads CATMaterialRef.3dxml\n    ctx.zip.getFile(src, function (xmlDoc, json) {\n        parseCATMaterialRefDocument(ctx, json, ok);\n    });\n}\n\nfunction parseCATMaterialRefDocument(ctx, node, ok) { // Parse CATMaterialRef.3dxml\n    // ctx.model.log(\"parseCATMaterialRefDocument\");\n    var children = node.children;\n    var child;\n    for (var i = 0, len = children.length; i < len; i++) {\n        child = children[i];\n        if (child.type === \"Model_3dxml\") {\n            parseModel_3dxml(ctx, child, ok);\n        }\n    }\n}\n\nfunction parseModel_3dxml(ctx, node, ok) { // Parse CATMaterialRef.3dxml\n    // ctx.model.log(\"parseModel_3dxml\");\n    var children = node.children;\n    var child;\n    for (var i = 0, len = children.length; i < len; i++) {\n        child = children[i];\n        if (child.type === \"CATMaterialRef\") {\n            parseCATMaterialRef(ctx, child, ok);\n        }\n    }\n}\n\nfunction parseCATMaterialRef(ctx, node, ok) {\n\n    // ctx.model.log(\"parseCATMaterialRef\");\n\n    var domainToReferenceMap = {};\n    var materials = {};\n\n    var result = {};\n    var children = node.children;\n    var child;\n    var numToLoad = 0;\n\n    for (var j = 0, lenj = children.length; j < lenj; j++) {\n        var child2 = children[j];\n        switch (child2.type) {\n            case \"MaterialDomainInstance\":\n                var isAggregatedBy;\n                var isInstanceOf;\n                for (var k = 0, lenk = child2.children.length; k < lenk; k++) {\n                    var child3 = child2.children[k];\n                    switch (child3.type) {\n                        case \"IsAggregatedBy\":\n                            isAggregatedBy = child3.children[0];\n                            break;\n                        case \"IsInstanceOf\":\n                            isInstanceOf = child3.children[0];\n                            break;\n                    }\n                }\n                domainToReferenceMap[isInstanceOf] = isAggregatedBy;\n                break;\n        }\n    }\n\n    for (var j = 0, lenj = children.length; j < lenj; j++) {\n        var child2 = children[j];\n        switch (child2.type) {\n            case \"MaterialDomain\":\n                numToLoad++;\n                break;\n        }\n    }\n\n    // Now load them\n\n    for (var j = 0, lenj = children.length; j < lenj; j++) {\n        var child2 = children[j];\n        switch (child2.type) {\n            case \"MaterialDomain\":\n                if (child2.associatedFile) {\n                    (function () {\n                        var childId = child2.id;\n                        var src = stripURN(child2.associatedFile);\n                        ctx.zip.getFile(src, function (xmlDoc, json) {\n                                // ctx.model.log(\"Material def loaded: \" + src);\n                                ctx.materials[domainToReferenceMap[childId]] = parseMaterialDefDocument(ctx, json);\n\n                                if (--numToLoad === 0) {\n                                    //       console.log(\"All ReferenceReps loaded.\");\n                                    ok();\n                                }\n                            },\n                            function (error) {\n                                // TODO:\n                            });\n                    })();\n                }\n                break;\n        }\n    }\n}\n\nfunction parseMaterialDefDocument(ctx, node) {\n    // ctx.model.log(\"parseMaterialDefDocumentOsm\");\n    var children = node.children;\n    for (var i = 0, len = children.length; i < len; i++) {\n        var child = children[i];\n        switch (child.type) {\n            case \"Osm\":\n                return parseMaterialDefDocumentOsm(ctx, child);\n                break;\n        }\n    }\n}\n\nfunction parseMaterialDefDocumentOsm(ctx, node) {\n    // ctx.model.log(\"parseMaterialDefDocument\");\n    var children = node.children;\n    for (var i = 0, len = children.length; i < len; i++) {\n        var child = children[i];\n        // ctx.model.log(\"parseMaterialDefDocument: child.type == \" + child.type);\n        switch (child.type) {\n            case \"RenderingRootFeature\":\n                //..\n                break;\n            case \"Feature\":\n\n                if (child.Alias === \"RenderingFeature\") {\n                    // Parse the coefficients, then parse the colors, scaling those by their coefficients.\n\n                    var coeffs = {};\n                    var materialCfg = {};\n                    var children2 = child.children;\n                    var j;\n                    var lenj;\n                    var child2;\n                    for (j = 0, lenj = children2.length; j < lenj; j++) {\n                        child2 = children2[j];\n                        switch (child2.Name) {\n                            case \"AmbientCoef\":\n                                coeffs.ambient = parseFloat(child2.Value);\n                                break;\n                            case \"DiffuseCoef\":\n                                coeffs.diffuse = parseFloat(child2.Value);\n                                break;\n                            case \"EmissiveCoef\":\n                                coeffs.emissive = parseFloat(child2.Value);\n                                break;\n                            case \"SpecularExponent\":\n                                coeffs.specular = parseFloat(child2.Value);\n                                break;\n                        }\n                    }\n                    for (j = 0, lenj = children2.length; j < lenj; j++) {\n                        child2 = children2[j];\n                        switch (child2.Name) {\n                            case \"AmbientColor\":\n                                materialCfg.ambient = parseRGB(child2.Value, coeffs.ambient);\n                                break;\n                            case \"DiffuseColor\":\n                                materialCfg.diffuse = parseRGB(child2.Value, coeffs.diffuse);\n                                break;\n                            case \"EmissiveColor\":\n                                materialCfg.emissive = parseRGB(child2.Value, coeffs.emissive);\n                                break;\n                            case \"SpecularColor\":\n                                materialCfg.specular = parseRGB(child2.Value, coeffs.specular);\n                                break;\n                            case \"Transparency\":\n                                var alpha = 1.0 - parseFloat(child2.Value); // GOTCHA: Degree of transparency, not degree of opacity\n                                if (alpha < 1.0) {\n                                    materialCfg.alpha = alpha;\n                                    materialCfg.alphaMode = \"blend\";\n                                }\n                                break;\n                        }\n                    }\n\n                    var material;\n\n                    switch (ctx.materialWorkflow) {\n                        case \"MetallicMaterial\":\n                            material = new MetallicMaterial(ctx.model.scene, {\n                                baseColor: materialCfg.diffuse,\n                                metallic: 0.7,\n                                roughness: 0.5,\n                                emissive: materialCfg.emissive,\n                                alpha: materialCfg.alpha,\n                                alphaMode: materialCfg.alphaMode\n                            });\n                            break;\n\n                        case \"SpecularMaterial\":\n                            material = new SpecularMaterial(ctx.model.scene, {\n                                diffuse: materialCfg.diffuse,\n                                specular: materialCfg.specular,\n                                glossiness: 0.5,\n                                emissive: materialCfg.emissive,\n                                alpha: materialCfg.alpha,\n                                alphaMode: materialCfg.alphaMode\n                            });\n                            break;\n\n                        default:\n                            material = new PhongMaterial(ctx.model.scene, {\n                                reflectivity: 0.5,\n                                ambient: materialCfg.ambient,\n                                diffuse: materialCfg.diffuse,\n                                specular: materialCfg.specular,\n                                // shininess: node.shine,\n                                emissive: materialCfg.emissive,\n                                alphaMode: materialCfg.alphaMode,\n                                alpha: node.alpha\n                            });\n                    }\n\n                    ctx.model._addComponent(material);\n                    return material;\n                }\n\n                break;\n        }\n    }\n}\n\nfunction parseRGB(str, coeff) {\n    coeff = (coeff !== undefined) ? coeff : 0.5;\n    var openBracketIndex = str.indexOf(\"[\");\n    var closeBracketIndex = str.indexOf(\"]\");\n    str = str.substring(openBracketIndex + 1, closeBracketIndex - openBracketIndex);\n    str = str.split(\",\");\n    var arr = new Float32Array(str.length);\n    var arrIdx = 0;\n    for (var i = 0, len = str.length; i < len; i++) {\n        var value = str[i];\n        value = value.trim().split(\" \");\n        for (var j = 0, lenj = value.length; j < lenj; j++) {\n            if (value[j] !== \"\") {\n                arr[arrIdx++] = parseFloat(value[j]) * coeff;\n            }\n        }\n    }\n    return arr;\n}\n\n\n//----------------------------------------------------------------------------------------------------\n\n/**\n * Wraps zip.js to provide an in-memory ZIP archive representing the 3DXML file bundle.\n *\n * Allows us to pluck each file from it as XML and JSON.\n *\n * @constructor\n */\nvar ZIP = function () {\n\n    var reader;\n    var files = {};\n\n    /**\n     Loads this ZIP\n\n     @param src\n     @param ok\n     @param error\n     */\n    this.load = function (src, ok, error) {\n        var self = this;\n        zip.createReader(new zip.HttpReader(src), function (reader) {\n            reader.getEntries(function (entries) {\n                if (entries.length > 0) {\n                    for (var i = 0, len = entries.length; i < len; i++) {\n                        var entry = entries[i];\n                        files[entry.filename] = entry;\n                    }\n                }\n                ok();\n            });\n        }, error);\n    };\n\n    /**\n     Gets a file as XML and JSON from this ZIP\n     @param src\n     @param ok\n     @param error\n     */\n    this.getFile = function (src, ok, error) {\n        var entry = files[src];\n        if (!entry) {\n            var errMsg = \"ZIP entry not found: \" + src;\n            console.error(errMsg);\n            if (error) {\n                error(errMsg);\n            }\n            return;\n        }\n        entry.getData(new zip.TextWriter(), function (text) {\n\n            // Parse to XML\n            var parser = new DOMParser();\n            var xmlDoc = parser.parseFromString(text, \"text/xml\");\n\n            // Parse to JSON\n            var json = xmlToJSON(xmlDoc, {});\n\n            ok(xmlDoc, json);\n        });\n    };\n\n    function xmlToJSON(node, attributeRenamer) {\n        if (node.nodeType === node.TEXT_NODE) {\n            var v = node.nodeValue;\n            if (v.match(/^\\s+$/) === null) {\n                return v;\n            }\n        } else if (node.nodeType === node.ELEMENT_NODE ||\n            node.nodeType === node.DOCUMENT_NODE) {\n            var json = {type: node.nodeName, children: []};\n            if (node.nodeType === node.ELEMENT_NODE) {\n                for (var j = 0; j < node.attributes.length; j++) {\n                    var attribute = node.attributes[j];\n                    var nm = attributeRenamer[attribute.nodeName] || attribute.nodeName;\n                    json[nm] = attribute.nodeValue;\n                }\n            }\n            for (var i = 0; i < node.childNodes.length; i++) {\n                var item = node.childNodes[i];\n                var j = xmlToJSON(item, attributeRenamer);\n                if (j) json.children.push(j);\n            }\n            return json;\n        }\n    }\n\n    /**\n     Disposes of this ZIP\n     */\n    this.destroy = function () {\n        reader.close(function () {\n            // onclose callback\n        });\n    };\n};\n\nfunction loadZIP(src, ok, err) {\n    var zip = new ZIP();\n    zip.load(src, function () {\n        ok(zip);\n    }, function (errMsg) {\n        err(\"Error loading ZIP archive: \" + errMsg);\n    })\n}\n\nfunction stripURN(str) {\n    var subStr = \"urn:3DXML:\";\n    return (str.indexOf(subStr) === 0) ? str.substring(subStr.length) : str;\n}\n\n\nfunction getIDFromURI(str) {\n    var hashIdx = str.lastIndexOf(\"#\");\n    return hashIdx != -1 ? str.substring(hashIdx + 1) : str;\n}\n\nexport {XML3DModel}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "variable",
    "name": "zip",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~zip",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "load",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~load",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": "Loads 3DXML from a URL into a {{#crossLink \"Model\"}}{{/crossLink}}.",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "load"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "Model to load into."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Path to 3DXML file."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Loading options."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "ok",
        "description": "Completion callback."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "error",
        "description": "Error callback."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 332,
    "kind": "variable",
    "name": "load3DXML",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~load3DXML",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 333,
    "kind": "variable",
    "name": "parse3DXML",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~parse3DXML",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 334,
    "kind": "function",
    "name": "loadCATMaterialRefDocuments",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~loadCATMaterialRefDocuments",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1038,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "materialIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 335,
    "kind": "function",
    "name": "loadCATMaterialRefDocument",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~loadCATMaterialRefDocument",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1069,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "src",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 336,
    "kind": "function",
    "name": "parseCATMaterialRefDocument",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~parseCATMaterialRefDocument",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1075,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 337,
    "kind": "function",
    "name": "parseModel_3dxml",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~parseModel_3dxml",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1087,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 338,
    "kind": "function",
    "name": "parseCATMaterialRef",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~parseCATMaterialRef",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1099,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "function",
    "name": "parseMaterialDefDocument",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~parseMaterialDefDocument",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1171,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 340,
    "kind": "function",
    "name": "parseMaterialDefDocumentOsm",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~parseMaterialDefDocumentOsm",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1184,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 341,
    "kind": "function",
    "name": "parseRGB",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~parseRGB",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1294,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "coeff",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "function",
    "name": "ZIP",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~ZIP",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": "Wraps zip.js to provide an in-memory ZIP archive representing the 3DXML file bundle.\n\nAllows us to pluck each file from it as XML and JSON.",
    "lineNumber": 1324,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 343,
    "kind": "function",
    "name": "loadZIP",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~loadZIP",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1415,
    "undocument": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      },
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "function",
    "name": "stripURN",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~stripURN",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1424,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "function",
    "name": "getIDFromURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~getIDFromURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1430,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 346,
    "kind": "class",
    "name": "XML3DModel",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModel.js",
    "importStyle": "{XML3DModel}",
    "description": "",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "xeogl/xeogl.module.js~Model"
    ],
    "ignore": true
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "init",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#init",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "cfg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "supportedSchemas",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#supportedSchemas",
    "access": "public",
    "description": "Supported 3DXML schema versions",
    "lineNumber": 34,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "supportedSchemas",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "_defaultMaterial",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#_defaultMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "_wireframeMaterial",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#_wireframeMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "_ghostOpacity",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#_ghostOpacity",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "_src",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#_src",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "_options",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#_options",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "viewpoint",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#viewpoint",
    "access": "public",
    "description": "Default viewpoint, containing eye, look and up vectors.\nOnly defined if found in the 3DXML file.",
    "lineNumber": 59,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewpoint",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 358,
    "kind": "set",
    "name": "src",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#src",
    "access": "public",
    "description": "Path to a 3DXML file.\n\nYou can set this to a new file path at any time (except while loading), which will cause the XML3D to load components from\nthe new file (after first destroying any components loaded from a previous file path).\n\nFires a {{#crossLink \"XML3D/loaded:event\"}}{{/crossLink}} event when the 3DXML has loaded.",
    "lineNumber": 83,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "_displayEffect",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#_displayEffect",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "get",
    "name": "src",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#src",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "set",
    "name": "displayEffect",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#displayEffect",
    "access": "public",
    "description": "Display effect to render with: \"shaded\" |\"shadedWithEdges\" | \"hiddenLinesRemoved\" | \"hiddenLinesVisible\" | \"wireframe\".",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"shaded\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "displayEffect",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 364,
    "kind": "get",
    "name": "displayEffect",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#displayEffect",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "set",
    "name": "ghostOpacity",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#ghostOpacity",
    "access": "public",
    "description": "Opacity factor for the \"hiddenLinesVisible\" display effect.",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.7"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostOpacity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 367,
    "kind": "get",
    "name": "ghostOpacity",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#ghostOpacity",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "set",
    "name": "edgeColor",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#edgeColor",
    "access": "public",
    "description": "Color of edges for the \"shadedWithEdges\", \"hiddenLinesRemoved\",\n\"hiddenLinesVisible\" and \"wireframe\" display effects.",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "get",
    "name": "edgeColor",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#edgeColor",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "destroy",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModel.js~XML3DModel#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 371,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js",
    "content": "import {ModelsPlugin} from \"./../../ModelsPlugin.js\";\nimport {XML3DModel} from \"./XML3DModel.js\";\n\n/**\n * A viewer plugin that loads models from [3DXML](https://en.wikipedia.org/wiki/3DXML) files.\n *\n * For each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n * {@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n *\n * Note that the name of this plugin is intentionally munged to \"XML3D\" because a JavaScript\n * class name cannot begin with a numeral.\n *\n * An 3DXML model is a zip archive that bundles multiple XML files and assets. Internally, the XML3DModelsPlugin uses the\n * [zip.js](https://gildas-lormeau.github.io/zip.js/) library to unzip them before loading. The zip.js library uses\n * [Web workers](https://www.w3.org/TR/workers/) for fast unzipping, so XML3DModelsPlugin requires that we configure it\n * with a ````workerScriptsPath```` property specifying the directory where zip.js keeps its Web worker script. See \n * the example for how to do that. \n *\n * See the {@link XML3DModelsPlugin#load} method for parameters that you can configure\n * each [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.\n *\n * @example\n * // Create a xeokit Viewer\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * // Add an XML3DModelsPlugin to the Viewer\n * var plugin = new XML3DModelsPlugin(viewer, {\n *      id: \"XML3DModels\",  // Default value\n *      workerScriptsPath : \"../../src/plugins/XML3DModels/zipjs/\" // Path to zip.js workers dir\n * });\n *\n * // We can also get the plugin by its ID on the Viewer\n * plugin = viewer.plugins.XML3DModels;\n *\n * // Load the 3DXML model\n * // These params can include all the xeogl.OBJModel configs\n * const model = plugin.load({\n *      id: \"myModel\",\n *      src: \"models/my3DXMLModel.3dxml\",\n *      scale: [0.1, 0.1, 0.1],\n *      rotate: [90, 0, 0],\n *      translate: [100,0,0],\n *      edges: true\n * });\n *\n * // Recall that the model is a xeogl.Model\n *\n * // When the model has loaded, fit it to view\n * model.on(\"loaded\", function() {\n *      viewer.cameraFlight.flyTo(model);\n * });\n *\n * // Update properties of the model via the xeogl.Model\n * model.translate = [200,0,0];\n *\n * // You can unload the model via the plugin\n * plugin.unload(\"myModel\");\n *\n * // Or unload it by calling destroy() on the xeogl.Model itself\n * model.destroy();\n *\n * @class XML3DModels\n */\n\nclass XML3DModelsPlugin extends ModelsPlugin {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg  Plugin configuration.\n     * @param {String} [cfg.id=\"XML3DModels\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     * @param {String} cfg.workerScriptsPath Path to the directory that contains the\n     * bundled [zip.js](https://gildas-lormeau.github.io/zip.js/) archive, which is a dependency of this plugin. This directory\n     * contains the script that is used by zip.js to instantiate Web workers, which assist with unzipping the 3DXML, which is a ZIP archive.\n     */\n    constructor(viewer, cfg) {\n        super(\"XML3DModels\", viewer, XML3DModel, cfg);\n        cfg = cfg || {};\n        if (!cfg.workerScriptsPath) {\n            this.error(\"Config expected: workerScriptsPath\");\n            return\n        }\n        this._workerScriptsPath = cfg.workerScriptsPath;\n    }\n\n    /**\n     * Loads a 3DXML model from a file into this XML3DModelsPlugin's {@link Viewer}.\n     *\n     * Creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {*} params  Loading parameters.\n     *\n     * @param {String} params.id ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\n     * unique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n     *\n     * @param {String} [params.src] Path to a 3DXML file.\n     *\n     * @param {xeogl.Object} [params.parent] The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\n     * if we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy.\n     *\n     * @param {Boolean} [params.edges=false] Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized.\n     *\n     * @param {Float32Array} [params.position=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local 3D position.\n     *\n     * @param {Float32Array} [params.scale=[1,1,1]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\n     * local scale.\n     *\n     * @param {Float32Array} [params.rotation=[0,0,0]] The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\n     * rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * @param {Float32Array} [params.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] The\n     * [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\n     * the position, scale and rotation parameters.\n     *\n     * @param {Boolean} [params.lambertMaterials=false]  When true, gives each [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html)\n     * the same [xeogl.LambertMaterial](http://xeogl.org/docs/classes/LambertMaterial.html) and a ````colorize````\n     * value set the to diffuse color extracted from the 3DXML material. This is typically used for large CAD models and\n     * will cause loading to ignore textures in the 3DXML.\n     *\n     * @param {Boolean} [params.backfaces=false] When true, allows visible backfaces, wherever specified in the 3DXML.\n     * When false, ignores backfaces.\n     *\n     * @param {Number} [params.edgeThreshold=20] When ghosting, highlighting, selecting or edging, this is the threshold\n     * angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n     *\n     * @returns {{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded 3DXML model.\n     */\n    load(params) {\n        params.workerScriptsPath = this._workerScriptsPath;\n        return super.load(params);\n    }\n}\n\nexport {XML3DModelsPlugin}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "class",
    "name": "XML3DModelsPlugin",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js~XML3DModelsPlugin",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js",
    "importStyle": "{XML3DModelsPlugin}",
    "description": "A viewer plugin that loads models from [3DXML](https://en.wikipedia.org/wiki/3DXML) files.\n\nFor each model loaded, creates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within its\n{@link Viewer}'s [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).\n\nNote that the name of this plugin is intentionally munged to \"XML3D\" because a JavaScript\nclass name cannot begin with a numeral.\n\nAn 3DXML model is a zip archive that bundles multiple XML files and assets. Internally, the XML3DModelsPlugin uses the\n[zip.js](https://gildas-lormeau.github.io/zip.js/) library to unzip them before loading. The zip.js library uses\n[Web workers](https://www.w3.org/TR/workers/) for fast unzipping, so XML3DModelsPlugin requires that we configure it\nwith a ````workerScriptsPath```` property specifying the directory where zip.js keeps its Web worker script. See \nthe example for how to do that. \n\nSee the {@link XML3DModelsPlugin#load} method for parameters that you can configure\neach [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with as you load it.",
    "examples": [
      "// Create a xeokit Viewer\nconst viewer = new Viewer({\n     canvasId: \"myCanvas\"\n});\n\n// Add an XML3DModelsPlugin to the Viewer\nvar plugin = new XML3DModelsPlugin(viewer, {\n     id: \"XML3DModels\",  // Default value\n     workerScriptsPath : \"../../src/plugins/XML3DModels/zipjs/\" // Path to zip.js workers dir\n});\n\n// We can also get the plugin by its ID on the Viewer\nplugin = viewer.plugins.XML3DModels;\n\n// Load the 3DXML model\n// These params can include all the xeogl.OBJModel configs\nconst model = plugin.load({\n     id: \"myModel\",\n     src: \"models/my3DXMLModel.3dxml\",\n     scale: [0.1, 0.1, 0.1],\n     rotate: [90, 0, 0],\n     translate: [100,0,0],\n     edges: true\n});\n\n// Recall that the model is a xeogl.Model\n\n// When the model has loaded, fit it to view\nmodel.on(\"loaded\", function() {\n     viewer.cameraFlight.flyTo(model);\n});\n\n// Update properties of the model via the xeogl.Model\nmodel.translate = [200,0,0];\n\n// You can unload the model via the plugin\nplugin.unload(\"myModel\");\n\n// Or unload it by calling destroy() on the xeogl.Model itself\nmodel.destroy();"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "XML3DModels"
      }
    ],
    "interface": false,
    "extends": [
      "viewer/ModelsPlugin.js~ModelsPlugin"
    ]
  },
  {
    "__docId__": 373,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js~XML3DModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js~XML3DModelsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The Viewer."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Plugin configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"XML3DModels\"",
        "defaultRaw": "XML3DModels",
        "name": "cfg.id",
        "description": "Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.workerScriptsPath",
        "description": "Path to the directory that contains the\nbundled [zip.js](https://gildas-lormeau.github.io/zip.js/) archive, which is a dependency of this plugin. This directory\ncontains the script that is used by zip.js to instantiate Web workers, which assist with unzipping the 3DXML, which is a ZIP archive."
      }
    ]
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "_workerScriptsPath",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js~XML3DModelsPlugin",
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js~XML3DModelsPlugin#_workerScriptsPath",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "load",
    "memberof": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js~XML3DModelsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "viewer/plugins/XML3DModelsPlugin/XML3DModelsPlugin.js~XML3DModelsPlugin#load",
    "access": "public",
    "description": "Loads a 3DXML model from a file into this XML3DModelsPlugin's {@link Viewer}.\n\nCreates a [xeogl.Model](http://xeogl.org/docs/classes/Model.html) within the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html).",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{xeogl.Model}} A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded 3DXML model."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Loading parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "ID to assign to the [xeogl.Model](http://xeogl.org/docs/classes/Model.html),\nunique among all components in the Viewer's [xeogl.Scene](http://xeogl.org/docs/classes/Scene.html)."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "params.src",
        "description": "Path to a 3DXML file."
      },
      {
        "nullable": null,
        "types": [
          "xeogl.Object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.parent",
        "description": "The parent [xeogl.Object](http://xeogl.org/docs/classes/Object.html),\nif we want to graft the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) into a xeogl object hierarchy."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.edges",
        "description": "Whether or not xeogl renders the [xeogl.Model](http://xeogl.org/docs/classes/Model.html) with edges emphasized."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.position",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal 3D position."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "params.scale",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s\nlocal scale."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "params.rotation",
        "description": "The [xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local\nrotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]",
        "defaultRaw": [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ],
        "name": "params.matrix",
        "description": "The\n[xeogl.Model](http://xeogl.org/docs/classes/Model.html)'s local modelling transform matrix. Overrides\nthe position, scale and rotation parameters."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.lambertMaterials",
        "description": "When true, gives each [xeogl.Mesh](http://xeogl.org/docs/classes/Mesh.html)\nthe same [xeogl.LambertMaterial](http://xeogl.org/docs/classes/LambertMaterial.html) and a ````colorize````\nvalue set the to diffuse color extracted from the 3DXML material. This is typically used for large CAD models and\nwill cause loading to ignore textures in the 3DXML."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.backfaces",
        "description": "When true, allows visible backfaces, wherever specified in the 3DXML.\nWhen false, ignores backfaces."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "params.edgeThreshold",
        "description": "When ghosting, highlighting, selecting or edging, this is the threshold\nangle between normals of adjacent triangles, below which their shared wireframe edge is not drawn."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{xeogl.Model}"
      ],
      "spread": false,
      "description": "A [xeogl.Model](http://xeogl.org/docs/classes/Model.html) representing the loaded 3DXML model."
    }
  },
  {
    "__docId__": 376,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/deflate.js",
    "content": "/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t\"use strict\";\n\n\t// Global\n\n\tvar MAX_BITS = 15;\n\tvar D_CODES = 30;\n\tvar BL_CODES = 19;\n\n\tvar LENGTH_CODES = 29;\n\tvar LITERALS = 256;\n\tvar L_CODES = (LITERALS + 1 + LENGTH_CODES);\n\tvar HEAP_SIZE = (2 * L_CODES + 1);\n\n\tvar END_BLOCK = 256;\n\n\t// Bit length codes must not exceed MAX_BL_BITS bits\n\tvar MAX_BL_BITS = 7;\n\n\t// repeat previous bit length 3-6 times (2 bits of repeat count)\n\tvar REP_3_6 = 16;\n\n\t// repeat a zero length 3-10 times (3 bits of repeat count)\n\tvar REPZ_3_10 = 17;\n\n\t// repeat a zero length 11-138 times (7 bits of repeat count)\n\tvar REPZ_11_138 = 18;\n\n\t// The lengths of the bit length codes are sent in order of decreasing\n\t// probability, to avoid transmitting the lengths for unused bit\n\t// length codes.\n\n\tvar Buf_size = 8 * 2;\n\n\t// JZlib version : \"1.0.2\"\n\tvar Z_DEFAULT_COMPRESSION = -1;\n\n\t// compression strategy\n\tvar Z_FILTERED = 1;\n\tvar Z_HUFFMAN_ONLY = 2;\n\tvar Z_DEFAULT_STRATEGY = 0;\n\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_PARTIAL_FLUSH = 1;\n\tvar Z_FULL_FLUSH = 3;\n\tvar Z_FINISH = 4;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_BUF_ERROR = -5;\n\n\t// Tree\n\n\t// see definition of array dist_code below\n\tvar _dist_code = [ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n\t\t\t10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n\t\t\t12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n\t\t\t13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n\t\t\t15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19,\n\t\t\t20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\n\t\t\t27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n\t\t\t28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ];\n\n\tfunction Tree() {\n\t\tvar that = this;\n\n\t\t// dyn_tree; // the dynamic tree\n\t\t// max_code; // largest code with non zero frequency\n\t\t// stat_desc; // the corresponding static tree\n\n\t\t// Compute the optimal bit lengths for a tree and update the total bit\n\t\t// length\n\t\t// for the current block.\n\t\t// IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t\t// above are the tree nodes sorted by increasing frequency.\n\t\t// OUT assertions: the field len is set to the optimal bit length, the\n\t\t// array bl_count contains the frequencies for each bit length.\n\t\t// The length opt_len is updated; static_len is also updated if stree is\n\t\t// not null.\n\t\tfunction gen_bitlen(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar extra = that.stat_desc.extra_bits;\n\t\t\tvar base = that.stat_desc.extra_base;\n\t\t\tvar max_length = that.stat_desc.max_length;\n\t\t\tvar h; // heap index\n\t\t\tvar n, m; // iterate over the tree elements\n\t\t\tvar bits; // bit length\n\t\t\tvar xbits; // extra bits\n\t\t\tvar f; // frequency\n\t\t\tvar overflow = 0; // number of elements with bit length too large\n\n\t\t\tfor (bits = 0; bits <= MAX_BITS; bits++)\n\t\t\t\ts.bl_count[bits] = 0;\n\n\t\t\t// In a first pass, compute the optimal bit lengths (which may\n\t\t\t// overflow in the case of the bit length tree).\n\t\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n\t\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n\t\t\t\tn = s.heap[h];\n\t\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n\t\t\t\tif (bits > max_length) {\n\t\t\t\t\tbits = max_length;\n\t\t\t\t\toverflow++;\n\t\t\t\t}\n\t\t\t\ttree[n * 2 + 1] = bits;\n\t\t\t\t// We overwrite tree[n*2+1] which is no longer needed\n\n\t\t\t\tif (n > that.max_code)\n\t\t\t\t\tcontinue; // not a leaf node\n\n\t\t\t\ts.bl_count[bits]++;\n\t\t\t\txbits = 0;\n\t\t\t\tif (n >= base)\n\t\t\t\t\txbits = extra[n - base];\n\t\t\t\tf = tree[n * 2];\n\t\t\t\ts.opt_len += f * (bits + xbits);\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);\n\t\t\t}\n\t\t\tif (overflow === 0)\n\t\t\t\treturn;\n\n\t\t\t// This happens for example on obj2 and pic of the Calgary corpus\n\t\t\t// Find the first bit length which could increase:\n\t\t\tdo {\n\t\t\t\tbits = max_length - 1;\n\t\t\t\twhile (s.bl_count[bits] === 0)\n\t\t\t\t\tbits--;\n\t\t\t\ts.bl_count[bits]--; // move one leaf down the tree\n\t\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother\n\t\t\t\ts.bl_count[max_length]--;\n\t\t\t\t// The brother of the overflow item also moves one step up,\n\t\t\t\t// but this does not affect bl_count[max_length]\n\t\t\t\toverflow -= 2;\n\t\t\t} while (overflow > 0);\n\n\t\t\tfor (bits = max_length; bits !== 0; bits--) {\n\t\t\t\tn = s.bl_count[bits];\n\t\t\t\twhile (n !== 0) {\n\t\t\t\t\tm = s.heap[--h];\n\t\t\t\t\tif (m > that.max_code)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (tree[m * 2 + 1] != bits) {\n\t\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n\t\t\t\t\t\ttree[m * 2 + 1] = bits;\n\t\t\t\t\t}\n\t\t\t\t\tn--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reverse the first len bits of a code, using straightforward code (a\n\t\t// faster\n\t\t// method would use a table)\n\t\t// IN assertion: 1 <= len <= 15\n\t\tfunction bi_reverse(code, // the value to invert\n\t\tlen // its bit length\n\t\t) {\n\t\t\tvar res = 0;\n\t\t\tdo {\n\t\t\t\tres |= code & 1;\n\t\t\t\tcode >>>= 1;\n\t\t\t\tres <<= 1;\n\t\t\t} while (--len > 0);\n\t\t\treturn res >>> 1;\n\t\t}\n\n\t\t// Generate the codes for a given tree and bit counts (which need not be\n\t\t// optimal).\n\t\t// IN assertion: the array bl_count contains the bit length statistics for\n\t\t// the given tree and the field len is set for all tree elements.\n\t\t// OUT assertion: the field code is set for all tree elements of non\n\t\t// zero code length.\n\t\tfunction gen_codes(tree, // the tree to decorate\n\t\tmax_code, // largest code with non zero frequency\n\t\tbl_count // number of codes at each bit length\n\t\t) {\n\t\t\tvar next_code = []; // next code value for each\n\t\t\t// bit length\n\t\t\tvar code = 0; // running code value\n\t\t\tvar bits; // bit index\n\t\t\tvar n; // code index\n\t\t\tvar len;\n\n\t\t\t// The distribution counts are first used to generate the code values\n\t\t\t// without bit reversal.\n\t\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\n\t\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);\n\t\t\t}\n\n\t\t\t// Check that the bit counts in bl_count are consistent. The last code\n\t\t\t// must be all ones.\n\t\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n\t\t\t// \"inconsistent bit counts\");\n\t\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tlen = tree[n * 2 + 1];\n\t\t\t\tif (len === 0)\n\t\t\t\t\tcontinue;\n\t\t\t\t// Now reverse the bits\n\t\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);\n\t\t\t}\n\t\t}\n\n\t\t// Construct one Huffman tree and assigns the code bit strings and lengths.\n\t\t// Update the total bit length for the current block.\n\t\t// IN assertion: the field freq is set for all tree elements.\n\t\t// OUT assertions: the fields len and code are set to the optimal bit length\n\t\t// and corresponding code. The length opt_len is updated; static_len is\n\t\t// also updated if stree is not null. The field max_code is set.\n\t\tthat.build_tree = function(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar elems = that.stat_desc.elems;\n\t\t\tvar n, m; // iterate over heap elements\n\t\t\tvar max_code = -1; // largest code with non zero frequency\n\t\t\tvar node; // new node being created\n\n\t\t\t// Construct the initial heap, with least frequent element in\n\t\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t\t\t// heap[0] is not used.\n\t\t\ts.heap_len = 0;\n\t\t\ts.heap_max = HEAP_SIZE;\n\n\t\t\tfor (n = 0; n < elems; n++) {\n\t\t\t\tif (tree[n * 2] !== 0) {\n\t\t\t\t\ts.heap[++s.heap_len] = max_code = n;\n\t\t\t\t\ts.depth[n] = 0;\n\t\t\t\t} else {\n\t\t\t\t\ttree[n * 2 + 1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The pkzip format requires that at least one distance code exists,\n\t\t\t// and that at least one bit should be sent even if there is only one\n\t\t\t// possible code. So to avoid special checks later on we force at least\n\t\t\t// two codes of non zero frequency.\n\t\t\twhile (s.heap_len < 2) {\n\t\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n\t\t\t\ttree[node * 2] = 1;\n\t\t\t\ts.depth[node] = 0;\n\t\t\t\ts.opt_len--;\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len -= stree[node * 2 + 1];\n\t\t\t\t// node is 0 or 1 so it does not have extra bits\n\t\t\t}\n\t\t\tthat.max_code = max_code;\n\n\t\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t\t\t// establish sub-heaps of increasing lengths:\n\n\t\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)\n\t\t\t\ts.pqdownheap(tree, n);\n\n\t\t\t// Construct the Huffman tree by repeatedly combining the least two\n\t\t\t// frequent nodes.\n\n\t\t\tnode = elems; // next internal node of the tree\n\t\t\tdo {\n\t\t\t\t// n = node of least frequency\n\t\t\t\tn = s.heap[1];\n\t\t\t\ts.heap[1] = s.heap[s.heap_len--];\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t\tm = s.heap[1]; // m = node of next least frequency\n\n\t\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n\t\t\t\ts.heap[--s.heap_max] = m;\n\n\t\t\t\t// Create a new node father of n and m\n\t\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);\n\t\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n\t\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;\n\n\t\t\t\t// and insert the new node in the heap\n\t\t\t\ts.heap[1] = node++;\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t} while (s.heap_len >= 2);\n\n\t\t\ts.heap[--s.heap_max] = s.heap[1];\n\n\t\t\t// At this point, the fields freq and dad are set. We can now\n\t\t\t// generate the bit lengths.\n\n\t\t\tgen_bitlen(s);\n\n\t\t\t// The field len is now set, we can generate the bit codes\n\t\t\tgen_codes(tree, that.max_code, s.bl_count);\n\t\t};\n\n\t}\n\n\tTree._length_code = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16,\n\t\t\t16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n\t\t\t20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n\t\t\t22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n\t\t\t25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ];\n\n\tTree.base_length = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 ];\n\n\tTree.base_dist = [ 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\n\t\t\t24576 ];\n\n\t// Mapping from a distance to a distance code. dist is the distance - 1 and\n\t// must not have side effects. _dist_code[256] and _dist_code[257] are never\n\t// used.\n\tTree.d_code = function(dist) {\n\t\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);\n\t};\n\n\t// extra bits for each length code\n\tTree.extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];\n\n\t// extra bits for each distance code\n\tTree.extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// extra bits for each bit length code\n\tTree.extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];\n\n\tTree.bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\t// StaticTree\n\n\tfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n\t\tvar that = this;\n\t\tthat.static_tree = static_tree;\n\t\tthat.extra_bits = extra_bits;\n\t\tthat.extra_base = extra_base;\n\t\tthat.elems = elems;\n\t\tthat.max_length = max_length;\n\t}\n\n\tStaticTree.static_ltree = [ 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,\n\t\t\t130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,\n\t\t\t8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,\n\t\t\t22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,\n\t\t\t222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,\n\t\t\t8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,\n\t\t\t69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,\n\t\t\t173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,\n\t\t\t51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,\n\t\t\t427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,\n\t\t\t9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,\n\t\t\t9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,\n\t\t\t399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,\n\t\t\t223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,\n\t\t\t40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,\n\t\t\t99, 8, 227, 8 ];\n\n\tStaticTree.static_dtree = [ 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,\n\t\t\t25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5 ];\n\n\tStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n\n\tStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\n\n\tStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n\n\t// Deflate\n\n\tvar MAX_MEM_LEVEL = 9;\n\tvar DEF_MEM_LEVEL = 8;\n\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\t\tvar that = this;\n\t\tthat.good_length = good_length;\n\t\tthat.max_lazy = max_lazy;\n\t\tthat.nice_length = nice_length;\n\t\tthat.max_chain = max_chain;\n\t\tthat.func = func;\n\t}\n\n\tvar STORED = 0;\n\tvar FAST = 1;\n\tvar SLOW = 2;\n\tvar config_table = [ new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST),\n\t\t\tnew Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW),\n\t\t\tnew Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW) ];\n\n\tvar z_errmsg = [ \"need dictionary\", // Z_NEED_DICT\n\t// 2\n\t\"stream end\", // Z_STREAM_END 1\n\t\"\", // Z_OK 0\n\t\"\", // Z_ERRNO (-1)\n\t\"stream error\", // Z_STREAM_ERROR (-2)\n\t\"data error\", // Z_DATA_ERROR (-3)\n\t\"\", // Z_MEM_ERROR (-4)\n\t\"buffer error\", // Z_BUF_ERROR (-5)\n\t\"\",// Z_VERSION_ERROR (-6)\n\t\"\" ];\n\n\t// block not completed, need more input or more output\n\tvar NeedMore = 0;\n\n\t// block flush performed\n\tvar BlockDone = 1;\n\n\t// finish started, need only more output at next deflate\n\tvar FinishStarted = 2;\n\n\t// finish done, accept no more input or output\n\tvar FinishDone = 3;\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar INIT_STATE = 42;\n\tvar BUSY_STATE = 113;\n\tvar FINISH_STATE = 666;\n\n\t// The deflate compression method\n\tvar Z_DEFLATED = 8;\n\n\tvar STORED_BLOCK = 0;\n\tvar STATIC_TREES = 1;\n\tvar DYN_TREES = 2;\n\n\tvar MIN_MATCH = 3;\n\tvar MAX_MATCH = 258;\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\n\tfunction smaller(tree, n, m, depth) {\n\t\tvar tn2 = tree[n * 2];\n\t\tvar tm2 = tree[m * 2];\n\t\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));\n\t}\n\n\tfunction Deflate() {\n\n\t\tvar that = this;\n\t\tvar strm; // pointer back to this zlib stream\n\t\tvar status; // as the name implies\n\t\t// pending_buf; // output still pending\n\t\tvar pending_buf_size; // size of pending_buf\n\t\t// pending_out; // next pending byte to output to the stream\n\t\t// pending; // nb of bytes in the pending buffer\n\t\tvar method; // STORED (for zip only) or DEFLATED\n\t\tvar last_flush; // value of flush param for previous deflate call\n\n\t\tvar w_size; // LZ77 window size (32K by default)\n\t\tvar w_bits; // log2(w_size) (8..16)\n\t\tvar w_mask; // w_size - 1\n\n\t\tvar window;\n\t\t// Sliding window. Input bytes are read into the second half of the window,\n\t\t// and move to the first half later to keep a dictionary of at least wSize\n\t\t// bytes. With this organization, matches are limited to a distance of\n\t\t// wSize-MAX_MATCH bytes, but this ensures that IO is always\n\t\t// performed with a length multiple of the block size. Also, it limits\n\t\t// the window size to 64K, which is quite useful on MSDOS.\n\t\t// To do: use the user input buffer as sliding window.\n\n\t\tvar window_size;\n\t\t// Actual size of window: 2*wSize, except when the user input buffer\n\t\t// is directly used as sliding window.\n\n\t\tvar prev;\n\t\t// Link to older string with same hash index. To limit the size of this\n\t\t// array to 64K, this link is maintained only for the last 32K strings.\n\t\t// An index in this array is thus a window index modulo 32K.\n\n\t\tvar head; // Heads of the hash chains or NIL.\n\n\t\tvar ins_h; // hash index of string to be inserted\n\t\tvar hash_size; // number of elements in hash table\n\t\tvar hash_bits; // log2(hash_size)\n\t\tvar hash_mask; // hash_size-1\n\n\t\t// Number of bits by which ins_h must be shifted at each input\n\t\t// step. It must be such that after MIN_MATCH steps, the oldest\n\t\t// byte no longer takes part in the hash key, that is:\n\t\t// hash_shift * MIN_MATCH >= hash_bits\n\t\tvar hash_shift;\n\n\t\t// Window position at the beginning of the current output block. Gets\n\t\t// negative when the window is moved backwards.\n\n\t\tvar block_start;\n\n\t\tvar match_length; // length of best match\n\t\tvar prev_match; // previous match\n\t\tvar match_available; // set if previous match exists\n\t\tvar strstart; // start of string to insert\n\t\tvar match_start; // start of matching string\n\t\tvar lookahead; // number of valid bytes ahead in window\n\n\t\t// Length of the best match at previous step. Matches not greater than this\n\t\t// are discarded. This is used in the lazy match evaluation.\n\t\tvar prev_length;\n\n\t\t// To speed up deflation, hash chains are never searched beyond this\n\t\t// length. A higher limit improves compression ratio but degrades the speed.\n\t\tvar max_chain_length;\n\n\t\t// Attempt to find a better match only when the current match is strictly\n\t\t// smaller than this value. This mechanism is used only for compression\n\t\t// levels >= 4.\n\t\tvar max_lazy_match;\n\n\t\t// Insert new strings in the hash table only if the match length is not\n\t\t// greater than this length. This saves time but degrades compression.\n\t\t// max_insert_length is used only for compression levels <= 3.\n\n\t\tvar level; // compression level (1..9)\n\t\tvar strategy; // favor or force Huffman coding\n\n\t\t// Use a faster search when the previous match is longer than this\n\t\tvar good_match;\n\n\t\t// Stop searching when current match exceeds this\n\t\tvar nice_match;\n\n\t\tvar dyn_ltree; // literal and length tree\n\t\tvar dyn_dtree; // distance tree\n\t\tvar bl_tree; // Huffman tree for bit lengths\n\n\t\tvar l_desc = new Tree(); // desc for literal tree\n\t\tvar d_desc = new Tree(); // desc for distance tree\n\t\tvar bl_desc = new Tree(); // desc for bit length tree\n\n\t\t// that.heap_len; // number of elements in the heap\n\t\t// that.heap_max; // element of largest frequency\n\t\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n\t\t// The same heap array is used to build all trees.\n\n\t\t// Depth of each subtree used as tie breaker for trees of equal frequency\n\t\tthat.depth = [];\n\n\t\tvar l_buf; // index for literals or lengths */\n\n\t\t// Size of match buffer for literals/lengths. There are 4 reasons for\n\t\t// limiting lit_bufsize to 64K:\n\t\t// - frequencies can be kept in 16 bit counters\n\t\t// - if compression is not successful for the first block, all input\n\t\t// data is still in the window so we can still emit a stored block even\n\t\t// when input comes from standard input. (This can also be done for\n\t\t// all blocks if lit_bufsize is not greater than 32K.)\n\t\t// - if compression is not successful for a file smaller than 64K, we can\n\t\t// even emit a stored file instead of a stored block (saving 5 bytes).\n\t\t// This is applicable only for zip (not gzip or zlib).\n\t\t// - creating new Huffman trees less frequently may not provide fast\n\t\t// adaptation to changes in the input data statistics. (Take for\n\t\t// example a binary file with poorly compressible code followed by\n\t\t// a highly compressible string table.) Smaller buffer sizes give\n\t\t// fast adaptation but have of course the overhead of transmitting\n\t\t// trees more frequently.\n\t\t// - I can't count above 4\n\t\tvar lit_bufsize;\n\n\t\tvar last_lit; // running index in l_buf\n\n\t\t// Buffer for distances. To simplify the code, d_buf and l_buf have\n\t\t// the same number of elements. To use different lengths, an extra flag\n\t\t// array would be necessary.\n\n\t\tvar d_buf; // index of pendig_buf\n\n\t\t// that.opt_len; // bit length of current block with optimal trees\n\t\t// that.static_len; // bit length of current block with static trees\n\t\tvar matches; // number of string matches in current block\n\t\tvar last_eob_len; // bit length of EOB code for last block\n\n\t\t// Output buffer. bits are inserted starting at the bottom (least\n\t\t// significant bits).\n\t\tvar bi_buf;\n\n\t\t// Number of valid bits in bi_buf. All bits above the last valid bit\n\t\t// are always zero.\n\t\tvar bi_valid;\n\n\t\t// number of codes at each bit length for an optimal tree\n\t\tthat.bl_count = [];\n\n\t\t// heap used to build the Huffman trees\n\t\tthat.heap = [];\n\n\t\tdyn_ltree = [];\n\t\tdyn_dtree = [];\n\t\tbl_tree = [];\n\n\t\tfunction lm_init() {\n\t\t\tvar i;\n\t\t\twindow_size = 2 * w_size;\n\n\t\t\thead[hash_size - 1] = 0;\n\t\t\tfor (i = 0; i < hash_size - 1; i++) {\n\t\t\t\thead[i] = 0;\n\t\t\t}\n\n\t\t\t// Set the default configuration parameters:\n\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\tgood_match = config_table[level].good_length;\n\t\t\tnice_match = config_table[level].nice_length;\n\t\t\tmax_chain_length = config_table[level].max_chain;\n\n\t\t\tstrstart = 0;\n\t\t\tblock_start = 0;\n\t\t\tlookahead = 0;\n\t\t\tmatch_length = prev_length = MIN_MATCH - 1;\n\t\t\tmatch_available = 0;\n\t\t\tins_h = 0;\n\t\t}\n\n\t\tfunction init_block() {\n\t\t\tvar i;\n\t\t\t// Initialize the trees.\n\t\t\tfor (i = 0; i < L_CODES; i++)\n\t\t\t\tdyn_ltree[i * 2] = 0;\n\t\t\tfor (i = 0; i < D_CODES; i++)\n\t\t\t\tdyn_dtree[i * 2] = 0;\n\t\t\tfor (i = 0; i < BL_CODES; i++)\n\t\t\t\tbl_tree[i * 2] = 0;\n\n\t\t\tdyn_ltree[END_BLOCK * 2] = 1;\n\t\t\tthat.opt_len = that.static_len = 0;\n\t\t\tlast_lit = matches = 0;\n\t\t}\n\n\t\t// Initialize the tree data structures for a new zlib stream.\n\t\tfunction tr_init() {\n\n\t\t\tl_desc.dyn_tree = dyn_ltree;\n\t\t\tl_desc.stat_desc = StaticTree.static_l_desc;\n\n\t\t\td_desc.dyn_tree = dyn_dtree;\n\t\t\td_desc.stat_desc = StaticTree.static_d_desc;\n\n\t\t\tbl_desc.dyn_tree = bl_tree;\n\t\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;\n\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\t// Initialize the first block of the first file:\n\t\t\tinit_block();\n\t\t}\n\n\t\t// Restore the heap property by moving down the tree starting at node k,\n\t\t// exchanging a node with the smallest of its two sons if necessary,\n\t\t// stopping\n\t\t// when the heap property is re-established (each father smaller than its\n\t\t// two sons).\n\t\tthat.pqdownheap = function(tree, // the tree to restore\n\t\tk // node to move down\n\t\t) {\n\t\t\tvar heap = that.heap;\n\t\t\tvar v = heap[k];\n\t\t\tvar j = k << 1; // left son of k\n\t\t\twhile (j <= that.heap_len) {\n\t\t\t\t// Set j to the smallest of the two sons:\n\t\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\t// Exit if v is smaller than both sons\n\t\t\t\tif (smaller(tree, v, heap[j], that.depth))\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Exchange v with the smallest son\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t\t// And continue down the tree, setting j to the left son of k\n\t\t\t\tj <<= 1;\n\t\t\t}\n\t\t\theap[k] = v;\n\t\t};\n\n\t\t// Scan a literal or distance tree to determine the frequencies of the codes\n\t\t// in the bit length tree.\n\t\tfunction scan_tree(tree,// the tree to be scanned\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\t\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tbl_tree[curlen * 2] += count;\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen)\n\t\t\t\t\t\tbl_tree[curlen * 2]++;\n\t\t\t\t\tbl_tree[REP_3_6 * 2]++;\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tbl_tree[REPZ_3_10 * 2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbl_tree[REPZ_11_138 * 2]++;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Construct the Huffman tree for the bit lengths and return the index in\n\t\t// bl_order of the last bit length code to send.\n\t\tfunction build_bl_tree() {\n\t\t\tvar max_blindex; // index of last bit length code of non zero freq\n\n\t\t\t// Determine the bit length frequencies for literal and distance trees\n\t\t\tscan_tree(dyn_ltree, l_desc.max_code);\n\t\t\tscan_tree(dyn_dtree, d_desc.max_code);\n\n\t\t\t// Build the bit length tree:\n\t\t\tbl_desc.build_tree(that);\n\t\t\t// opt_len now includes the length of the tree representations, except\n\t\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the\n\t\t\t// counts.\n\n\t\t\t// Determine the number of bit length codes to send. The pkzip format\n\t\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\n\t\t\t// 3 but the actual value used is 4.)\n\t\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n\t\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Update opt_len to include the bit length tree and counts\n\t\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n\n\t\t\treturn max_blindex;\n\t\t}\n\n\t\t// Output a byte on the stream.\n\t\t// IN assertion: there is enough room in pending_buf.\n\t\tfunction put_byte(p) {\n\t\t\tthat.pending_buf[that.pending++] = p;\n\t\t}\n\n\t\tfunction put_short(w) {\n\t\t\tput_byte(w & 0xff);\n\t\t\tput_byte((w >>> 8) & 0xff);\n\t\t}\n\n\t\tfunction putShortMSB(b) {\n\t\t\tput_byte((b >> 8) & 0xff);\n\t\t\tput_byte((b & 0xff) & 0xff);\n\t\t}\n\n\t\tfunction send_bits(value, length) {\n\t\t\tvar val, len = length;\n\t\t\tif (bi_valid > Buf_size - len) {\n\t\t\t\tval = value;\n\t\t\t\t// bi_buf |= (val << bi_valid);\n\t\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = val >>> (Buf_size - bi_valid);\n\t\t\t\tbi_valid += len - Buf_size;\n\t\t\t} else {\n\t\t\t\t// bi_buf |= (value) << bi_valid;\n\t\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);\n\t\t\t\tbi_valid += len;\n\t\t\t}\n\t\t}\n\n\t\tfunction send_code(c, tree) {\n\t\t\tvar c2 = c * 2;\n\t\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n\t\t}\n\n\t\t// Send a literal or distance tree in compressed form, using the codes in\n\t\t// bl_tree.\n\t\tfunction send_tree(tree,// the tree to be sent\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t} while (--count !== 0);\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen) {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\tsend_code(REP_3_6, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 2);\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tsend_code(REPZ_3_10, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 3);\n\t\t\t\t} else {\n\t\t\t\t\tsend_code(REPZ_11_138, bl_tree);\n\t\t\t\t\tsend_bits(count - 11, 7);\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Send the header for a block using dynamic Huffman trees: the counts, the\n\t\t// lengths of the bit length codes, the literal tree and the distance tree.\n\t\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\t\tfunction send_all_trees(lcodes, dcodes, blcodes) {\n\t\t\tvar rank; // index in bl_order\n\n\t\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\t\t\tsend_bits(dcodes - 1, 5);\n\t\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n\t\t\tfor (rank = 0; rank < blcodes; rank++) {\n\t\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n\t\t\t}\n\t\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree\n\t\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree\n\t\t}\n\n\t\t// Flush the bit buffer, keeping at most 7 bits in it.\n\t\tfunction bi_flush() {\n\t\t\tif (bi_valid == 16) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = 0;\n\t\t\t\tbi_valid = 0;\n\t\t\t} else if (bi_valid >= 8) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t\tbi_buf >>>= 8;\n\t\t\t\tbi_valid -= 8;\n\t\t\t}\n\t\t}\n\n\t\t// Send one empty static block to give enough lookahead for inflate.\n\t\t// This takes 10 bits, of which 7 may remain in the bit buffer.\n\t\t// The current inflate code requires 9 bits of lookahead. If the\n\t\t// last two codes for the previous block (real code plus EOB) were coded\n\t\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n\t\t// the last real code. In this case we send two empty static blocks instead\n\t\t// of one. (There are no problems if the previous block is stored or fixed.)\n\t\t// To simplify the code, we assume the worst case of last real code encoded\n\t\t// on one bit only.\n\t\tfunction _tr_align() {\n\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\n\t\t\tbi_flush();\n\n\t\t\t// Of the 10 bits for the empty block, we have already sent\n\t\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before\n\t\t\t// the EOB of the previous block) was thus at least one plus the length\n\t\t\t// of the EOB plus what we have just sent of the empty static block.\n\t\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {\n\t\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\t\t\t\tbi_flush();\n\t\t\t}\n\t\t\tlast_eob_len = 7;\n\t\t}\n\n\t\t// Save the match info and tally the frequency counts. Return true if\n\t\t// the current block must be flushed.\n\t\tfunction _tr_tally(dist, // distance of matched string\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)\n\t\t) {\n\t\t\tvar out_length, in_length, dcode;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\n\n\t\t\tthat.pending_buf[l_buf + last_lit] = lc & 0xff;\n\t\t\tlast_lit++;\n\n\t\t\tif (dist === 0) {\n\t\t\t\t// lc is the unmatched char\n\t\t\t\tdyn_ltree[lc * 2]++;\n\t\t\t} else {\n\t\t\t\tmatches++;\n\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\tdist--; // dist = match distance - 1\n\t\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n\t\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;\n\t\t\t}\n\n\t\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {\n\t\t\t\t// Compute an upper bound for the compressed length\n\t\t\t\tout_length = last_lit * 8;\n\t\t\t\tin_length = strstart - block_start;\n\t\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\n\t\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n\t\t\t\t}\n\t\t\t\tout_length >>>= 3;\n\t\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn (last_lit == lit_bufsize - 1);\n\t\t\t// We avoid equality with lit_bufsize because of wraparound at 64K\n\t\t\t// on 16 bit machines and because stored blocks are restricted to\n\t\t\t// 64K-1 bytes.\n\t\t}\n\n\t\t// Send the block data compressed using the given Huffman trees\n\t\tfunction compress_block(ltree, dtree) {\n\t\t\tvar dist; // distance of matched string\n\t\t\tvar lc; // match length or unmatched char (if dist === 0)\n\t\t\tvar lx = 0; // running index in l_buf\n\t\t\tvar code; // the code to send\n\t\t\tvar extra; // number of extra bits to send\n\n\t\t\tif (last_lit !== 0) {\n\t\t\t\tdo {\n\t\t\t\t\tdist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);\n\t\t\t\t\tlc = (that.pending_buf[l_buf + lx]) & 0xff;\n\t\t\t\t\tlx++;\n\n\t\t\t\t\tif (dist === 0) {\n\t\t\t\t\t\tsend_code(lc, ltree); // send a literal byte\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\t\t\tcode = Tree._length_code[lc];\n\n\t\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length\n\t\t\t\t\t\t// code\n\t\t\t\t\t\textra = Tree.extra_lbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tlc -= Tree.base_length[code];\n\t\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdist--; // dist is now the match distance - 1\n\t\t\t\t\t\tcode = Tree.d_code(dist);\n\n\t\t\t\t\t\tsend_code(code, dtree); // send the distance code\n\t\t\t\t\t\textra = Tree.extra_dbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tdist -= Tree.base_dist[code];\n\t\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\n\t\t\t\t\t\t}\n\t\t\t\t\t} // literal or match pair ?\n\n\t\t\t\t\t// Check that the overlay between pending_buf and d_buf+l_buf is\n\t\t\t\t\t// ok:\n\t\t\t\t} while (lx < last_lit);\n\t\t\t}\n\n\t\t\tsend_code(END_BLOCK, ltree);\n\t\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];\n\t\t}\n\n\t\t// Flush the bit buffer and align the output on a byte boundary\n\t\tfunction bi_windup() {\n\t\t\tif (bi_valid > 8) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t} else if (bi_valid > 0) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t}\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t}\n\n\t\t// Copy a stored block, storing first the length and its\n\t\t// one's complement if requested.\n\t\tfunction copy_block(buf, // the input data\n\t\tlen, // its length\n\t\theader // true if block header must be written\n\t\t) {\n\t\t\tbi_windup(); // align on byte boundary\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\tif (header) {\n\t\t\t\tput_short(len);\n\t\t\t\tput_short(~len);\n\t\t\t}\n\n\t\t\tthat.pending_buf.set(window.subarray(buf, buf + len), that.pending);\n\t\t\tthat.pending += len;\n\t\t}\n\n\t\t// Send a stored block\n\t\tfunction _tr_stored_block(buf, // input block\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n\t\t\tcopy_block(buf, stored_len, true); // with header\n\t\t}\n\n\t\t// Determine the best encoding for the current block: dynamic trees, static\n\t\t// trees or store, and output the encoded block to the zip file.\n\t\tfunction _tr_flush_block(buf, // input block, or NULL if too old\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tvar opt_lenb, static_lenb;// opt_len and static_len in bytes\n\t\t\tvar max_blindex = 0; // index of last bit length code of non zero freq\n\n\t\t\t// Build the Huffman trees unless a stored block is forced\n\t\t\tif (level > 0) {\n\t\t\t\t// Construct the literal and distance trees\n\t\t\t\tl_desc.build_tree(that);\n\n\t\t\t\td_desc.build_tree(that);\n\n\t\t\t\t// At this point, opt_len and static_len are the total bit lengths\n\t\t\t\t// of\n\t\t\t\t// the compressed block data, excluding the tree representations.\n\n\t\t\t\t// Build the bit length tree for the above two trees, and get the\n\t\t\t\t// index\n\t\t\t\t// in bl_order of the last bit length code to send.\n\t\t\t\tmax_blindex = build_bl_tree();\n\n\t\t\t\t// Determine the best encoding. Compute first the block length in\n\t\t\t\t// bytes\n\t\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;\n\t\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;\n\n\t\t\t\tif (static_lenb <= opt_lenb)\n\t\t\t\t\topt_lenb = static_lenb;\n\t\t\t} else {\n\t\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block\n\t\t\t}\n\n\t\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {\n\t\t\t\t// 4: two words for the lengths\n\t\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t\t\t\t// Otherwise we can't have processed more than WSIZE input bytes\n\t\t\t\t// since\n\t\t\t\t// the last block flush, because compression would have been\n\t\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t\t\t\t// transform a block into a stored block.\n\t\t\t\t_tr_stored_block(buf, stored_len, eof);\n\t\t\t} else if (static_lenb == opt_lenb) {\n\t\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n\t\t\t} else {\n\t\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n\t\t\t\tcompress_block(dyn_ltree, dyn_dtree);\n\t\t\t}\n\n\t\t\t// The above check is made mod 2^32, for files larger than 512 MB\n\t\t\t// and uLong implemented on 32 bits.\n\n\t\t\tinit_block();\n\n\t\t\tif (eof) {\n\t\t\t\tbi_windup();\n\t\t\t}\n\t\t}\n\n\t\tfunction flush_block_only(eof) {\n\t\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n\t\t\tblock_start = strstart;\n\t\t\tstrm.flush_pending();\n\t\t}\n\n\t\t// Fill the window when the lookahead becomes insufficient.\n\t\t// Updates strstart and lookahead.\n\t\t//\n\t\t// IN assertion: lookahead < MIN_LOOKAHEAD\n\t\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n\t\t// At least one byte has been read, or avail_in === 0; reads are\n\t\t// performed for at least two bytes (required for the zip translate_eol\n\t\t// option -- not supported here).\n\t\tfunction fill_window() {\n\t\t\tvar n, m;\n\t\t\tvar p;\n\t\t\tvar more; // Amount of free space at the end of the window.\n\n\t\t\tdo {\n\t\t\t\tmore = (window_size - lookahead - strstart);\n\n\t\t\t\t// Deal with !@#$% 64K limit:\n\t\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {\n\t\t\t\t\tmore = w_size;\n\t\t\t\t} else if (more == -1) {\n\t\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// and lookahead == 1 (input done one byte at time)\n\t\t\t\t\tmore--;\n\n\t\t\t\t\t// If the window is almost full and there is insufficient\n\t\t\t\t\t// lookahead,\n\t\t\t\t\t// move the upper half to the lower one to make room in the\n\t\t\t\t\t// upper half.\n\t\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\twindow.set(window.subarray(w_size, w_size + w_size), 0);\n\n\t\t\t\t\tmatch_start -= w_size;\n\t\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST\n\t\t\t\t\tblock_start -= w_size;\n\n\t\t\t\t\t// Slide the hash table (could be avoided with 32 bit values\n\t\t\t\t\t// at the expense of memory usage). We slide even when level ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// to keep the hash table consistent if we switch back to level\n\t\t\t\t\t// > 0\n\t\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of\n\t\t\t\t\t// zlib, so we don't care about this pathological case.)\n\n\t\t\t\t\tn = hash_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (head[--p] & 0xffff);\n\t\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t} while (--n !== 0);\n\n\t\t\t\t\tn = w_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (prev[--p] & 0xffff);\n\t\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but\n\t\t\t\t\t\t// its value will never be used.\n\t\t\t\t\t} while (--n !== 0);\n\t\t\t\t\tmore += w_size;\n\t\t\t\t}\n\n\t\t\t\tif (strm.avail_in === 0)\n\t\t\t\t\treturn;\n\n\t\t\t\t// If there was no sliding:\n\t\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n\t\t\t\t// more == window_size - lookahead - strstart\n\t\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n\t\t\t\t// => more >= window_size - 2*WSIZE + 2\n\t\t\t\t// In the BIG_MEM or MMAP case (not yet supported),\n\t\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&\n\t\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n\t\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.\n\t\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n\t\t\t\tn = strm.read_buf(window, strstart + lookahead, more);\n\t\t\t\tlookahead += n;\n\n\t\t\t\t// Initialize the hash value now that we have some input:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = window[strstart] & 0xff;\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t}\n\t\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is\n\t\t\t\t// garbage,\n\t\t\t\t// but this is not important since only literal bytes will be\n\t\t\t\t// emitted.\n\t\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n\t\t}\n\n\t\t// Copy without compression as much as possible from the input stream,\n\t\t// return\n\t\t// the current block state.\n\t\t// This function does not insert new strings in the dictionary since\n\t\t// uncompressible data is probably not useful. This function is used\n\t\t// only for the level=0 compression option.\n\t\t// NOTE: this function should be optimized to avoid extra copying from\n\t\t// window to pending_buf.\n\t\tfunction deflate_stored(flush) {\n\t\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited\n\t\t\t// to pending_buf_size, and each stored block has a 5 byte header:\n\n\t\t\tvar max_block_size = 0xffff;\n\t\t\tvar max_start;\n\n\t\t\tif (max_block_size > pending_buf_size - 5) {\n\t\t\t\tmax_block_size = pending_buf_size - 5;\n\t\t\t}\n\n\t\t\t// Copy as much as possible from input to output:\n\t\t\twhile (true) {\n\t\t\t\t// Fill the window as much as possible:\n\t\t\t\tif (lookahead <= 1) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\tstrstart += lookahead;\n\t\t\t\tlookahead = 0;\n\n\t\t\t\t// Emit a stored block if pending_buf will be full:\n\t\t\t\tmax_start = block_start + max_block_size;\n\t\t\t\tif (strstart === 0 || strstart >= max_start) {\n\t\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine\n\t\t\t\t\tlookahead = (strstart - max_start);\n\t\t\t\t\tstrstart = max_start;\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\n\t\t\t\t}\n\n\t\t\t\t// Flush if we may have to slide, otherwise block_start may become\n\t\t\t\t// negative and the data will be gone:\n\t\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0)\n\t\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction longest_match(cur_match) {\n\t\t\tvar chain_length = max_chain_length; // max hash chain length\n\t\t\tvar scan = strstart; // current string\n\t\t\tvar match; // matched string\n\t\t\tvar len; // length of current match\n\t\t\tvar best_len = prev_length; // best match length so far\n\t\t\tvar limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n\t\t\tvar _nice_match = nice_match;\n\n\t\t\t// Stop when cur_match becomes <= limit. To simplify the code,\n\t\t\t// we prevent matches with the string of window index 0.\n\n\t\t\tvar wmask = w_mask;\n\n\t\t\tvar strend = strstart + MAX_MATCH;\n\t\t\tvar scan_end1 = window[scan + best_len - 1];\n\t\t\tvar scan_end = window[scan + best_len];\n\n\t\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n\t\t\t// 16.\n\t\t\t// It is easy to get rid of this optimization if necessary.\n\n\t\t\t// Do not waste too much time if we already have a good match:\n\t\t\tif (prev_length >= good_match) {\n\t\t\t\tchain_length >>= 2;\n\t\t\t}\n\n\t\t\t// Do not look for matches beyond the end of the input. This is\n\t\t\t// necessary\n\t\t\t// to make deflate deterministic.\n\t\t\tif (_nice_match > lookahead)\n\t\t\t\t_nice_match = lookahead;\n\n\t\t\tdo {\n\t\t\t\tmatch = cur_match;\n\n\t\t\t\t// Skip to next match if the match length cannot increase\n\t\t\t\t// or if the match length is less than 2:\n\t\t\t\tif (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]\n\t\t\t\t\t\t|| window[++match] != window[scan + 1])\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// The check at best_len-1 can be removed because it will be made\n\t\t\t\t// again later. (This heuristic is not always a win.)\n\t\t\t\t// It is not necessary to compare scan[2] and match[2] since they\n\t\t\t\t// are always equal when the other bytes match, given that\n\t\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\n\t\t\t\tscan += 2;\n\t\t\t\tmatch++;\n\n\t\t\t\t// We check for insufficient lookahead only every 8th comparison;\n\t\t\t\t// the 256th check will be made at strstart+258.\n\t\t\t\tdo {\n\t\t\t\t} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\n\n\t\t\t\tlen = MAX_MATCH - (strend - scan);\n\t\t\t\tscan = strend - MAX_MATCH;\n\n\t\t\t\tif (len > best_len) {\n\t\t\t\t\tmatch_start = cur_match;\n\t\t\t\t\tbest_len = len;\n\t\t\t\t\tif (len >= _nice_match)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tscan_end1 = window[scan + best_len - 1];\n\t\t\t\t\tscan_end = window[scan + best_len];\n\t\t\t\t}\n\n\t\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);\n\n\t\t\tif (best_len <= lookahead)\n\t\t\t\treturn best_len;\n\t\t\treturn lookahead;\n\t\t}\n\n\t\t// Compress as much as possible from the input stream, return the current\n\t\t// block state.\n\t\t// This function does not perform lazy evaluation of matches and inserts\n\t\t// new strings in the dictionary only for unmatched strings or for short\n\t\t// matches. It is used only for the fast compression options.\n\t\tfunction deflate_fast(flush) {\n\t\t\t// short hash_head = 0; // head of the hash chain\n\t\t\tvar hash_head = 0; // head of the hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\t// At this point we have always match_length < MIN_MATCH\n\n\t\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\t\t\t\t}\n\t\t\t\tif (match_length >= MIN_MATCH) {\n\t\t\t\t\t// check_match(strstart, match_start, match_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n\n\t\t\t\t\tlookahead -= match_length;\n\n\t\t\t\t\t// Insert new strings in the hash table only if the match length\n\t\t\t\t\t// is not too large. This saves time but degrades compression.\n\t\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n\t\t\t\t\t\tmatch_length--; // string at strstart already in hash table\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tstrstart++;\n\n\t\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\n\t\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t\t\t\t\t\t\t// always MIN_MATCH bytes ahead.\n\t\t\t\t\t\t} while (--match_length !== 0);\n\t\t\t\t\t\tstrstart++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstrstart += match_length;\n\t\t\t\t\t\tmatch_length = 0;\n\t\t\t\t\t\tins_h = window[strstart] & 0xff;\n\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does\n\t\t\t\t\t\t// not\n\t\t\t\t\t\t// matter since it will be recomputed at next deflate call.\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// No match, output a literal byte\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart] & 0xff);\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tstrstart++;\n\t\t\t\t}\n\t\t\t\tif (bflush) {\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\t// Same as above, but achieves better compression. We use a lazy\n\t\t// evaluation for matches: a match is finally adopted only if there is\n\t\t// no better match at the next window position.\n\t\tfunction deflate_slow(flush) {\n\t\t\t// short hash_head = 0; // head of hash chain\n\t\t\tvar hash_head = 0; // head of hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\t\t\tvar max_insert;\n\n\t\t\t// Process the input block.\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\tprev_length = match_length;\n\t\t\t\tprev_match = match_start;\n\t\t\t\tmatch_length = MIN_MATCH - 1;\n\n\t\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\n\t\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\n\n\t\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\n\t\t\t\t\t\t// but we will ignore the current match anyway.\n\t\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If there was a match at the previous step and the current\n\t\t\t\t// match is not better, output the previous match:\n\t\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\n\t\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;\n\t\t\t\t\t// Do not insert strings in hash table beyond this.\n\n\t\t\t\t\t// check_match(strstart-1, prev_match, prev_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\n\n\t\t\t\t\t// Insert in hash table all strings up to the end of the match.\n\t\t\t\t\t// strstart-1 and strstart are already inserted. If there is not\n\t\t\t\t\t// enough lookahead, the last two strings are not inserted in\n\t\t\t\t\t// the hash table.\n\t\t\t\t\tlookahead -= prev_length - 1;\n\t\t\t\t\tprev_length -= 2;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (++strstart <= max_insert) {\n\t\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (--prev_length !== 0);\n\t\t\t\t\tmatch_available = 0;\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\tstrstart++;\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t} else if (match_available !== 0) {\n\n\t\t\t\t\t// If there was no match at the previous position, output a\n\t\t\t\t\t// single literal. If there was a match but the current match\n\t\t\t\t\t// is longer, truncate the previous match to a single literal.\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t}\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t} else {\n\t\t\t\t\t// There is no previous match to compare with, wait for\n\t\t\t\t\t// the next step to decide.\n\n\t\t\t\t\tmatch_available = 1;\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (match_available !== 0) {\n\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\t\t\t\tmatch_available = 0;\n\t\t\t}\n\t\t\tflush_block_only(flush == Z_FINISH);\n\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction deflateReset(strm) {\n\t\t\tstrm.total_in = strm.total_out = 0;\n\t\t\tstrm.msg = null; //\n\t\t\t\n\t\t\tthat.pending = 0;\n\t\t\tthat.pending_out = 0;\n\n\t\t\tstatus = BUSY_STATE;\n\n\t\t\tlast_flush = Z_NO_FLUSH;\n\n\t\t\ttr_init();\n\t\t\tlm_init();\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {\n\t\t\tif (!_method)\n\t\t\t\t_method = Z_DEFLATED;\n\t\t\tif (!memLevel)\n\t\t\t\tmemLevel = DEF_MEM_LEVEL;\n\t\t\tif (!_strategy)\n\t\t\t\t_strategy = Z_DEFAULT_STRATEGY;\n\n\t\t\t// byte[] my_version=ZLIB_VERSION;\n\n\t\t\t//\n\t\t\t// if (!version || version[0] != my_version[0]\n\t\t\t// || stream_size != sizeof(z_stream)) {\n\t\t\t// return Z_VERSION_ERROR;\n\t\t\t// }\n\n\t\t\tstrm.msg = null;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION)\n\t\t\t\t_level = 6;\n\n\t\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\n\t\t\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tstrm.dstate = that;\n\n\t\t\tw_bits = bits;\n\t\t\tw_size = 1 << w_bits;\n\t\t\tw_mask = w_size - 1;\n\n\t\t\thash_bits = memLevel + 7;\n\t\t\thash_size = 1 << hash_bits;\n\t\t\thash_mask = hash_size - 1;\n\t\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n\t\t\twindow = new Uint8Array(w_size * 2);\n\t\t\tprev = [];\n\t\t\thead = [];\n\n\t\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default\n\n\t\t\t// We overlay pending_buf and d_buf+l_buf. This works since the average\n\t\t\t// output size for (length,distance) codes is <= 24 bits.\n\t\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);\n\t\t\tpending_buf_size = lit_bufsize * 4;\n\n\t\t\td_buf = Math.floor(lit_bufsize / 2);\n\t\t\tl_buf = (1 + 2) * lit_bufsize;\n\n\t\t\tlevel = _level;\n\n\t\t\tstrategy = _strategy;\n\t\t\tmethod = _method & 0xff;\n\n\t\t\treturn deflateReset(strm);\n\t\t};\n\n\t\tthat.deflateEnd = function() {\n\t\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\t// Deallocate in reverse order of allocations:\n\t\t\tthat.pending_buf = null;\n\t\t\thead = null;\n\t\t\tprev = null;\n\t\t\twindow = null;\n\t\t\t// free\n\t\t\tthat.dstate = null;\n\t\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n\t\t};\n\n\t\tthat.deflateParams = function(strm, _level, _strategy) {\n\t\t\tvar err = Z_OK;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION) {\n\t\t\t\t_level = 6;\n\t\t\t}\n\t\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n\t\t\t\t// Flush the last buffer:\n\t\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);\n\t\t\t}\n\n\t\t\tif (level != _level) {\n\t\t\t\tlevel = _level;\n\t\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\t\tgood_match = config_table[level].good_length;\n\t\t\t\tnice_match = config_table[level].nice_length;\n\t\t\t\tmax_chain_length = config_table[level].max_chain;\n\t\t\t}\n\t\t\tstrategy = _strategy;\n\t\t\treturn err;\n\t\t};\n\n\t\tthat.deflateSetDictionary = function(strm, dictionary, dictLength) {\n\t\t\tvar length = dictLength;\n\t\t\tvar n, index = 0;\n\n\t\t\tif (!dictionary || status != INIT_STATE)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length < MIN_MATCH)\n\t\t\t\treturn Z_OK;\n\t\t\tif (length > w_size - MIN_LOOKAHEAD) {\n\t\t\t\tlength = w_size - MIN_LOOKAHEAD;\n\t\t\t\tindex = dictLength - length; // use the tail of the dictionary\n\t\t\t}\n\t\t\twindow.set(dictionary.subarray(index, index + length), 0);\n\n\t\t\tstrstart = length;\n\t\t\tblock_start = length;\n\n\t\t\t// Insert all strings in the hash table (except for the last two bytes).\n\t\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next\n\t\t\t// call of fill_window.\n\n\t\t\tins_h = window[0] & 0xff;\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;\n\n\t\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\tprev[n & w_mask] = head[ins_h];\n\t\t\t\thead[ins_h] = n;\n\t\t\t}\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.deflate = function(_strm, flush) {\n\t\t\tvar i, header, level_flags, old_flush, bstate;\n\n\t\t\tif (flush > Z_FINISH || flush < 0) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tif (_strm.avail_out === 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\tstrm = _strm; // just in case\n\t\t\told_flush = last_flush;\n\t\t\tlast_flush = flush;\n\n\t\t\t// Write the zlib header\n\t\t\tif (status == INIT_STATE) {\n\t\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;\n\t\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;\n\n\t\t\t\tif (level_flags > 3)\n\t\t\t\t\tlevel_flags = 3;\n\t\t\t\theader |= (level_flags << 6);\n\t\t\t\tif (strstart !== 0)\n\t\t\t\t\theader |= PRESET_DICT;\n\t\t\t\theader += 31 - (header % 31);\n\n\t\t\t\tstatus = BUSY_STATE;\n\t\t\t\tputShortMSB(header);\n\t\t\t}\n\n\t\t\t// Flush as much pending output as possible\n\t\t\tif (that.pending !== 0) {\n\t\t\t\tstrm.flush_pending();\n\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t// console.log(\" avail_out==0\");\n\t\t\t\t\t// Since avail_out is 0, deflate will be called again with\n\t\t\t\t\t// more output space, but possibly with both pending and\n\t\t\t\t\t// avail_in equal to zero. There won't be anything to do,\n\t\t\t\t\t// but this is not an error situation so make sure we\n\t\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:\n\t\t\t\t\tlast_flush = -1;\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t}\n\n\t\t\t\t// Make sure there is something to do and avoid duplicate\n\t\t\t\t// consecutive\n\t\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep\n\t\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.\n\t\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n\t\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// User must not provide more input after the first FINISH:\n\t\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// Start a new block or continue the current one.\n\t\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {\n\t\t\t\tbstate = -1;\n\t\t\t\tswitch (config_table[level].func) {\n\t\t\t\tcase STORED:\n\t\t\t\t\tbstate = deflate_stored(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FAST:\n\t\t\t\t\tbstate = deflate_fast(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SLOW:\n\t\t\t\t\tbstate = deflate_slow(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {\n\t\t\t\t\tstatus = FINISH_STATE;\n\t\t\t\t}\n\t\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above\n\t\t\t\t\t}\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call\n\t\t\t\t\t// of deflate should use the same flush parameter to make sure\n\t\t\t\t\t// that the flush is complete. So we don't have to output an\n\t\t\t\t\t// empty block here, this will be done at next call. This also\n\t\t\t\t\t// ensures that for a very small output buffer, we emit at most\n\t\t\t\t\t// one empty block.\n\t\t\t\t}\n\n\t\t\t\tif (bstate == BlockDone) {\n\t\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {\n\t\t\t\t\t\t_tr_align();\n\t\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH\n\t\t\t\t\t\t_tr_stored_block(0, 0, false);\n\t\t\t\t\t\t// For a full flush, this empty block will be recognized\n\t\t\t\t\t\t// as a special marker by inflate_sync().\n\t\t\t\t\t\tif (flush == Z_FULL_FLUSH) {\n\t\t\t\t\t\t\t// state.head[s.hash_size-1]=0;\n\t\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)\n\t\t\t\t\t\t\t\t// forget history\n\t\t\t\t\t\t\t\thead[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstrm.flush_pending();\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above\n\t\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (flush != Z_FINISH)\n\t\t\t\treturn Z_OK;\n\t\t\treturn Z_STREAM_END;\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t\tvar that = this;\n\t\tthat.next_in_index = 0;\n\t\tthat.next_out_index = 0;\n\t\t// that.next_in; // next input byte\n\t\tthat.avail_in = 0; // number of bytes available at next_in\n\t\tthat.total_in = 0; // total nb of input bytes read so far\n\t\t// that.next_out; // next output byte should be put there\n\t\tthat.avail_out = 0; // remaining free space at next_out\n\t\tthat.total_out = 0; // total nb of bytes output so far\n\t\t// that.msg;\n\t\t// that.dstate;\n\t}\n\n\tZStream.prototype = {\n\t\tdeflateInit : function(level, bits) {\n\t\t\tvar that = this;\n\t\t\tthat.dstate = new Deflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.dstate.deflateInit(that, level, bits);\n\t\t},\n\n\t\tdeflate : function(flush) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\treturn that.dstate.deflate(that, flush);\n\t\t},\n\n\t\tdeflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.dstate.deflateEnd();\n\t\t\tthat.dstate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tdeflateParams : function(level, strategy) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateParams(that, level, strategy);\n\t\t},\n\n\t\tdeflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\n\t\t// Read a new buffer from the current input stream, update the\n\t\t// total number of bytes read. All deflate() input goes through\n\t\t// this function so some applications may wish to modify it to avoid\n\t\t// allocating a large strm->next_in buffer and copying from it.\n\t\t// (See also flush_pending()).\n\t\tread_buf : function(buf, start, size) {\n\t\t\tvar that = this;\n\t\t\tvar len = that.avail_in;\n\t\t\tif (len > size)\n\t\t\t\tlen = size;\n\t\t\tif (len === 0)\n\t\t\t\treturn 0;\n\t\t\tthat.avail_in -= len;\n\t\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n\t\t\tthat.next_in_index += len;\n\t\t\tthat.total_in += len;\n\t\t\treturn len;\n\t\t},\n\n\t\t// Flush as much pending output as possible. All deflate() output goes\n\t\t// through this function so some applications may wish to modify it\n\t\t// to avoid allocating a large strm->next_out buffer and copying into it.\n\t\t// (See also read_buf()).\n\t\tflush_pending : function() {\n\t\t\tvar that = this;\n\t\t\tvar len = that.dstate.pending;\n\n\t\t\tif (len > that.avail_out)\n\t\t\t\tlen = that.avail_out;\n\t\t\tif (len === 0)\n\t\t\t\treturn;\n\n\t\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n\t\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n\t\t\t// len)) {\n\t\t\t// console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n\t\t\t// that.next_out_index + \", \" + len);\n\t\t\t// console.log(\"avail_out=\" + that.avail_out);\n\t\t\t// }\n\n\t\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n\n\t\t\tthat.next_out_index += len;\n\t\t\tthat.dstate.pending_out += len;\n\t\t\tthat.total_out += len;\n\t\t\tthat.avail_out -= len;\n\t\t\tthat.dstate.pending -= len;\n\t\t\tif (that.dstate.pending === 0) {\n\t\t\t\tthat.dstate.pending_out = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Deflater\n\n\tfunction Deflater(options) {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar level = options ? options.level : Z_DEFAULT_COMPRESSION;\n\t\tif (typeof level == \"undefined\")\n\t\t\tlevel = Z_DEFAULT_COMPRESSION;\n\t\tz.deflateInit(level);\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (!data.length)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(flush);\n\t\t\t\tif (err != Z_OK)\n\t\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index == bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tvar err, buffers = [], bufferIndex = 0, bufferSize = 0, array;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(Z_FINISH);\n\t\t\t\tif (err != Z_STREAM_END && err != Z_OK)\n\t\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\t\tif (bufsize - z.avail_out > 0)\n\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tz.deflateEnd();\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t}\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Deflater = env._jzlib_Deflater = Deflater;\n})(this);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/deflate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/inflate.js",
    "content": "/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t\"use strict\";\n\n\t// Global\n\tvar MAX_BITS = 15;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_MEM_ERROR = -4;\n\tvar Z_BUF_ERROR = -5;\n\n\tvar inflate_mask = [ 0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,\n\t\t\t0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff ];\n\n\tvar MANY = 1440;\n\n\t// JZlib version : \"1.0.2\"\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_FINISH = 4;\n\n\t// InfTree\n\tvar fixed_bl = 9;\n\tvar fixed_bd = 5;\n\n\tvar fixed_tl = [ 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,\n\t\t\t0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,\n\t\t\t0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,\n\t\t\t0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,\n\t\t\t0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,\n\t\t\t35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,\n\t\t\t26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,\n\t\t\t7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,\n\t\t\t8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,\n\t\t\t8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,\n\t\t\t0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,\n\t\t\t81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,\n\t\t\t0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,\n\t\t\t84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,\n\t\t\t0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,\n\t\t\t80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,\n\t\t\t0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,\n\t\t\t0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,\n\t\t\t0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,\n\t\t\t193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,\n\t\t\t120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,\n\t\t\t227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,\n\t\t\t92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,\n\t\t\t249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,\n\t\t\t130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,\n\t\t\t181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,\n\t\t\t102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,\n\t\t\t221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,\n\t\t\t8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,\n\t\t\t147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,\n\t\t\t85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,\n\t\t\t235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,\n\t\t\t141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,\n\t\t\t167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,\n\t\t\t107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,\n\t\t\t207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,\n\t\t\t127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255 ];\n\tvar fixed_td = [ 80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,\n\t\t\t8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,\n\t\t\t24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577 ];\n\n\t// Tables for deflate from PKZIP's appnote.txt.\n\tvar cplens = [ // Copy lengths for literal codes 257..285\n\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];\n\n\t// see note #13 above about 258\n\tvar cplext = [ // Extra bits for literal codes 257..285\n\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n\t];\n\n\tvar cpdist = [ // Copy offsets for distance codes 0..29\n\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\n\n\tvar cpdext = [ // Extra bits for distance codes\n\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// If BMAX needs to be larger than 16, then h and x[] should be uLong.\n\tvar BMAX = 15; // maximum bit length of any code\n\n\tfunction InfTree() {\n\t\tvar that = this;\n\n\t\tvar hn; // hufts used in space\n\t\tvar v; // work area for huft_build\n\t\tvar c; // bit length count table\n\t\tvar r; // table entry for structure assignment\n\t\tvar u; // table stack\n\t\tvar x; // bit offsets, then code stack\n\n\t\tfunction huft_build(b, // code lengths in bits (all assumed <=\n\t\t// BMAX)\n\t\tbindex, n, // number of codes (assumed <= 288)\n\t\ts, // number of simple-valued codes (0..s-1)\n\t\td, // list of base values for non-simple codes\n\t\te, // list of extra bits for non-simple codes\n\t\tt, // result: starting table\n\t\tm, // maximum lookup bits, returns actual\n\t\thp,// space for trees\n\t\thn,// hufts used in space\n\t\tv // working area: values in order of bit length\n\t\t) {\n\t\t\t// Given a list of code lengths and a maximum table size, make a set of\n\t\t\t// tables to decode that set of codes. Return Z_OK on success,\n\t\t\t// Z_BUF_ERROR\n\t\t\t// if the given code set is incomplete (the tables are still built in\n\t\t\t// this\n\t\t\t// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n\t\t\t// of\n\t\t\t// lengths), or Z_MEM_ERROR if not enough memory.\n\n\t\t\tvar a; // counter for codes of length k\n\t\t\tvar f; // i repeats in table every f entries\n\t\t\tvar g; // maximum code length\n\t\t\tvar h; // table level\n\t\t\tvar i; // counter, current code\n\t\t\tvar j; // counter\n\t\t\tvar k; // number of bits in current code\n\t\t\tvar l; // bits per table (returned in m)\n\t\t\tvar mask; // (1 << w) - 1, to avoid cc -O bug on HP\n\t\t\tvar p; // pointer into c[], b[], or v[]\n\t\t\tvar q; // points to current table\n\t\t\tvar w; // bits before this table == (l * h)\n\t\t\tvar xp; // pointer into x\n\t\t\tvar y; // number of dummy codes added\n\t\t\tvar z; // number of entries in current table\n\n\t\t\t// Generate counts for each bit length\n\n\t\t\tp = 0;\n\t\t\ti = n;\n\t\t\tdo {\n\t\t\t\tc[b[bindex + p]]++;\n\t\t\t\tp++;\n\t\t\t\ti--; // assume all entries <= BMAX\n\t\t\t} while (i !== 0);\n\n\t\t\tif (c[0] == n) { // null input--all zero length codes\n\t\t\t\tt[0] = -1;\n\t\t\t\tm[0] = 0;\n\t\t\t\treturn Z_OK;\n\t\t\t}\n\n\t\t\t// Find minimum and maximum length, bound *m by those\n\t\t\tl = m[0];\n\t\t\tfor (j = 1; j <= BMAX; j++)\n\t\t\t\tif (c[j] !== 0)\n\t\t\t\t\tbreak;\n\t\t\tk = j; // minimum code length\n\t\t\tif (l < j) {\n\t\t\t\tl = j;\n\t\t\t}\n\t\t\tfor (i = BMAX; i !== 0; i--) {\n\t\t\t\tif (c[i] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tg = i; // maximum code length\n\t\t\tif (l > i) {\n\t\t\t\tl = i;\n\t\t\t}\n\t\t\tm[0] = l;\n\n\t\t\t// Adjust last length count to fill out codes, if needed\n\t\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\n\t\t\t\tif ((y -= c[j]) < 0) {\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((y -= c[i]) < 0) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tc[i] += y;\n\n\t\t\t// Generate starting offsets into the value table for each length\n\t\t\tx[1] = j = 0;\n\t\t\tp = 1;\n\t\t\txp = 2;\n\t\t\twhile (--i !== 0) { // note that i == g from above\n\t\t\t\tx[xp] = (j += c[p]);\n\t\t\t\txp++;\n\t\t\t\tp++;\n\t\t\t}\n\n\t\t\t// Make a table of values in order of bit lengths\n\t\t\ti = 0;\n\t\t\tp = 0;\n\t\t\tdo {\n\t\t\t\tif ((j = b[bindex + p]) !== 0) {\n\t\t\t\t\tv[x[j]++] = i;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t} while (++i < n);\n\t\t\tn = x[g]; // set n to length of v\n\n\t\t\t// Generate the Huffman codes and for each, make the table entries\n\t\t\tx[0] = i = 0; // first Huffman code is zero\n\t\t\tp = 0; // grab values in bit order\n\t\t\th = -1; // no tables yet--level -1\n\t\t\tw = -l; // bits decoded == (l * h)\n\t\t\tu[0] = 0; // just to keep compilers happy\n\t\t\tq = 0; // ditto\n\t\t\tz = 0; // ditto\n\n\t\t\t// go through the bit lengths (k already is bits in shortest code)\n\t\t\tfor (; k <= g; k++) {\n\t\t\t\ta = c[k];\n\t\t\t\twhile (a-- !== 0) {\n\t\t\t\t\t// here i is the Huffman code of length k bits for value *p\n\t\t\t\t\t// make tables up to required level\n\t\t\t\t\twhile (k > w + l) {\n\t\t\t\t\t\th++;\n\t\t\t\t\t\tw += l; // previous table always l bits\n\t\t\t\t\t\t// compute minimum size table less than or equal to l bits\n\t\t\t\t\t\tz = g - w;\n\t\t\t\t\t\tz = (z > l) ? l : z; // table size upper limit\n\t\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\n\t\t\t\t\t\t\t// too few codes for\n\t\t\t\t\t\t\t// k-w bit table\n\t\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\n\t\t\t\t\t\t\txp = k;\n\t\t\t\t\t\t\tif (j < z) {\n\t\t\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\n\t\t\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp])\n\t\t\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\n\t\t\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tz = 1 << j; // table entries for j-bit table\n\n\t\t\t\t\t\t// allocate new table\n\t\t\t\t\t\tif (hn[0] + z > MANY) { // (note: doesn't matter for fixed)\n\t\t\t\t\t\t\treturn Z_DATA_ERROR; // overflow of MANY\n\t\t\t\t\t\t}\n\t\t\t\t\t\tu[h] = q = /* hp+ */hn[0]; // DEBUG\n\t\t\t\t\t\thn[0] += z;\n\n\t\t\t\t\t\t// connect to last table, if there is one\n\t\t\t\t\t\tif (h !== 0) {\n\t\t\t\t\t\t\tx[h] = i; // save pattern for backing up\n\t\t\t\t\t\t\tr[0] = /* (byte) */j; // bits in this table\n\t\t\t\t\t\t\tr[1] = /* (byte) */l; // bits to dump before this table\n\t\t\t\t\t\t\tj = i >>> (w - l);\n\t\t\t\t\t\t\tr[2] = /* (int) */(q - u[h - 1] - j); // offset to this table\n\t\t\t\t\t\t\thp.set(r, (u[h - 1] + j) * 3);\n\t\t\t\t\t\t\t// to\n\t\t\t\t\t\t\t// last\n\t\t\t\t\t\t\t// table\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt[0] = q; // first table is returned result\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// set up table entry in r\n\t\t\t\t\tr[1] = /* (byte) */(k - w);\n\t\t\t\t\tif (p >= n) {\n\t\t\t\t\t\tr[0] = 128 + 64; // out of values--invalid code\n\t\t\t\t\t} else if (v[p] < s) {\n\t\t\t\t\t\tr[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is\n\t\t\t\t\t\t// end-of-block\n\t\t\t\t\t\tr[2] = v[p++]; // simple code is just the value\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look\n\t\t\t\t\t\t// up in lists\n\t\t\t\t\t\tr[2] = d[v[p++] - s];\n\t\t\t\t\t}\n\n\t\t\t\t\t// fill code-like entries with r\n\t\t\t\t\tf = 1 << (k - w);\n\t\t\t\t\tfor (j = i >>> w; j < z; j += f) {\n\t\t\t\t\t\thp.set(r, (q + j) * 3);\n\t\t\t\t\t}\n\n\t\t\t\t\t// backwards increment the k-bit code i\n\t\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {\n\t\t\t\t\t\ti ^= j;\n\t\t\t\t\t}\n\t\t\t\t\ti ^= j;\n\n\t\t\t\t\t// backup over finished tables\n\t\t\t\t\tmask = (1 << w) - 1; // needed on HP, cc -O bug\n\t\t\t\t\twhile ((i & mask) != x[h]) {\n\t\t\t\t\t\th--; // don't need to update q\n\t\t\t\t\t\tw -= l;\n\t\t\t\t\t\tmask = (1 << w) - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return Z_BUF_ERROR if we were given an incomplete table\n\t\t\treturn y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n\t\t}\n\n\t\tfunction initWorkArea(vsize) {\n\t\t\tvar i;\n\t\t\tif (!hn) {\n\t\t\t\thn = []; // []; //new Array(1);\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t\tc = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t\tr = []; // new Array(3);\n\t\t\t\tu = new Int32Array(BMAX); // new Array(BMAX);\n\t\t\t\tx = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t}\n\t\t\tif (v.length < vsize) {\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t}\n\t\t\tfor (i = 0; i < vsize; i++) {\n\t\t\t\tv[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < BMAX + 1; i++) {\n\t\t\t\tc[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < 3; i++) {\n\t\t\t\tr[i] = 0;\n\t\t\t}\n\t\t\t// for(int i=0; i<BMAX; i++){u[i]=0;}\n\t\t\tu.set(c.subarray(0, BMAX), 0);\n\t\t\t// for(int i=0; i<BMAX+1; i++){x[i]=0;}\n\t\t\tx.set(c.subarray(0, BMAX + 1), 0);\n\t\t}\n\n\t\tthat.inflate_trees_bits = function(c, // 19 code lengths\n\t\tbb, // bits tree desired/actual depth\n\t\ttb, // bits tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\t\t\tinitWorkArea(19);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n\n\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\tz.msg = \"oversubscribed dynamic bit lengths tree\";\n\t\t\t} else if (result == Z_BUF_ERROR || bb[0] === 0) {\n\t\t\t\tz.msg = \"incomplete dynamic bit lengths tree\";\n\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tthat.inflate_trees_dynamic = function(nl, // number of literal/length codes\n\t\tnd, // number of distance codes\n\t\tc, // that many (total) code lengths\n\t\tbl, // literal desired/actual bit depth\n\t\tbd, // distance desired/actual bit depth\n\t\ttl, // literal/length tree result\n\t\ttd, // distance tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\n\t\t\t// build literal/length tree\n\t\t\tinitWorkArea(288);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n\t\t\tif (result != Z_OK || bl[0] === 0) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = \"oversubscribed literal/length tree\";\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = \"incomplete literal/length tree\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// build distance tree\n\t\t\tinitWorkArea(288);\n\t\t\tresult = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n\n\t\t\tif (result != Z_OK || (bd[0] === 0 && nl > 257)) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = \"oversubscribed distance tree\";\n\t\t\t\t} else if (result == Z_BUF_ERROR) {\n\t\t\t\t\tz.msg = \"incomplete distance tree\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = \"empty distance tree with lengths\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn Z_OK;\n\t\t};\n\n\t}\n\n\tInfTree.inflate_trees_fixed = function(bl, // literal desired/actual bit depth\n\tbd, // distance desired/actual bit depth\n\ttl,// literal/length tree result\n\ttd// distance tree result\n\t) {\n\t\tbl[0] = fixed_bl;\n\t\tbd[0] = fixed_bd;\n\t\ttl[0] = fixed_tl;\n\t\ttd[0] = fixed_td;\n\t\treturn Z_OK;\n\t};\n\n\t// InfCodes\n\n\t// waiting for \"i:\"=input,\n\t// \"o:\"=output,\n\t// \"x:\"=nothing\n\tvar START = 0; // x: set up for LEN\n\tvar LEN = 1; // i: get length/literal/eob next\n\tvar LENEXT = 2; // i: getting length extra (have base)\n\tvar DIST = 3; // i: get distance next\n\tvar DISTEXT = 4;// i: getting distance extra\n\tvar COPY = 5; // o: copying bytes in window, waiting\n\t// for space\n\tvar LIT = 6; // o: got literal, waiting for output\n\t// space\n\tvar WASH = 7; // o: got eob, possibly still output\n\t// waiting\n\tvar END = 8; // x: got eob and all data flushed\n\tvar BADCODE = 9;// x: got error\n\n\tfunction InfCodes() {\n\t\tvar that = this;\n\n\t\tvar mode; // current inflate_codes mode\n\n\t\t// mode dependent information\n\t\tvar len = 0;\n\n\t\tvar tree; // pointer into tree\n\t\tvar tree_index = 0;\n\t\tvar need = 0; // bits needed\n\n\t\tvar lit = 0;\n\n\t\t// if EXT or COPY, where and how much\n\t\tvar get = 0; // bits to get for extra\n\t\tvar dist = 0; // distance back to copy from\n\n\t\tvar lbits = 0; // ltree bits decoded per branch\n\t\tvar dbits = 0; // dtree bits decoder per branch\n\t\tvar ltree; // literal/length/eob tree\n\t\tvar ltree_index = 0; // literal/length/eob tree\n\t\tvar dtree; // distance tree\n\t\tvar dtree_index = 0; // distance tree\n\n\t\t// Called with number of bytes left to write in window at least 258\n\t\t// (the maximum string length) and number of input bytes available\n\t\t// at least ten. The ten bytes are six bytes for the longest length/\n\t\t// distance pair plus four bytes for overloading the bit buffer.\n\n\t\tfunction inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n\t\t\tvar t; // temporary pointer\n\t\t\tvar tp; // temporary pointer\n\t\t\tvar tp_index; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar ml; // mask for literal/length tree\n\t\t\tvar md; // mask for distance tree\n\t\t\tvar c; // bytes to copy\n\t\t\tvar d; // distance back to copy from\n\t\t\tvar r; // copy source pointer\n\n\t\t\tvar tp_index_t_3; // (tp_index+t)*3\n\n\t\t\t// load input, output, bit values\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// initialize masks\n\t\t\tml = inflate_mask[bl];\n\t\t\tmd = inflate_mask[bd];\n\n\t\t\t// do until not enough input or output space for fast loop\n\t\t\tdo { // assume called with m >= 258 && n >= 10\n\t\t\t\t// get literal/length code\n\t\t\t\twhile (k < (20)) { // max bits for literal/length code\n\t\t\t\t\tn--;\n\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\tk += 8;\n\t\t\t\t}\n\n\t\t\t\tt = b & ml;\n\t\t\t\ttp = tl;\n\t\t\t\ttp_index = tl_index;\n\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\tm--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdo {\n\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\tc = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);\n\n\t\t\t\t\t\tb >>= e;\n\t\t\t\t\t\tk -= e;\n\n\t\t\t\t\t\t// decode distance base of block to copy\n\t\t\t\t\t\twhile (k < (15)) { // max bits for distance code\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tt = b & md;\n\t\t\t\t\t\ttp = td;\n\t\t\t\t\t\ttp_index = td_index;\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\te = tp[tp_index_t_3];\n\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\t\t\t// get extra bits to add to distance base\n\t\t\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\t\t\twhile (k < (e)) { // get extra bits (up to 13)\n\t\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\td = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n\n\t\t\t\t\t\t\t\tb >>= (e);\n\t\t\t\t\t\t\t\tk -= (e);\n\n\t\t\t\t\t\t\t\t// do the copy\n\t\t\t\t\t\t\t\tm -= c;\n\t\t\t\t\t\t\t\tif (q >= d) { // offset before dest\n\t\t\t\t\t\t\t\t\t// just copy\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tif (q - r > 0 && 2 > (q - r)) {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // minimum\n\t\t\t\t\t\t\t\t\t\t// count is\n\t\t\t\t\t\t\t\t\t\t// three,\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // so unroll\n\t\t\t\t\t\t\t\t\t\t// loop a\n\t\t\t\t\t\t\t\t\t\t// little\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + 2), q);\n\t\t\t\t\t\t\t\t\t\tq += 2;\n\t\t\t\t\t\t\t\t\t\tr += 2;\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else { // else offset after destination\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\tr += s.end; // force pointer in window\n\t\t\t\t\t\t\t\t\t} while (r < 0); // covers invalid distances\n\t\t\t\t\t\t\t\t\te = s.end - r;\n\t\t\t\t\t\t\t\t\tif (c > e) { // if source crosses,\n\t\t\t\t\t\t\t\t\t\tc -= e; // wrapped copy\n\t\t\t\t\t\t\t\t\t\tif (q - r > 0 && e > (q - r)) {\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t\t\t} while (--e !== 0);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + e), q);\n\t\t\t\t\t\t\t\t\t\t\tq += e;\n\t\t\t\t\t\t\t\t\t\t\tr += e;\n\t\t\t\t\t\t\t\t\t\t\te = 0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tr = 0; // copy rest from start of window\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// copy all or what's left\n\t\t\t\t\t\t\t\tif (q - r > 0 && c > (q - r)) {\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t} while (--c !== 0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + c), q);\n\t\t\t\t\t\t\t\t\tq += c;\n\t\t\t\t\t\t\t\t\tr += c;\n\t\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else if ((e & 64) === 0) {\n\t\t\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\t\t\te = tp[tp_index_t_3];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tz.msg = \"invalid distance code\";\n\n\t\t\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\t\t\tn += c;\n\t\t\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((e & 64) === 0) {\n\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\tm--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ((e & 32) !== 0) {\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t}\n\t\t\t\t} while (true);\n\t\t\t} while (m >= 258 && n >= 10);\n\n\t\t\t// not enough input or output--restore pointers and return\n\t\t\tc = z.avail_in - n;\n\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\tn += c;\n\t\t\tp -= c;\n\t\t\tk -= c << 3;\n\n\t\t\ts.bitb = b;\n\t\t\ts.bitk = k;\n\t\t\tz.avail_in = n;\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\ts.write = q;\n\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.init = function(bl, bd, tl, tl_index, td, td_index) {\n\t\t\tmode = START;\n\t\t\tlbits = /* (byte) */bl;\n\t\t\tdbits = /* (byte) */bd;\n\t\t\tltree = tl;\n\t\t\tltree_index = tl_index;\n\t\t\tdtree = td;\n\t\t\tdtree_index = td_index;\n\t\t\ttree = null;\n\t\t};\n\n\t\tthat.proc = function(s, z, r) {\n\t\t\tvar j; // temporary storage\n\t\t\tvar tindex; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b = 0; // bit buffer\n\t\t\tvar k = 0; // bits in bit buffer\n\t\t\tvar p = 0; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar f; // pointer to copy strings from\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// process input and output based on current state\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n\t\t\t\tcase START: // x: set up for LEN\n\t\t\t\t\tif (m >= 258 && n >= 10) {\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\tr = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n\n\t\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\t\tb = s.bitb;\n\t\t\t\t\t\tk = s.bitk;\n\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\tif (r != Z_OK) {\n\t\t\t\t\t\t\tmode = r == Z_STREAM_END ? WASH : BADCODE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tneed = lbits;\n\t\t\t\t\ttree = ltree;\n\t\t\t\t\ttree_index = ltree_index;\n\n\t\t\t\t\tmode = LEN;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase LEN: // i: get length/literal/eob next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>>= (tree[tindex + 1]);\n\t\t\t\t\tk -= (tree[tindex + 1]);\n\n\t\t\t\t\te = tree[tindex];\n\n\t\t\t\t\tif (e === 0) { // literal\n\t\t\t\t\t\tlit = tree[tindex + 2];\n\t\t\t\t\t\tmode = LIT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 16) !== 0) { // length\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tlen = tree[tindex + 2];\n\t\t\t\t\t\tmode = LENEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 32) !== 0) { // end of block\n\t\t\t\t\t\tmode = WASH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase LENEXT: // i: getting length extra (have base)\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tlen += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tneed = dbits;\n\t\t\t\t\ttree = dtree;\n\t\t\t\t\ttree_index = dtree_index;\n\t\t\t\t\tmode = DIST;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DIST: // i: get distance next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>= tree[tindex + 1];\n\t\t\t\t\tk -= tree[tindex + 1];\n\n\t\t\t\t\te = (tree[tindex]);\n\t\t\t\t\tif ((e & 16) !== 0) { // distance\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tdist = tree[tindex + 2];\n\t\t\t\t\t\tmode = DISTEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid distance code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase DISTEXT: // i: getting distance extra\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tdist += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tmode = COPY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase COPY: // o: copying bytes in window, waiting for space\n\t\t\t\t\tf = q - dist;\n\t\t\t\t\twhile (f < 0) { // modulo window size-\"while\" instead\n\t\t\t\t\t\tf += s.end; // of \"if\" handles invalid distances\n\t\t\t\t\t}\n\t\t\t\t\twhile (len !== 0) {\n\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.window[q++] = s.window[f++];\n\t\t\t\t\t\tm--;\n\n\t\t\t\t\t\tif (f == s.end)\n\t\t\t\t\t\t\tf = 0;\n\t\t\t\t\t\tlen--;\n\t\t\t\t\t}\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIT: // o: got literal, waiting for output space\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\ts.window[q++] = /* (byte) */lit;\n\t\t\t\t\tm--;\n\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase WASH: // o: got eob, possibly more output\n\t\t\t\t\tif (k > 7) { // return unused byte, if any\n\t\t\t\t\t\tk -= 8;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t\tp--; // can always return one\n\t\t\t\t\t}\n\n\t\t\t\t\ts.write = q;\n\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\tq = s.write;\n\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\tif (s.read != s.write) {\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = END;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase END:\n\t\t\t\t\tr = Z_STREAM_END;\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase BADCODE: // x: got error\n\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function() {\n\t\t\t// ZFREE(z, c);\n\t\t};\n\n\t}\n\n\t// InfBlocks\n\n\t// Table for deflate from PKZIP's appnote.txt.\n\tvar border = [ // Order of the bit length code lengths\n\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\tvar TYPE = 0; // get type bits (3, including end bit)\n\tvar LENS = 1; // get lengths for stored\n\tvar STORED = 2;// processing stored block\n\tvar TABLE = 3; // get table lengths\n\tvar BTREE = 4; // get bit lengths tree for a dynamic\n\t// block\n\tvar DTREE = 5; // get length, distance trees for a\n\t// dynamic block\n\tvar CODES = 6; // processing fixed or dynamic block\n\tvar DRY = 7; // output remaining window bytes\n\tvar DONELOCKS = 8; // finished last block, done\n\tvar BADBLOCKS = 9; // ot a data error--stuck here\n\n\tfunction InfBlocks(z, w) {\n\t\tvar that = this;\n\n\t\tvar mode = TYPE; // current inflate_block mode\n\n\t\tvar left = 0; // if STORED, bytes left to copy\n\n\t\tvar table = 0; // table lengths (14 bits)\n\t\tvar index = 0; // index into blens (or border)\n\t\tvar blens; // bit lengths of codes\n\t\tvar bb = [ 0 ]; // bit length tree depth\n\t\tvar tb = [ 0 ]; // bit length decoding tree\n\n\t\tvar codes = new InfCodes(); // if CODES, current state\n\n\t\tvar last = 0; // true if this block is the last block\n\n\t\tvar hufts = new Int32Array(MANY * 3); // single malloc for tree space\n\t\tvar check = 0; // check on output\n\t\tvar inftree = new InfTree();\n\n\t\tthat.bitk = 0; // bits in bit buffer\n\t\tthat.bitb = 0; // bit buffer\n\t\tthat.window = new Uint8Array(w); // sliding window\n\t\tthat.end = w; // one byte after sliding window\n\t\tthat.read = 0; // window read pointer\n\t\tthat.write = 0; // window write pointer\n\n\t\tthat.reset = function(z, c) {\n\t\t\tif (c)\n\t\t\t\tc[0] = check;\n\t\t\t// if (mode == BTREE || mode == DTREE) {\n\t\t\t// }\n\t\t\tif (mode == CODES) {\n\t\t\t\tcodes.free(z);\n\t\t\t}\n\t\t\tmode = TYPE;\n\t\t\tthat.bitk = 0;\n\t\t\tthat.bitb = 0;\n\t\t\tthat.read = that.write = 0;\n\t\t};\n\n\t\tthat.reset(z, null);\n\n\t\t// copy as much as possible from the sliding window to the output area\n\t\tthat.inflate_flush = function(z, r) {\n\t\t\tvar n;\n\t\t\tvar p;\n\t\t\tvar q;\n\n\t\t\t// local copies of source and destination pointers\n\t\t\tp = z.next_out_index;\n\t\t\tq = that.read;\n\n\t\t\t// compute number of bytes to copy as far as end of window\n\t\t\tn = /* (int) */((q <= that.write ? that.write : that.end) - q);\n\t\t\tif (n > z.avail_out)\n\t\t\t\tn = z.avail_out;\n\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\tr = Z_OK;\n\n\t\t\t// update counters\n\t\t\tz.avail_out -= n;\n\t\t\tz.total_out += n;\n\n\t\t\t// copy as far as end of window\n\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\tp += n;\n\t\t\tq += n;\n\n\t\t\t// see if more to copy at beginning of window\n\t\t\tif (q == that.end) {\n\t\t\t\t// wrap pointers\n\t\t\t\tq = 0;\n\t\t\t\tif (that.write == that.end)\n\t\t\t\t\tthat.write = 0;\n\n\t\t\t\t// compute bytes to copy\n\t\t\t\tn = that.write - q;\n\t\t\t\tif (n > z.avail_out)\n\t\t\t\t\tn = z.avail_out;\n\t\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t// update counters\n\t\t\t\tz.avail_out -= n;\n\t\t\t\tz.total_out += n;\n\n\t\t\t\t// copy\n\t\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\t\tp += n;\n\t\t\t\tq += n;\n\t\t\t}\n\n\t\t\t// update pointers\n\t\t\tz.next_out_index = p;\n\t\t\tthat.read = q;\n\n\t\t\t// done\n\t\t\treturn r;\n\t\t};\n\n\t\tthat.proc = function(z, r) {\n\t\t\tvar t; // temporary storage\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\n\t\t\tvar i;\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\t// {\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = that.bitb;\n\t\t\tk = that.bitk;\n\t\t\t// }\n\t\t\t// {\n\t\t\tq = that.write;\n\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t// }\n\n\t\t\t// process input based on current state\n\t\t\t// DEBUG dtree\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\tcase TYPE:\n\n\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\t\t\t\t\tt = /* (int) */(b & 7);\n\t\t\t\t\tlast = t & 1;\n\n\t\t\t\t\tswitch (t >>> 1) {\n\t\t\t\t\tcase 0: // stored\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tt = k & 7; // go to byte boundary\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = LENS; // get length of stored block\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: // fixed\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tvar bl = []; // new Array(1);\n\t\t\t\t\t\tvar bd = []; // new Array(1);\n\t\t\t\t\t\tvar tl = [ [] ]; // new Array(1);\n\t\t\t\t\t\tvar td = [ [] ]; // new Array(1);\n\n\t\t\t\t\t\tInfTree.inflate_trees_fixed(bl, bd, tl, td);\n\t\t\t\t\t\tcodes.init(bl[0], bd[0], tl[0], 0, td[0], 0);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = CODES;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: // dynamic\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = TABLE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3: // illegal\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"invalid block type\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LENS:\n\n\t\t\t\t\twhile (k < (32)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"invalid stored block lengths\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tleft = (b & 0xffff);\n\t\t\t\t\tb = k = 0; // dump bits\n\t\t\t\t\tmode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STORED:\n\t\t\t\t\tif (n === 0) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = that.write;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\tt = left;\n\t\t\t\t\tif (t > n)\n\t\t\t\t\t\tt = n;\n\t\t\t\t\tif (t > m)\n\t\t\t\t\t\tt = m;\n\t\t\t\t\tthat.window.set(z.read_buf(p, t), q);\n\t\t\t\t\tp += t;\n\t\t\t\t\tn -= t;\n\t\t\t\t\tq += t;\n\t\t\t\t\tm -= t;\n\t\t\t\t\tif ((left -= t) !== 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tmode = last !== 0 ? DRY : TYPE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TABLE:\n\n\t\t\t\t\twhile (k < (14)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttable = t = (b & 0x3fff);\n\t\t\t\t\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"too many length or distance symbols\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\t\t\t\t\tif (!blens || blens.length < t) {\n\t\t\t\t\t\tblens = []; // new Array(t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0; i < t; i++) {\n\t\t\t\t\t\t\tblens[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// {\n\t\t\t\t\tb >>>= (14);\n\t\t\t\t\tk -= (14);\n\t\t\t\t\t// }\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = BTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase BTREE:\n\t\t\t\t\twhile (index < 4 + (table >>> 10)) {\n\t\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tblens[border[index++]] = b & 7;\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (index < 19) {\n\t\t\t\t\t\tblens[border[index++]] = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbb[0] = 7;\n\t\t\t\t\tt = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tr = t;\n\t\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = DTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DTREE:\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tt = table;\n\t\t\t\t\t\tif (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar j, c;\n\n\t\t\t\t\t\tt = bb[0];\n\n\t\t\t\t\t\twhile (k < (t)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (tb[0] == -1) {\n\t\t\t\t\t\t// System.err.println(\"null...\");\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tt = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n\t\t\t\t\t\tc = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n\t\t\t\t\t\tif (c < 16) {\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t\tblens[index++] = c;\n\t\t\t\t\t\t} else { // c == 16..18\n\t\t\t\t\t\t\ti = c == 18 ? 7 : c - 14;\n\t\t\t\t\t\t\tj = c == 18 ? 11 : 3;\n\n\t\t\t\t\t\t\twhile (k < (t + i)) {\n\t\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\n\t\t\t\t\t\t\tj += (b & inflate_mask[i]);\n\n\t\t\t\t\t\t\tb >>>= (i);\n\t\t\t\t\t\t\tk -= (i);\n\n\t\t\t\t\t\t\ti = index;\n\t\t\t\t\t\t\tt = table;\n\t\t\t\t\t\t\tif (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {\n\t\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t\t\tz.msg = \"invalid bit length repeat\";\n\t\t\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tc = c == 16 ? blens[i - 1] : 0;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tblens[i++] = c;\n\t\t\t\t\t\t\t} while (--j !== 0);\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttb[0] = -1;\n\t\t\t\t\t// {\n\t\t\t\t\tvar bl_ = []; // new Array(1);\n\t\t\t\t\tvar bd_ = []; // new Array(1);\n\t\t\t\t\tvar tl_ = []; // new Array(1);\n\t\t\t\t\tvar td_ = []; // new Array(1);\n\t\t\t\t\tbl_[0] = 9; // must be <= 9 for lookahead assumptions\n\t\t\t\t\tbd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n\t\t\t\t\tt = table;\n\t\t\t\t\tt = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tif (t == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr = t;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tcodes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);\n\t\t\t\t\t// }\n\t\t\t\t\tmode = CODES;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase CODES:\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\n\t\t\t\t\tif ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\t\t\t\t\tcodes.free(z);\n\n\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\tb = that.bitb;\n\t\t\t\t\tk = that.bitk;\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\n\t\t\t\t\tif (last === 0) {\n\t\t\t\t\t\tmode = TYPE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = DRY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DRY:\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\tif (that.read != that.write) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = DONELOCKS;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONELOCKS:\n\t\t\t\t\tr = Z_STREAM_END;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\tcase BADBLOCKS:\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function(z) {\n\t\t\tthat.reset(z, null);\n\t\t\tthat.window = null;\n\t\t\thufts = null;\n\t\t\t// ZFREE(z, s);\n\t\t};\n\n\t\tthat.set_dictionary = function(d, start, n) {\n\t\t\tthat.window.set(d.subarray(start, start + n), 0);\n\t\t\tthat.read = that.write = n;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n\t\tthat.sync_point = function() {\n\t\t\treturn mode == LENS ? 1 : 0;\n\t\t};\n\n\t}\n\n\t// Inflate\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar Z_DEFLATED = 8;\n\n\tvar METHOD = 0; // waiting for method byte\n\tvar FLAG = 1; // waiting for flag byte\n\tvar DICT4 = 2; // four dictionary check bytes to go\n\tvar DICT3 = 3; // three dictionary check bytes to go\n\tvar DICT2 = 4; // two dictionary check bytes to go\n\tvar DICT1 = 5; // one dictionary check byte to go\n\tvar DICT0 = 6; // waiting for inflateSetDictionary\n\tvar BLOCKS = 7; // decompressing blocks\n\tvar DONE = 12; // finished check, done\n\tvar BAD = 13; // got an error--stay here\n\n\tvar mark = [ 0, 0, 0xff, 0xff ];\n\n\tfunction Inflate() {\n\t\tvar that = this;\n\n\t\tthat.mode = 0; // current inflate mode\n\n\t\t// mode dependent information\n\t\tthat.method = 0; // if FLAGS, method byte\n\n\t\t// if CHECK, check values to compare\n\t\tthat.was = [ 0 ]; // new Array(1); // computed check value\n\t\tthat.need = 0; // stream check value\n\n\t\t// if BAD, inflateSync's marker bytes count\n\t\tthat.marker = 0;\n\n\t\t// mode independent information\n\t\tthat.wbits = 0; // log2(window size) (8..15, defaults to 15)\n\n\t\t// this.blocks; // current inflate_blocks state\n\n\t\tfunction inflateReset(z) {\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tz.total_in = z.total_out = 0;\n\t\t\tz.msg = null;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\tz.istate.blocks.reset(z, null);\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.inflateEnd = function(z) {\n\t\t\tif (that.blocks)\n\t\t\t\tthat.blocks.free(z);\n\t\t\tthat.blocks = null;\n\t\t\t// ZFREE(z, z->state);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateInit = function(z, w) {\n\t\t\tz.msg = null;\n\t\t\tthat.blocks = null;\n\n\t\t\t// set window size\n\t\t\tif (w < 8 || w > 15) {\n\t\t\t\tthat.inflateEnd(z);\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tthat.wbits = w;\n\n\t\t\tz.istate.blocks = new InfBlocks(z, 1 << w);\n\n\t\t\t// reset state\n\t\t\tinflateReset(z);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflate = function(z, f) {\n\t\t\tvar r;\n\t\t\tvar b;\n\n\t\t\tif (!z || !z.istate || !z.next_in)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tf = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n\t\t\tr = Z_BUF_ERROR;\n\t\t\twhile (true) {\n\t\t\t\t// System.out.println(\"mode: \"+z.istate.mode);\n\t\t\t\tswitch (z.istate.mode) {\n\t\t\t\tcase METHOD:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tif (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"unknown compression method\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((z.istate.method >> 4) + 8 > z.istate.wbits) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"invalid window size\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = FLAG;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase FLAG:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tb = (z.read_byte(z.next_in_index++)) & 0xff;\n\n\t\t\t\t\tif ((((z.istate.method << 8) + b) % 31) !== 0) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"incorrect header check\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((b & PRESET_DICT) === 0) {\n\t\t\t\t\t\tz.istate.mode = BLOCKS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = DICT4;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT4:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;\n\t\t\t\t\tz.istate.mode = DICT3;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT3:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;\n\t\t\t\t\tz.istate.mode = DICT2;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT2:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;\n\t\t\t\t\tz.istate.mode = DICT1;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT1:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += (z.read_byte(z.next_in_index++) & 0xff);\n\t\t\t\t\tz.istate.mode = DICT0;\n\t\t\t\t\treturn Z_NEED_DICT;\n\t\t\t\tcase DICT0:\n\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\tz.msg = \"need dictionary\";\n\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\tcase BLOCKS:\n\n\t\t\t\t\tr = z.istate.blocks.proc(z, r);\n\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (r == Z_OK) {\n\t\t\t\t\t\tr = f;\n\t\t\t\t\t}\n\t\t\t\t\tif (r != Z_STREAM_END) {\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t\tr = f;\n\t\t\t\t\tz.istate.blocks.reset(z, z.istate.was);\n\t\t\t\t\tz.istate.mode = DONE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONE:\n\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\tcase BAD:\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\tdefault:\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.inflateSetDictionary = function(z, dictionary, dictLength) {\n\t\t\tvar index = 0;\n\t\t\tvar length = dictLength;\n\t\t\tif (!z || !z.istate || z.istate.mode != DICT0)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length >= (1 << z.istate.wbits)) {\n\t\t\t\tlength = (1 << z.istate.wbits) - 1;\n\t\t\t\tindex = dictLength - length;\n\t\t\t}\n\t\t\tz.istate.blocks.set_dictionary(dictionary, index, length);\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateSync = function(z) {\n\t\t\tvar n; // number of bytes to look at\n\t\t\tvar p; // pointer to bytes\n\t\t\tvar m; // number of marker bytes found in a row\n\t\t\tvar r, w; // temporaries to save total_in and total_out\n\n\t\t\t// set up\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tif (z.istate.mode != BAD) {\n\t\t\t\tz.istate.mode = BAD;\n\t\t\t\tz.istate.marker = 0;\n\t\t\t}\n\t\t\tif ((n = z.avail_in) === 0)\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\tp = z.next_in_index;\n\t\t\tm = z.istate.marker;\n\n\t\t\t// search\n\t\t\twhile (n !== 0 && m < 4) {\n\t\t\t\tif (z.read_byte(p) == mark[m]) {\n\t\t\t\t\tm++;\n\t\t\t\t} else if (z.read_byte(p) !== 0) {\n\t\t\t\t\tm = 0;\n\t\t\t\t} else {\n\t\t\t\t\tm = 4 - m;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t\tn--;\n\t\t\t}\n\n\t\t\t// restore\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\tz.avail_in = n;\n\t\t\tz.istate.marker = m;\n\n\t\t\t// return no joy or set up to restart on a new block\n\t\t\tif (m != 4) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tr = z.total_in;\n\t\t\tw = z.total_out;\n\t\t\tinflateReset(z);\n\t\t\tz.total_in = r;\n\t\t\tz.total_out = w;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n\t\t// implementation to provide an additional safety check. PPP uses\n\t\t// Z_SYNC_FLUSH\n\t\t// but removes the length bytes of the resulting empty stored block. When\n\t\t// decompressing, PPP checks that at the end of input packet, inflate is\n\t\t// waiting for these length bytes.\n\t\tthat.inflateSyncPoint = function(z) {\n\t\t\tif (!z || !z.istate || !z.istate.blocks)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn z.istate.blocks.sync_point();\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t}\n\n\tZStream.prototype = {\n\t\tinflateInit : function(bits) {\n\t\t\tvar that = this;\n\t\t\tthat.istate = new Inflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.istate.inflateInit(that, bits);\n\t\t},\n\n\t\tinflate : function(f) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflate(that, f);\n\t\t},\n\n\t\tinflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.istate.inflateEnd(that);\n\t\t\tthat.istate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tinflateSync : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSync(that);\n\t\t},\n\t\tinflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\t\tread_byte : function(start) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + 1)[0];\n\t\t},\n\t\tread_buf : function(start, size) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + size);\n\t\t}\n\t};\n\n\t// Inflater\n\n\tfunction Inflater() {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar nomoreinput = false;\n\n\t\tz.inflateInit();\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (data.length === 0)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\tif ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it\n\t\t\t\t\tz.next_in_index = 0;\n\t\t\t\t\tnomoreinput = true;\n\t\t\t\t}\n\t\t\t\terr = z.inflate(flush);\n\t\t\t\tif (nomoreinput && (err === Z_BUF_ERROR)) {\n\t\t\t\t\tif (z.avail_in !== 0)\n\t\t\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\t\t} else if (err !== Z_OK && err !== Z_STREAM_END)\n\t\t\t\t\tthrow new Error(\"inflating: \" + z.msg);\n\t\t\t\tif ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))\n\t\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index === bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tz.inflateEnd();\n\t\t};\n\t}\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Inflater = env._jzlib_Inflater = Inflater;\n})(this);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/inflate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/mime-types.js",
    "content": "/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function() {\n\t\"use strict\";\n\tvar table = {\n\t\t\"application\" : {\n\t\t\t\"andrew-inset\" : \"ez\",\n\t\t\t\"annodex\" : \"anx\",\n\t\t\t\"atom+xml\" : \"atom\",\n\t\t\t\"atomcat+xml\" : \"atomcat\",\n\t\t\t\"atomserv+xml\" : \"atomsrv\",\n\t\t\t\"bbolin\" : \"lin\",\n\t\t\t\"cap\" : [ \"cap\", \"pcap\" ],\n\t\t\t\"cu-seeme\" : \"cu\",\n\t\t\t\"davmount+xml\" : \"davmount\",\n\t\t\t\"dsptype\" : \"tsp\",\n\t\t\t\"ecmascript\" : [ \"es\", \"ecma\" ],\n\t\t\t\"futuresplash\" : \"spl\",\n\t\t\t\"hta\" : \"hta\",\n\t\t\t\"java-archive\" : \"jar\",\n\t\t\t\"java-serialized-object\" : \"ser\",\n\t\t\t\"java-vm\" : \"class\",\n\t\t\t\"javascript\" : \"js\",\n\t\t\t\"m3g\" : \"m3g\",\n\t\t\t\"mac-binhex40\" : \"hqx\",\n\t\t\t\"mathematica\" : [ \"nb\", \"ma\", \"mb\" ],\n\t\t\t\"msaccess\" : \"mdb\",\n\t\t\t\"msword\" : [ \"doc\", \"dot\" ],\n\t\t\t\"mxf\" : \"mxf\",\n\t\t\t\"oda\" : \"oda\",\n\t\t\t\"ogg\" : \"ogx\",\n\t\t\t\"pdf\" : \"pdf\",\n\t\t\t\"pgp-keys\" : \"key\",\n\t\t\t\"pgp-signature\" : [ \"asc\", \"sig\" ],\n\t\t\t\"pics-rules\" : \"prf\",\n\t\t\t\"postscript\" : [ \"ps\", \"ai\", \"eps\", \"epsi\", \"epsf\", \"eps2\", \"eps3\" ],\n\t\t\t\"rar\" : \"rar\",\n\t\t\t\"rdf+xml\" : \"rdf\",\n\t\t\t\"rss+xml\" : \"rss\",\n\t\t\t\"rtf\" : \"rtf\",\n\t\t\t\"smil\" : [ \"smi\", \"smil\" ],\n\t\t\t\"xhtml+xml\" : [ \"xhtml\", \"xht\" ],\n\t\t\t\"xml\" : [ \"xml\", \"xsl\", \"xsd\" ],\n\t\t\t\"xspf+xml\" : \"xspf\",\n\t\t\t\"zip\" : \"zip\",\n\t\t\t\"vnd.android.package-archive\" : \"apk\",\n\t\t\t\"vnd.cinderella\" : \"cdy\",\n\t\t\t\"vnd.google-earth.kml+xml\" : \"kml\",\n\t\t\t\"vnd.google-earth.kmz\" : \"kmz\",\n\t\t\t\"vnd.mozilla.xul+xml\" : \"xul\",\n\t\t\t\"vnd.ms-excel\" : [ \"xls\", \"xlb\", \"xlt\", \"xlm\", \"xla\", \"xlc\", \"xlw\" ],\n\t\t\t\"vnd.ms-pki.seccat\" : \"cat\",\n\t\t\t\"vnd.ms-pki.stl\" : \"stl\",\n\t\t\t\"vnd.ms-powerpoint\" : [ \"ppt\", \"pps\", \"pot\" ],\n\t\t\t\"vnd.oasis.opendocument.chart\" : \"odc\",\n\t\t\t\"vnd.oasis.opendocument.database\" : \"odb\",\n\t\t\t\"vnd.oasis.opendocument.formula\" : \"odf\",\n\t\t\t\"vnd.oasis.opendocument.graphics\" : \"odg\",\n\t\t\t\"vnd.oasis.opendocument.graphics-template\" : \"otg\",\n\t\t\t\"vnd.oasis.opendocument.image\" : \"odi\",\n\t\t\t\"vnd.oasis.opendocument.presentation\" : \"odp\",\n\t\t\t\"vnd.oasis.opendocument.presentation-template\" : \"otp\",\n\t\t\t\"vnd.oasis.opendocument.spreadsheet\" : \"ods\",\n\t\t\t\"vnd.oasis.opendocument.spreadsheet-template\" : \"ots\",\n\t\t\t\"vnd.oasis.opendocument.text\" : \"odt\",\n\t\t\t\"vnd.oasis.opendocument.text-master\" : \"odm\",\n\t\t\t\"vnd.oasis.opendocument.text-template\" : \"ott\",\n\t\t\t\"vnd.oasis.opendocument.text-web\" : \"oth\",\n\t\t\t\"vnd.openxmlformats-officedocument.spreadsheetml.sheet\" : \"xlsx\",\n\t\t\t\"vnd.openxmlformats-officedocument.spreadsheetml.template\" : \"xltx\",\n\t\t\t\"vnd.openxmlformats-officedocument.presentationml.presentation\" : \"pptx\",\n\t\t\t\"vnd.openxmlformats-officedocument.presentationml.slideshow\" : \"ppsx\",\n\t\t\t\"vnd.openxmlformats-officedocument.presentationml.template\" : \"potx\",\n\t\t\t\"vnd.openxmlformats-officedocument.wordprocessingml.document\" : \"docx\",\n\t\t\t\"vnd.openxmlformats-officedocument.wordprocessingml.template\" : \"dotx\",\n\t\t\t\"vnd.smaf\" : \"mmf\",\n\t\t\t\"vnd.stardivision.calc\" : \"sdc\",\n\t\t\t\"vnd.stardivision.chart\" : \"sds\",\n\t\t\t\"vnd.stardivision.draw\" : \"sda\",\n\t\t\t\"vnd.stardivision.impress\" : \"sdd\",\n\t\t\t\"vnd.stardivision.math\" : [ \"sdf\", \"smf\" ],\n\t\t\t\"vnd.stardivision.writer\" : [ \"sdw\", \"vor\" ],\n\t\t\t\"vnd.stardivision.writer-global\" : \"sgl\",\n\t\t\t\"vnd.sun.xml.calc\" : \"sxc\",\n\t\t\t\"vnd.sun.xml.calc.template\" : \"stc\",\n\t\t\t\"vnd.sun.xml.draw\" : \"sxd\",\n\t\t\t\"vnd.sun.xml.draw.template\" : \"std\",\n\t\t\t\"vnd.sun.xml.impress\" : \"sxi\",\n\t\t\t\"vnd.sun.xml.impress.template\" : \"sti\",\n\t\t\t\"vnd.sun.xml.math\" : \"sxm\",\n\t\t\t\"vnd.sun.xml.writer\" : \"sxw\",\n\t\t\t\"vnd.sun.xml.writer.global\" : \"sxg\",\n\t\t\t\"vnd.sun.xml.writer.template\" : \"stw\",\n\t\t\t\"vnd.symbian.install\" : [ \"sis\", \"sisx\" ],\n\t\t\t\"vnd.visio\" : [ \"vsd\", \"vst\", \"vss\", \"vsw\" ],\n\t\t\t\"vnd.wap.wbxml\" : \"wbxml\",\n\t\t\t\"vnd.wap.wmlc\" : \"wmlc\",\n\t\t\t\"vnd.wap.wmlscriptc\" : \"wmlsc\",\n\t\t\t\"vnd.wordperfect\" : \"wpd\",\n\t\t\t\"vnd.wordperfect5.1\" : \"wp5\",\n\t\t\t\"x-123\" : \"wk\",\n\t\t\t\"x-7z-compressed\" : \"7z\",\n\t\t\t\"x-abiword\" : \"abw\",\n\t\t\t\"x-apple-diskimage\" : \"dmg\",\n\t\t\t\"x-bcpio\" : \"bcpio\",\n\t\t\t\"x-bittorrent\" : \"torrent\",\n\t\t\t\"x-cbr\" : [ \"cbr\", \"cba\", \"cbt\", \"cb7\" ],\n\t\t\t\"x-cbz\" : \"cbz\",\n\t\t\t\"x-cdf\" : [ \"cdf\", \"cda\" ],\n\t\t\t\"x-cdlink\" : \"vcd\",\n\t\t\t\"x-chess-pgn\" : \"pgn\",\n\t\t\t\"x-cpio\" : \"cpio\",\n\t\t\t\"x-csh\" : \"csh\",\n\t\t\t\"x-debian-package\" : [ \"deb\", \"udeb\" ],\n\t\t\t\"x-director\" : [ \"dcr\", \"dir\", \"dxr\", \"cst\", \"cct\", \"cxt\", \"w3d\", \"fgd\", \"swa\" ],\n\t\t\t\"x-dms\" : \"dms\",\n\t\t\t\"x-doom\" : \"wad\",\n\t\t\t\"x-dvi\" : \"dvi\",\n\t\t\t\"x-httpd-eruby\" : \"rhtml\",\n\t\t\t\"x-font\" : \"pcf.Z\",\n\t\t\t\"x-freemind\" : \"mm\",\n\t\t\t\"x-gnumeric\" : \"gnumeric\",\n\t\t\t\"x-go-sgf\" : \"sgf\",\n\t\t\t\"x-graphing-calculator\" : \"gcf\",\n\t\t\t\"x-gtar\" : [ \"gtar\", \"taz\" ],\n\t\t\t\"x-hdf\" : \"hdf\",\n\t\t\t\"x-httpd-php\" : [ \"phtml\", \"pht\", \"php\" ],\n\t\t\t\"x-httpd-php-source\" : \"phps\",\n\t\t\t\"x-httpd-php3\" : \"php3\",\n\t\t\t\"x-httpd-php3-preprocessed\" : \"php3p\",\n\t\t\t\"x-httpd-php4\" : \"php4\",\n\t\t\t\"x-httpd-php5\" : \"php5\",\n\t\t\t\"x-ica\" : \"ica\",\n\t\t\t\"x-info\" : \"info\",\n\t\t\t\"x-internet-signup\" : [ \"ins\", \"isp\" ],\n\t\t\t\"x-iphone\" : \"iii\",\n\t\t\t\"x-iso9660-image\" : \"iso\",\n\t\t\t\"x-java-jnlp-file\" : \"jnlp\",\n\t\t\t\"x-jmol\" : \"jmz\",\n\t\t\t\"x-killustrator\" : \"kil\",\n\t\t\t\"x-koan\" : [ \"skp\", \"skd\", \"skt\", \"skm\" ],\n\t\t\t\"x-kpresenter\" : [ \"kpr\", \"kpt\" ],\n\t\t\t\"x-kword\" : [ \"kwd\", \"kwt\" ],\n\t\t\t\"x-latex\" : \"latex\",\n\t\t\t\"x-lha\" : \"lha\",\n\t\t\t\"x-lyx\" : \"lyx\",\n\t\t\t\"x-lzh\" : \"lzh\",\n\t\t\t\"x-lzx\" : \"lzx\",\n\t\t\t\"x-maker\" : [ \"frm\", \"maker\", \"frame\", \"fm\", \"fb\", \"book\", \"fbdoc\" ],\n\t\t\t\"x-ms-wmd\" : \"wmd\",\n\t\t\t\"x-ms-wmz\" : \"wmz\",\n\t\t\t\"x-msdos-program\" : [ \"com\", \"exe\", \"bat\", \"dll\" ],\n\t\t\t\"x-msi\" : \"msi\",\n\t\t\t\"x-netcdf\" : [ \"nc\", \"cdf\" ],\n\t\t\t\"x-ns-proxy-autoconfig\" : [ \"pac\", \"dat\" ],\n\t\t\t\"x-nwc\" : \"nwc\",\n\t\t\t\"x-object\" : \"o\",\n\t\t\t\"x-oz-application\" : \"oza\",\n\t\t\t\"x-pkcs7-certreqresp\" : \"p7r\",\n\t\t\t\"x-python-code\" : [ \"pyc\", \"pyo\" ],\n\t\t\t\"x-qgis\" : [ \"qgs\", \"shp\", \"shx\" ],\n\t\t\t\"x-quicktimeplayer\" : \"qtl\",\n\t\t\t\"x-redhat-package-manager\" : \"rpm\",\n\t\t\t\"x-ruby\" : \"rb\",\n\t\t\t\"x-sh\" : \"sh\",\n\t\t\t\"x-shar\" : \"shar\",\n\t\t\t\"x-shockwave-flash\" : [ \"swf\", \"swfl\" ],\n\t\t\t\"x-silverlight\" : \"scr\",\n\t\t\t\"x-stuffit\" : \"sit\",\n\t\t\t\"x-sv4cpio\" : \"sv4cpio\",\n\t\t\t\"x-sv4crc\" : \"sv4crc\",\n\t\t\t\"x-tar\" : \"tar\",\n\t\t\t\"x-tcl\" : \"tcl\",\n\t\t\t\"x-tex-gf\" : \"gf\",\n\t\t\t\"x-tex-pk\" : \"pk\",\n\t\t\t\"x-texinfo\" : [ \"texinfo\", \"texi\" ],\n\t\t\t\"x-trash\" : [ \"~\", \"%\", \"bak\", \"old\", \"sik\" ],\n\t\t\t\"x-troff\" : [ \"t\", \"tr\", \"roff\" ],\n\t\t\t\"x-troff-man\" : \"man\",\n\t\t\t\"x-troff-me\" : \"me\",\n\t\t\t\"x-troff-ms\" : \"ms\",\n\t\t\t\"x-ustar\" : \"ustar\",\n\t\t\t\"x-wais-source\" : \"src\",\n\t\t\t\"x-wingz\" : \"wz\",\n\t\t\t\"x-x509-ca-cert\" : [ \"crt\", \"der\", \"cer\" ],\n\t\t\t\"x-xcf\" : \"xcf\",\n\t\t\t\"x-xfig\" : \"fig\",\n\t\t\t\"x-xpinstall\" : \"xpi\",\n\t\t\t\"applixware\" : \"aw\",\n\t\t\t\"atomsvc+xml\" : \"atomsvc\",\n\t\t\t\"ccxml+xml\" : \"ccxml\",\n\t\t\t\"cdmi-capability\" : \"cdmia\",\n\t\t\t\"cdmi-container\" : \"cdmic\",\n\t\t\t\"cdmi-domain\" : \"cdmid\",\n\t\t\t\"cdmi-object\" : \"cdmio\",\n\t\t\t\"cdmi-queue\" : \"cdmiq\",\n\t\t\t\"docbook+xml\" : \"dbk\",\n\t\t\t\"dssc+der\" : \"dssc\",\n\t\t\t\"dssc+xml\" : \"xdssc\",\n\t\t\t\"emma+xml\" : \"emma\",\n\t\t\t\"epub+zip\" : \"epub\",\n\t\t\t\"exi\" : \"exi\",\n\t\t\t\"font-tdpfr\" : \"pfr\",\n\t\t\t\"gml+xml\" : \"gml\",\n\t\t\t\"gpx+xml\" : \"gpx\",\n\t\t\t\"gxf\" : \"gxf\",\n\t\t\t\"hyperstudio\" : \"stk\",\n\t\t\t\"inkml+xml\" : [ \"ink\", \"inkml\" ],\n\t\t\t\"ipfix\" : \"ipfix\",\n\t\t\t\"json\" : \"json\",\n\t\t\t\"jsonml+json\" : \"jsonml\",\n\t\t\t\"lost+xml\" : \"lostxml\",\n\t\t\t\"mads+xml\" : \"mads\",\n\t\t\t\"marc\" : \"mrc\",\n\t\t\t\"marcxml+xml\" : \"mrcx\",\n\t\t\t\"mathml+xml\" : \"mathml\",\n\t\t\t\"mbox\" : \"mbox\",\n\t\t\t\"mediaservercontrol+xml\" : \"mscml\",\n\t\t\t\"metalink+xml\" : \"metalink\",\n\t\t\t\"metalink4+xml\" : \"meta4\",\n\t\t\t\"mets+xml\" : \"mets\",\n\t\t\t\"mods+xml\" : \"mods\",\n\t\t\t\"mp21\" : [ \"m21\", \"mp21\" ],\n\t\t\t\"mp4\" : \"mp4s\",\n\t\t\t\"oebps-package+xml\" : \"opf\",\n\t\t\t\"omdoc+xml\" : \"omdoc\",\n\t\t\t\"onenote\" : [ \"onetoc\", \"onetoc2\", \"onetmp\", \"onepkg\" ],\n\t\t\t\"oxps\" : \"oxps\",\n\t\t\t\"patch-ops-error+xml\" : \"xer\",\n\t\t\t\"pgp-encrypted\" : \"pgp\",\n\t\t\t\"pkcs10\" : \"p10\",\n\t\t\t\"pkcs7-mime\" : [ \"p7m\", \"p7c\" ],\n\t\t\t\"pkcs7-signature\" : \"p7s\",\n\t\t\t\"pkcs8\" : \"p8\",\n\t\t\t\"pkix-attr-cert\" : \"ac\",\n\t\t\t\"pkix-crl\" : \"crl\",\n\t\t\t\"pkix-pkipath\" : \"pkipath\",\n\t\t\t\"pkixcmp\" : \"pki\",\n\t\t\t\"pls+xml\" : \"pls\",\n\t\t\t\"prs.cww\" : \"cww\",\n\t\t\t\"pskc+xml\" : \"pskcxml\",\n\t\t\t\"reginfo+xml\" : \"rif\",\n\t\t\t\"relax-ng-compact-syntax\" : \"rnc\",\n\t\t\t\"resource-lists+xml\" : \"rl\",\n\t\t\t\"resource-lists-diff+xml\" : \"rld\",\n\t\t\t\"rls-services+xml\" : \"rs\",\n\t\t\t\"rpki-ghostbusters\" : \"gbr\",\n\t\t\t\"rpki-manifest\" : \"mft\",\n\t\t\t\"rpki-roa\" : \"roa\",\n\t\t\t\"rsd+xml\" : \"rsd\",\n\t\t\t\"sbml+xml\" : \"sbml\",\n\t\t\t\"scvp-cv-request\" : \"scq\",\n\t\t\t\"scvp-cv-response\" : \"scs\",\n\t\t\t\"scvp-vp-request\" : \"spq\",\n\t\t\t\"scvp-vp-response\" : \"spp\",\n\t\t\t\"sdp\" : \"sdp\",\n\t\t\t\"set-payment-initiation\" : \"setpay\",\n\t\t\t\"set-registration-initiation\" : \"setreg\",\n\t\t\t\"shf+xml\" : \"shf\",\n\t\t\t\"sparql-query\" : \"rq\",\n\t\t\t\"sparql-results+xml\" : \"srx\",\n\t\t\t\"srgs\" : \"gram\",\n\t\t\t\"srgs+xml\" : \"grxml\",\n\t\t\t\"sru+xml\" : \"sru\",\n\t\t\t\"ssdl+xml\" : \"ssdl\",\n\t\t\t\"ssml+xml\" : \"ssml\",\n\t\t\t\"tei+xml\" : [ \"tei\", \"teicorpus\" ],\n\t\t\t\"thraud+xml\" : \"tfi\",\n\t\t\t\"timestamped-data\" : \"tsd\",\n\t\t\t\"vnd.3gpp.pic-bw-large\" : \"plb\",\n\t\t\t\"vnd.3gpp.pic-bw-small\" : \"psb\",\n\t\t\t\"vnd.3gpp.pic-bw-var\" : \"pvb\",\n\t\t\t\"vnd.3gpp2.tcap\" : \"tcap\",\n\t\t\t\"vnd.3m.post-it-notes\" : \"pwn\",\n\t\t\t\"vnd.accpac.simply.aso\" : \"aso\",\n\t\t\t\"vnd.accpac.simply.imp\" : \"imp\",\n\t\t\t\"vnd.acucobol\" : \"acu\",\n\t\t\t\"vnd.acucorp\" : [ \"atc\", \"acutc\" ],\n\t\t\t\"vnd.adobe.air-application-installer-package+zip\" : \"air\",\n\t\t\t\"vnd.adobe.formscentral.fcdt\" : \"fcdt\",\n\t\t\t\"vnd.adobe.fxp\" : [ \"fxp\", \"fxpl\" ],\n\t\t\t\"vnd.adobe.xdp+xml\" : \"xdp\",\n\t\t\t\"vnd.adobe.xfdf\" : \"xfdf\",\n\t\t\t\"vnd.ahead.space\" : \"ahead\",\n\t\t\t\"vnd.airzip.filesecure.azf\" : \"azf\",\n\t\t\t\"vnd.airzip.filesecure.azs\" : \"azs\",\n\t\t\t\"vnd.amazon.ebook\" : \"azw\",\n\t\t\t\"vnd.americandynamics.acc\" : \"acc\",\n\t\t\t\"vnd.amiga.ami\" : \"ami\",\n\t\t\t\"vnd.anser-web-certificate-issue-initiation\" : \"cii\",\n\t\t\t\"vnd.anser-web-funds-transfer-initiation\" : \"fti\",\n\t\t\t\"vnd.antix.game-component\" : \"atx\",\n\t\t\t\"vnd.apple.installer+xml\" : \"mpkg\",\n\t\t\t\"vnd.apple.mpegurl\" : \"m3u8\",\n\t\t\t\"vnd.aristanetworks.swi\" : \"swi\",\n\t\t\t\"vnd.astraea-software.iota\" : \"iota\",\n\t\t\t\"vnd.audiograph\" : \"aep\",\n\t\t\t\"vnd.blueice.multipass\" : \"mpm\",\n\t\t\t\"vnd.bmi\" : \"bmi\",\n\t\t\t\"vnd.businessobjects\" : \"rep\",\n\t\t\t\"vnd.chemdraw+xml\" : \"cdxml\",\n\t\t\t\"vnd.chipnuts.karaoke-mmd\" : \"mmd\",\n\t\t\t\"vnd.claymore\" : \"cla\",\n\t\t\t\"vnd.cloanto.rp9\" : \"rp9\",\n\t\t\t\"vnd.clonk.c4group\" : [ \"c4g\", \"c4d\", \"c4f\", \"c4p\", \"c4u\" ],\n\t\t\t\"vnd.cluetrust.cartomobile-config\" : \"c11amc\",\n\t\t\t\"vnd.cluetrust.cartomobile-config-pkg\" : \"c11amz\",\n\t\t\t\"vnd.commonspace\" : \"csp\",\n\t\t\t\"vnd.contact.cmsg\" : \"cdbcmsg\",\n\t\t\t\"vnd.cosmocaller\" : \"cmc\",\n\t\t\t\"vnd.crick.clicker\" : \"clkx\",\n\t\t\t\"vnd.crick.clicker.keyboard\" : \"clkk\",\n\t\t\t\"vnd.crick.clicker.palette\" : \"clkp\",\n\t\t\t\"vnd.crick.clicker.template\" : \"clkt\",\n\t\t\t\"vnd.crick.clicker.wordbank\" : \"clkw\",\n\t\t\t\"vnd.criticaltools.wbs+xml\" : \"wbs\",\n\t\t\t\"vnd.ctc-posml\" : \"pml\",\n\t\t\t\"vnd.cups-ppd\" : \"ppd\",\n\t\t\t\"vnd.curl.car\" : \"car\",\n\t\t\t\"vnd.curl.pcurl\" : \"pcurl\",\n\t\t\t\"vnd.dart\" : \"dart\",\n\t\t\t\"vnd.data-vision.rdz\" : \"rdz\",\n\t\t\t\"vnd.dece.data\" : [ \"uvf\", \"uvvf\", \"uvd\", \"uvvd\" ],\n\t\t\t\"vnd.dece.ttml+xml\" : [ \"uvt\", \"uvvt\" ],\n\t\t\t\"vnd.dece.unspecified\" : [ \"uvx\", \"uvvx\" ],\n\t\t\t\"vnd.dece.zip\" : [ \"uvz\", \"uvvz\" ],\n\t\t\t\"vnd.denovo.fcselayout-link\" : \"fe_launch\",\n\t\t\t\"vnd.dna\" : \"dna\",\n\t\t\t\"vnd.dolby.mlp\" : \"mlp\",\n\t\t\t\"vnd.dpgraph\" : \"dpg\",\n\t\t\t\"vnd.dreamfactory\" : \"dfac\",\n\t\t\t\"vnd.ds-keypoint\" : \"kpxx\",\n\t\t\t\"vnd.dvb.ait\" : \"ait\",\n\t\t\t\"vnd.dvb.service\" : \"svc\",\n\t\t\t\"vnd.dynageo\" : \"geo\",\n\t\t\t\"vnd.ecowin.chart\" : \"mag\",\n\t\t\t\"vnd.enliven\" : \"nml\",\n\t\t\t\"vnd.epson.esf\" : \"esf\",\n\t\t\t\"vnd.epson.msf\" : \"msf\",\n\t\t\t\"vnd.epson.quickanime\" : \"qam\",\n\t\t\t\"vnd.epson.salt\" : \"slt\",\n\t\t\t\"vnd.epson.ssf\" : \"ssf\",\n\t\t\t\"vnd.eszigno3+xml\" : [ \"es3\", \"et3\" ],\n\t\t\t\"vnd.ezpix-album\" : \"ez2\",\n\t\t\t\"vnd.ezpix-package\" : \"ez3\",\n\t\t\t\"vnd.fdf\" : \"fdf\",\n\t\t\t\"vnd.fdsn.mseed\" : \"mseed\",\n\t\t\t\"vnd.fdsn.seed\" : [ \"seed\", \"dataless\" ],\n\t\t\t\"vnd.flographit\" : \"gph\",\n\t\t\t\"vnd.fluxtime.clip\" : \"ftc\",\n\t\t\t\"vnd.framemaker\" : [ \"fm\", \"frame\", \"maker\", \"book\" ],\n\t\t\t\"vnd.frogans.fnc\" : \"fnc\",\n\t\t\t\"vnd.frogans.ltf\" : \"ltf\",\n\t\t\t\"vnd.fsc.weblaunch\" : \"fsc\",\n\t\t\t\"vnd.fujitsu.oasys\" : \"oas\",\n\t\t\t\"vnd.fujitsu.oasys2\" : \"oa2\",\n\t\t\t\"vnd.fujitsu.oasys3\" : \"oa3\",\n\t\t\t\"vnd.fujitsu.oasysgp\" : \"fg5\",\n\t\t\t\"vnd.fujitsu.oasysprs\" : \"bh2\",\n\t\t\t\"vnd.fujixerox.ddd\" : \"ddd\",\n\t\t\t\"vnd.fujixerox.docuworks\" : \"xdw\",\n\t\t\t\"vnd.fujixerox.docuworks.binder\" : \"xbd\",\n\t\t\t\"vnd.fuzzysheet\" : \"fzs\",\n\t\t\t\"vnd.genomatix.tuxedo\" : \"txd\",\n\t\t\t\"vnd.geogebra.file\" : \"ggb\",\n\t\t\t\"vnd.geogebra.tool\" : \"ggt\",\n\t\t\t\"vnd.geometry-explorer\" : [ \"gex\", \"gre\" ],\n\t\t\t\"vnd.geonext\" : \"gxt\",\n\t\t\t\"vnd.geoplan\" : \"g2w\",\n\t\t\t\"vnd.geospace\" : \"g3w\",\n\t\t\t\"vnd.gmx\" : \"gmx\",\n\t\t\t\"vnd.grafeq\" : [ \"gqf\", \"gqs\" ],\n\t\t\t\"vnd.groove-account\" : \"gac\",\n\t\t\t\"vnd.groove-help\" : \"ghf\",\n\t\t\t\"vnd.groove-identity-message\" : \"gim\",\n\t\t\t\"vnd.groove-injector\" : \"grv\",\n\t\t\t\"vnd.groove-tool-message\" : \"gtm\",\n\t\t\t\"vnd.groove-tool-template\" : \"tpl\",\n\t\t\t\"vnd.groove-vcard\" : \"vcg\",\n\t\t\t\"vnd.hal+xml\" : \"hal\",\n\t\t\t\"vnd.handheld-entertainment+xml\" : \"zmm\",\n\t\t\t\"vnd.hbci\" : \"hbci\",\n\t\t\t\"vnd.hhe.lesson-player\" : \"les\",\n\t\t\t\"vnd.hp-hpgl\" : \"hpgl\",\n\t\t\t\"vnd.hp-hpid\" : \"hpid\",\n\t\t\t\"vnd.hp-hps\" : \"hps\",\n\t\t\t\"vnd.hp-jlyt\" : \"jlt\",\n\t\t\t\"vnd.hp-pcl\" : \"pcl\",\n\t\t\t\"vnd.hp-pclxl\" : \"pclxl\",\n\t\t\t\"vnd.hydrostatix.sof-data\" : \"sfd-hdstx\",\n\t\t\t\"vnd.ibm.minipay\" : \"mpy\",\n\t\t\t\"vnd.ibm.modcap\" : [ \"afp\", \"listafp\", \"list3820\" ],\n\t\t\t\"vnd.ibm.rights-management\" : \"irm\",\n\t\t\t\"vnd.ibm.secure-container\" : \"sc\",\n\t\t\t\"vnd.iccprofile\" : [ \"icc\", \"icm\" ],\n\t\t\t\"vnd.igloader\" : \"igl\",\n\t\t\t\"vnd.immervision-ivp\" : \"ivp\",\n\t\t\t\"vnd.immervision-ivu\" : \"ivu\",\n\t\t\t\"vnd.insors.igm\" : \"igm\",\n\t\t\t\"vnd.intercon.formnet\" : [ \"xpw\", \"xpx\" ],\n\t\t\t\"vnd.intergeo\" : \"i2g\",\n\t\t\t\"vnd.intu.qbo\" : \"qbo\",\n\t\t\t\"vnd.intu.qfx\" : \"qfx\",\n\t\t\t\"vnd.ipunplugged.rcprofile\" : \"rcprofile\",\n\t\t\t\"vnd.irepository.package+xml\" : \"irp\",\n\t\t\t\"vnd.is-xpr\" : \"xpr\",\n\t\t\t\"vnd.isac.fcs\" : \"fcs\",\n\t\t\t\"vnd.jam\" : \"jam\",\n\t\t\t\"vnd.jcp.javame.midlet-rms\" : \"rms\",\n\t\t\t\"vnd.jisp\" : \"jisp\",\n\t\t\t\"vnd.joost.joda-archive\" : \"joda\",\n\t\t\t\"vnd.kahootz\" : [ \"ktz\", \"ktr\" ],\n\t\t\t\"vnd.kde.karbon\" : \"karbon\",\n\t\t\t\"vnd.kde.kchart\" : \"chrt\",\n\t\t\t\"vnd.kde.kformula\" : \"kfo\",\n\t\t\t\"vnd.kde.kivio\" : \"flw\",\n\t\t\t\"vnd.kde.kontour\" : \"kon\",\n\t\t\t\"vnd.kde.kpresenter\" : [ \"kpr\", \"kpt\" ],\n\t\t\t\"vnd.kde.kspread\" : \"ksp\",\n\t\t\t\"vnd.kde.kword\" : [ \"kwd\", \"kwt\" ],\n\t\t\t\"vnd.kenameaapp\" : \"htke\",\n\t\t\t\"vnd.kidspiration\" : \"kia\",\n\t\t\t\"vnd.kinar\" : [ \"kne\", \"knp\" ],\n\t\t\t\"vnd.koan\" : [ \"skp\", \"skd\", \"skt\", \"skm\" ],\n\t\t\t\"vnd.kodak-descriptor\" : \"sse\",\n\t\t\t\"vnd.las.las+xml\" : \"lasxml\",\n\t\t\t\"vnd.llamagraphics.life-balance.desktop\" : \"lbd\",\n\t\t\t\"vnd.llamagraphics.life-balance.exchange+xml\" : \"lbe\",\n\t\t\t\"vnd.lotus-1-2-3\" : \"123\",\n\t\t\t\"vnd.lotus-approach\" : \"apr\",\n\t\t\t\"vnd.lotus-freelance\" : \"pre\",\n\t\t\t\"vnd.lotus-notes\" : \"nsf\",\n\t\t\t\"vnd.lotus-organizer\" : \"org\",\n\t\t\t\"vnd.lotus-screencam\" : \"scm\",\n\t\t\t\"vnd.lotus-wordpro\" : \"lwp\",\n\t\t\t\"vnd.macports.portpkg\" : \"portpkg\",\n\t\t\t\"vnd.mcd\" : \"mcd\",\n\t\t\t\"vnd.medcalcdata\" : \"mc1\",\n\t\t\t\"vnd.mediastation.cdkey\" : \"cdkey\",\n\t\t\t\"vnd.mfer\" : \"mwf\",\n\t\t\t\"vnd.mfmp\" : \"mfm\",\n\t\t\t\"vnd.micrografx.flo\" : \"flo\",\n\t\t\t\"vnd.micrografx.igx\" : \"igx\",\n\t\t\t\"vnd.mif\" : \"mif\",\n\t\t\t\"vnd.mobius.daf\" : \"daf\",\n\t\t\t\"vnd.mobius.dis\" : \"dis\",\n\t\t\t\"vnd.mobius.mbk\" : \"mbk\",\n\t\t\t\"vnd.mobius.mqy\" : \"mqy\",\n\t\t\t\"vnd.mobius.msl\" : \"msl\",\n\t\t\t\"vnd.mobius.plc\" : \"plc\",\n\t\t\t\"vnd.mobius.txf\" : \"txf\",\n\t\t\t\"vnd.mophun.application\" : \"mpn\",\n\t\t\t\"vnd.mophun.certificate\" : \"mpc\",\n\t\t\t\"vnd.ms-artgalry\" : \"cil\",\n\t\t\t\"vnd.ms-cab-compressed\" : \"cab\",\n\t\t\t\"vnd.ms-excel.addin.macroenabled.12\" : \"xlam\",\n\t\t\t\"vnd.ms-excel.sheet.binary.macroenabled.12\" : \"xlsb\",\n\t\t\t\"vnd.ms-excel.sheet.macroenabled.12\" : \"xlsm\",\n\t\t\t\"vnd.ms-excel.template.macroenabled.12\" : \"xltm\",\n\t\t\t\"vnd.ms-fontobject\" : \"eot\",\n\t\t\t\"vnd.ms-htmlhelp\" : \"chm\",\n\t\t\t\"vnd.ms-ims\" : \"ims\",\n\t\t\t\"vnd.ms-lrm\" : \"lrm\",\n\t\t\t\"vnd.ms-officetheme\" : \"thmx\",\n\t\t\t\"vnd.ms-powerpoint.addin.macroenabled.12\" : \"ppam\",\n\t\t\t\"vnd.ms-powerpoint.presentation.macroenabled.12\" : \"pptm\",\n\t\t\t\"vnd.ms-powerpoint.slide.macroenabled.12\" : \"sldm\",\n\t\t\t\"vnd.ms-powerpoint.slideshow.macroenabled.12\" : \"ppsm\",\n\t\t\t\"vnd.ms-powerpoint.template.macroenabled.12\" : \"potm\",\n\t\t\t\"vnd.ms-project\" : [ \"mpp\", \"mpt\" ],\n\t\t\t\"vnd.ms-word.document.macroenabled.12\" : \"docm\",\n\t\t\t\"vnd.ms-word.template.macroenabled.12\" : \"dotm\",\n\t\t\t\"vnd.ms-works\" : [ \"wps\", \"wks\", \"wcm\", \"wdb\" ],\n\t\t\t\"vnd.ms-wpl\" : \"wpl\",\n\t\t\t\"vnd.ms-xpsdocument\" : \"xps\",\n\t\t\t\"vnd.mseq\" : \"mseq\",\n\t\t\t\"vnd.musician\" : \"mus\",\n\t\t\t\"vnd.muvee.style\" : \"msty\",\n\t\t\t\"vnd.mynfc\" : \"taglet\",\n\t\t\t\"vnd.neurolanguage.nlu\" : \"nlu\",\n\t\t\t\"vnd.nitf\" : [ \"ntf\", \"nitf\" ],\n\t\t\t\"vnd.noblenet-directory\" : \"nnd\",\n\t\t\t\"vnd.noblenet-sealer\" : \"nns\",\n\t\t\t\"vnd.noblenet-web\" : \"nnw\",\n\t\t\t\"vnd.nokia.n-gage.data\" : \"ngdat\",\n\t\t\t\"vnd.nokia.n-gage.symbian.install\" : \"n-gage\",\n\t\t\t\"vnd.nokia.radio-preset\" : \"rpst\",\n\t\t\t\"vnd.nokia.radio-presets\" : \"rpss\",\n\t\t\t\"vnd.novadigm.edm\" : \"edm\",\n\t\t\t\"vnd.novadigm.edx\" : \"edx\",\n\t\t\t\"vnd.novadigm.ext\" : \"ext\",\n\t\t\t\"vnd.oasis.opendocument.chart-template\" : \"otc\",\n\t\t\t\"vnd.oasis.opendocument.formula-template\" : \"odft\",\n\t\t\t\"vnd.oasis.opendocument.image-template\" : \"oti\",\n\t\t\t\"vnd.olpc-sugar\" : \"xo\",\n\t\t\t\"vnd.oma.dd2+xml\" : \"dd2\",\n\t\t\t\"vnd.openofficeorg.extension\" : \"oxt\",\n\t\t\t\"vnd.openxmlformats-officedocument.presentationml.slide\" : \"sldx\",\n\t\t\t\"vnd.osgeo.mapguide.package\" : \"mgp\",\n\t\t\t\"vnd.osgi.dp\" : \"dp\",\n\t\t\t\"vnd.osgi.subsystem\" : \"esa\",\n\t\t\t\"vnd.palm\" : [ \"pdb\", \"pqa\", \"oprc\" ],\n\t\t\t\"vnd.pawaafile\" : \"paw\",\n\t\t\t\"vnd.pg.format\" : \"str\",\n\t\t\t\"vnd.pg.osasli\" : \"ei6\",\n\t\t\t\"vnd.picsel\" : \"efif\",\n\t\t\t\"vnd.pmi.widget\" : \"wg\",\n\t\t\t\"vnd.pocketlearn\" : \"plf\",\n\t\t\t\"vnd.powerbuilder6\" : \"pbd\",\n\t\t\t\"vnd.previewsystems.box\" : \"box\",\n\t\t\t\"vnd.proteus.magazine\" : \"mgz\",\n\t\t\t\"vnd.publishare-delta-tree\" : \"qps\",\n\t\t\t\"vnd.pvi.ptid1\" : \"ptid\",\n\t\t\t\"vnd.quark.quarkxpress\" : [ \"qxd\", \"qxt\", \"qwd\", \"qwt\", \"qxl\", \"qxb\" ],\n\t\t\t\"vnd.realvnc.bed\" : \"bed\",\n\t\t\t\"vnd.recordare.musicxml\" : \"mxl\",\n\t\t\t\"vnd.recordare.musicxml+xml\" : \"musicxml\",\n\t\t\t\"vnd.rig.cryptonote\" : \"cryptonote\",\n\t\t\t\"vnd.rn-realmedia\" : \"rm\",\n\t\t\t\"vnd.rn-realmedia-vbr\" : \"rmvb\",\n\t\t\t\"vnd.route66.link66+xml\" : \"link66\",\n\t\t\t\"vnd.sailingtracker.track\" : \"st\",\n\t\t\t\"vnd.seemail\" : \"see\",\n\t\t\t\"vnd.sema\" : \"sema\",\n\t\t\t\"vnd.semd\" : \"semd\",\n\t\t\t\"vnd.semf\" : \"semf\",\n\t\t\t\"vnd.shana.informed.formdata\" : \"ifm\",\n\t\t\t\"vnd.shana.informed.formtemplate\" : \"itp\",\n\t\t\t\"vnd.shana.informed.interchange\" : \"iif\",\n\t\t\t\"vnd.shana.informed.package\" : \"ipk\",\n\t\t\t\"vnd.simtech-mindmapper\" : [ \"twd\", \"twds\" ],\n\t\t\t\"vnd.smart.teacher\" : \"teacher\",\n\t\t\t\"vnd.solent.sdkm+xml\" : [ \"sdkm\", \"sdkd\" ],\n\t\t\t\"vnd.spotfire.dxp\" : \"dxp\",\n\t\t\t\"vnd.spotfire.sfs\" : \"sfs\",\n\t\t\t\"vnd.stepmania.package\" : \"smzip\",\n\t\t\t\"vnd.stepmania.stepchart\" : \"sm\",\n\t\t\t\"vnd.sus-calendar\" : [ \"sus\", \"susp\" ],\n\t\t\t\"vnd.svd\" : \"svd\",\n\t\t\t\"vnd.syncml+xml\" : \"xsm\",\n\t\t\t\"vnd.syncml.dm+wbxml\" : \"bdm\",\n\t\t\t\"vnd.syncml.dm+xml\" : \"xdm\",\n\t\t\t\"vnd.tao.intent-module-archive\" : \"tao\",\n\t\t\t\"vnd.tcpdump.pcap\" : [ \"pcap\", \"cap\", \"dmp\" ],\n\t\t\t\"vnd.tmobile-livetv\" : \"tmo\",\n\t\t\t\"vnd.trid.tpt\" : \"tpt\",\n\t\t\t\"vnd.triscape.mxs\" : \"mxs\",\n\t\t\t\"vnd.trueapp\" : \"tra\",\n\t\t\t\"vnd.ufdl\" : [ \"ufd\", \"ufdl\" ],\n\t\t\t\"vnd.uiq.theme\" : \"utz\",\n\t\t\t\"vnd.umajin\" : \"umj\",\n\t\t\t\"vnd.unity\" : \"unityweb\",\n\t\t\t\"vnd.uoml+xml\" : \"uoml\",\n\t\t\t\"vnd.vcx\" : \"vcx\",\n\t\t\t\"vnd.visionary\" : \"vis\",\n\t\t\t\"vnd.vsf\" : \"vsf\",\n\t\t\t\"vnd.webturbo\" : \"wtb\",\n\t\t\t\"vnd.wolfram.player\" : \"nbp\",\n\t\t\t\"vnd.wqd\" : \"wqd\",\n\t\t\t\"vnd.wt.stf\" : \"stf\",\n\t\t\t\"vnd.xara\" : \"xar\",\n\t\t\t\"vnd.xfdl\" : \"xfdl\",\n\t\t\t\"vnd.yamaha.hv-dic\" : \"hvd\",\n\t\t\t\"vnd.yamaha.hv-script\" : \"hvs\",\n\t\t\t\"vnd.yamaha.hv-voice\" : \"hvp\",\n\t\t\t\"vnd.yamaha.openscoreformat\" : \"osf\",\n\t\t\t\"vnd.yamaha.openscoreformat.osfpvg+xml\" : \"osfpvg\",\n\t\t\t\"vnd.yamaha.smaf-audio\" : \"saf\",\n\t\t\t\"vnd.yamaha.smaf-phrase\" : \"spf\",\n\t\t\t\"vnd.yellowriver-custom-menu\" : \"cmp\",\n\t\t\t\"vnd.zul\" : [ \"zir\", \"zirz\" ],\n\t\t\t\"vnd.zzazz.deck+xml\" : \"zaz\",\n\t\t\t\"voicexml+xml\" : \"vxml\",\n\t\t\t\"widget\" : \"wgt\",\n\t\t\t\"winhlp\" : \"hlp\",\n\t\t\t\"wsdl+xml\" : \"wsdl\",\n\t\t\t\"wspolicy+xml\" : \"wspolicy\",\n\t\t\t\"x-ace-compressed\" : \"ace\",\n\t\t\t\"x-authorware-bin\" : [ \"aab\", \"x32\", \"u32\", \"vox\" ],\n\t\t\t\"x-authorware-map\" : \"aam\",\n\t\t\t\"x-authorware-seg\" : \"aas\",\n\t\t\t\"x-blorb\" : [ \"blb\", \"blorb\" ],\n\t\t\t\"x-bzip\" : \"bz\",\n\t\t\t\"x-bzip2\" : [ \"bz2\", \"boz\" ],\n\t\t\t\"x-cfs-compressed\" : \"cfs\",\n\t\t\t\"x-chat\" : \"chat\",\n\t\t\t\"x-conference\" : \"nsc\",\n\t\t\t\"x-dgc-compressed\" : \"dgc\",\n\t\t\t\"x-dtbncx+xml\" : \"ncx\",\n\t\t\t\"x-dtbook+xml\" : \"dtb\",\n\t\t\t\"x-dtbresource+xml\" : \"res\",\n\t\t\t\"x-eva\" : \"eva\",\n\t\t\t\"x-font-bdf\" : \"bdf\",\n\t\t\t\"x-font-ghostscript\" : \"gsf\",\n\t\t\t\"x-font-linux-psf\" : \"psf\",\n\t\t\t\"x-font-otf\" : \"otf\",\n\t\t\t\"x-font-pcf\" : \"pcf\",\n\t\t\t\"x-font-snf\" : \"snf\",\n\t\t\t\"x-font-ttf\" : [ \"ttf\", \"ttc\" ],\n\t\t\t\"x-font-type1\" : [ \"pfa\", \"pfb\", \"pfm\", \"afm\" ],\n\t\t\t\"x-font-woff\" : \"woff\",\n\t\t\t\"x-freearc\" : \"arc\",\n\t\t\t\"x-gca-compressed\" : \"gca\",\n\t\t\t\"x-glulx\" : \"ulx\",\n\t\t\t\"x-gramps-xml\" : \"gramps\",\n\t\t\t\"x-install-instructions\" : \"install\",\n\t\t\t\"x-lzh-compressed\" : [ \"lzh\", \"lha\" ],\n\t\t\t\"x-mie\" : \"mie\",\n\t\t\t\"x-mobipocket-ebook\" : [ \"prc\", \"mobi\" ],\n\t\t\t\"x-ms-application\" : \"application\",\n\t\t\t\"x-ms-shortcut\" : \"lnk\",\n\t\t\t\"x-ms-xbap\" : \"xbap\",\n\t\t\t\"x-msbinder\" : \"obd\",\n\t\t\t\"x-mscardfile\" : \"crd\",\n\t\t\t\"x-msclip\" : \"clp\",\n\t\t\t\"x-msdownload\" : [ \"exe\", \"dll\", \"com\", \"bat\", \"msi\" ],\n\t\t\t\"x-msmediaview\" : [ \"mvb\", \"m13\", \"m14\" ],\n\t\t\t\"x-msmetafile\" : [ \"wmf\", \"wmz\", \"emf\", \"emz\" ],\n\t\t\t\"x-msmoney\" : \"mny\",\n\t\t\t\"x-mspublisher\" : \"pub\",\n\t\t\t\"x-msschedule\" : \"scd\",\n\t\t\t\"x-msterminal\" : \"trm\",\n\t\t\t\"x-mswrite\" : \"wri\",\n\t\t\t\"x-nzb\" : \"nzb\",\n\t\t\t\"x-pkcs12\" : [ \"p12\", \"pfx\" ],\n\t\t\t\"x-pkcs7-certificates\" : [ \"p7b\", \"spc\" ],\n\t\t\t\"x-research-info-systems\" : \"ris\",\n\t\t\t\"x-silverlight-app\" : \"xap\",\n\t\t\t\"x-sql\" : \"sql\",\n\t\t\t\"x-stuffitx\" : \"sitx\",\n\t\t\t\"x-subrip\" : \"srt\",\n\t\t\t\"x-t3vm-image\" : \"t3\",\n\t\t\t\"x-tads\" : \"gam\",\n\t\t\t\"x-tex\" : \"tex\",\n\t\t\t\"x-tex-tfm\" : \"tfm\",\n\t\t\t\"x-tgif\" : \"obj\",\n\t\t\t\"x-xliff+xml\" : \"xlf\",\n\t\t\t\"x-xz\" : \"xz\",\n\t\t\t\"x-zmachine\" : [ \"z1\", \"z2\", \"z3\", \"z4\", \"z5\", \"z6\", \"z7\", \"z8\" ],\n\t\t\t\"xaml+xml\" : \"xaml\",\n\t\t\t\"xcap-diff+xml\" : \"xdf\",\n\t\t\t\"xenc+xml\" : \"xenc\",\n\t\t\t\"xml-dtd\" : \"dtd\",\n\t\t\t\"xop+xml\" : \"xop\",\n\t\t\t\"xproc+xml\" : \"xpl\",\n\t\t\t\"xslt+xml\" : \"xslt\",\n\t\t\t\"xv+xml\" : [ \"mxml\", \"xhvml\", \"xvml\", \"xvm\" ],\n\t\t\t\"yang\" : \"yang\",\n\t\t\t\"yin+xml\" : \"yin\",\n\t\t\t\"envoy\" : \"evy\",\n\t\t\t\"fractals\" : \"fif\",\n\t\t\t\"internet-property-stream\" : \"acx\",\n\t\t\t\"olescript\" : \"axs\",\n\t\t\t\"vnd.ms-outlook\" : \"msg\",\n\t\t\t\"vnd.ms-pkicertstore\" : \"sst\",\n\t\t\t\"x-compress\" : \"z\",\n\t\t\t\"x-compressed\" : \"tgz\",\n\t\t\t\"x-gzip\" : \"gz\",\n\t\t\t\"x-perfmon\" : [ \"pma\", \"pmc\", \"pml\", \"pmr\", \"pmw\" ],\n\t\t\t\"x-pkcs7-mime\" : [ \"p7c\", \"p7m\" ],\n\t\t\t\"ynd.ms-pkipko\" : \"pko\"\n\t\t},\n\t\t\"audio\" : {\n\t\t\t\"amr\" : \"amr\",\n\t\t\t\"amr-wb\" : \"awb\",\n\t\t\t\"annodex\" : \"axa\",\n\t\t\t\"basic\" : [ \"au\", \"snd\" ],\n\t\t\t\"flac\" : \"flac\",\n\t\t\t\"midi\" : [ \"mid\", \"midi\", \"kar\", \"rmi\" ],\n\t\t\t\"mpeg\" : [ \"mpga\", \"mpega\", \"mp2\", \"mp3\", \"m4a\", \"mp2a\", \"m2a\", \"m3a\" ],\n\t\t\t\"mpegurl\" : \"m3u\",\n\t\t\t\"ogg\" : [ \"oga\", \"ogg\", \"spx\" ],\n\t\t\t\"prs.sid\" : \"sid\",\n\t\t\t\"x-aiff\" : [ \"aif\", \"aiff\", \"aifc\" ],\n\t\t\t\"x-gsm\" : \"gsm\",\n\t\t\t\"x-ms-wma\" : \"wma\",\n\t\t\t\"x-ms-wax\" : \"wax\",\n\t\t\t\"x-pn-realaudio\" : \"ram\",\n\t\t\t\"x-realaudio\" : \"ra\",\n\t\t\t\"x-sd2\" : \"sd2\",\n\t\t\t\"x-wav\" : \"wav\",\n\t\t\t\"adpcm\" : \"adp\",\n\t\t\t\"mp4\" : \"mp4a\",\n\t\t\t\"s3m\" : \"s3m\",\n\t\t\t\"silk\" : \"sil\",\n\t\t\t\"vnd.dece.audio\" : [ \"uva\", \"uvva\" ],\n\t\t\t\"vnd.digital-winds\" : \"eol\",\n\t\t\t\"vnd.dra\" : \"dra\",\n\t\t\t\"vnd.dts\" : \"dts\",\n\t\t\t\"vnd.dts.hd\" : \"dtshd\",\n\t\t\t\"vnd.lucent.voice\" : \"lvp\",\n\t\t\t\"vnd.ms-playready.media.pya\" : \"pya\",\n\t\t\t\"vnd.nuera.ecelp4800\" : \"ecelp4800\",\n\t\t\t\"vnd.nuera.ecelp7470\" : \"ecelp7470\",\n\t\t\t\"vnd.nuera.ecelp9600\" : \"ecelp9600\",\n\t\t\t\"vnd.rip\" : \"rip\",\n\t\t\t\"webm\" : \"weba\",\n\t\t\t\"x-aac\" : \"aac\",\n\t\t\t\"x-caf\" : \"caf\",\n\t\t\t\"x-matroska\" : \"mka\",\n\t\t\t\"x-pn-realaudio-plugin\" : \"rmp\",\n\t\t\t\"xm\" : \"xm\",\n\t\t\t\"mid\" : [ \"mid\", \"rmi\" ]\n\t\t},\n\t\t\"chemical\" : {\n\t\t\t\"x-alchemy\" : \"alc\",\n\t\t\t\"x-cache\" : [ \"cac\", \"cache\" ],\n\t\t\t\"x-cache-csf\" : \"csf\",\n\t\t\t\"x-cactvs-binary\" : [ \"cbin\", \"cascii\", \"ctab\" ],\n\t\t\t\"x-cdx\" : \"cdx\",\n\t\t\t\"x-chem3d\" : \"c3d\",\n\t\t\t\"x-cif\" : \"cif\",\n\t\t\t\"x-cmdf\" : \"cmdf\",\n\t\t\t\"x-cml\" : \"cml\",\n\t\t\t\"x-compass\" : \"cpa\",\n\t\t\t\"x-crossfire\" : \"bsd\",\n\t\t\t\"x-csml\" : [ \"csml\", \"csm\" ],\n\t\t\t\"x-ctx\" : \"ctx\",\n\t\t\t\"x-cxf\" : [ \"cxf\", \"cef\" ],\n\t\t\t\"x-embl-dl-nucleotide\" : [ \"emb\", \"embl\" ],\n\t\t\t\"x-gamess-input\" : [ \"inp\", \"gam\", \"gamin\" ],\n\t\t\t\"x-gaussian-checkpoint\" : [ \"fch\", \"fchk\" ],\n\t\t\t\"x-gaussian-cube\" : \"cub\",\n\t\t\t\"x-gaussian-input\" : [ \"gau\", \"gjc\", \"gjf\" ],\n\t\t\t\"x-gaussian-log\" : \"gal\",\n\t\t\t\"x-gcg8-sequence\" : \"gcg\",\n\t\t\t\"x-genbank\" : \"gen\",\n\t\t\t\"x-hin\" : \"hin\",\n\t\t\t\"x-isostar\" : [ \"istr\", \"ist\" ],\n\t\t\t\"x-jcamp-dx\" : [ \"jdx\", \"dx\" ],\n\t\t\t\"x-kinemage\" : \"kin\",\n\t\t\t\"x-macmolecule\" : \"mcm\",\n\t\t\t\"x-macromodel-input\" : [ \"mmd\", \"mmod\" ],\n\t\t\t\"x-mdl-molfile\" : \"mol\",\n\t\t\t\"x-mdl-rdfile\" : \"rd\",\n\t\t\t\"x-mdl-rxnfile\" : \"rxn\",\n\t\t\t\"x-mdl-sdfile\" : [ \"sd\", \"sdf\" ],\n\t\t\t\"x-mdl-tgf\" : \"tgf\",\n\t\t\t\"x-mmcif\" : \"mcif\",\n\t\t\t\"x-mol2\" : \"mol2\",\n\t\t\t\"x-molconn-Z\" : \"b\",\n\t\t\t\"x-mopac-graph\" : \"gpt\",\n\t\t\t\"x-mopac-input\" : [ \"mop\", \"mopcrt\", \"mpc\", \"zmt\" ],\n\t\t\t\"x-mopac-out\" : \"moo\",\n\t\t\t\"x-ncbi-asn1\" : \"asn\",\n\t\t\t\"x-ncbi-asn1-ascii\" : [ \"prt\", \"ent\" ],\n\t\t\t\"x-ncbi-asn1-binary\" : [ \"val\", \"aso\" ],\n\t\t\t\"x-pdb\" : [ \"pdb\", \"ent\" ],\n\t\t\t\"x-rosdal\" : \"ros\",\n\t\t\t\"x-swissprot\" : \"sw\",\n\t\t\t\"x-vamas-iso14976\" : \"vms\",\n\t\t\t\"x-vmd\" : \"vmd\",\n\t\t\t\"x-xtel\" : \"xtel\",\n\t\t\t\"x-xyz\" : \"xyz\"\n\t\t},\n\t\t\"image\" : {\n\t\t\t\"gif\" : \"gif\",\n\t\t\t\"ief\" : \"ief\",\n\t\t\t\"jpeg\" : [ \"jpeg\", \"jpg\", \"jpe\" ],\n\t\t\t\"pcx\" : \"pcx\",\n\t\t\t\"png\" : \"png\",\n\t\t\t\"svg+xml\" : [ \"svg\", \"svgz\" ],\n\t\t\t\"tiff\" : [ \"tiff\", \"tif\" ],\n\t\t\t\"vnd.djvu\" : [ \"djvu\", \"djv\" ],\n\t\t\t\"vnd.wap.wbmp\" : \"wbmp\",\n\t\t\t\"x-canon-cr2\" : \"cr2\",\n\t\t\t\"x-canon-crw\" : \"crw\",\n\t\t\t\"x-cmu-raster\" : \"ras\",\n\t\t\t\"x-coreldraw\" : \"cdr\",\n\t\t\t\"x-coreldrawpattern\" : \"pat\",\n\t\t\t\"x-coreldrawtemplate\" : \"cdt\",\n\t\t\t\"x-corelphotopaint\" : \"cpt\",\n\t\t\t\"x-epson-erf\" : \"erf\",\n\t\t\t\"x-icon\" : \"ico\",\n\t\t\t\"x-jg\" : \"art\",\n\t\t\t\"x-jng\" : \"jng\",\n\t\t\t\"x-nikon-nef\" : \"nef\",\n\t\t\t\"x-olympus-orf\" : \"orf\",\n\t\t\t\"x-photoshop\" : \"psd\",\n\t\t\t\"x-portable-anymap\" : \"pnm\",\n\t\t\t\"x-portable-bitmap\" : \"pbm\",\n\t\t\t\"x-portable-graymap\" : \"pgm\",\n\t\t\t\"x-portable-pixmap\" : \"ppm\",\n\t\t\t\"x-rgb\" : \"rgb\",\n\t\t\t\"x-xbitmap\" : \"xbm\",\n\t\t\t\"x-xpixmap\" : \"xpm\",\n\t\t\t\"x-xwindowdump\" : \"xwd\",\n\t\t\t\"bmp\" : \"bmp\",\n\t\t\t\"cgm\" : \"cgm\",\n\t\t\t\"g3fax\" : \"g3\",\n\t\t\t\"ktx\" : \"ktx\",\n\t\t\t\"prs.btif\" : \"btif\",\n\t\t\t\"sgi\" : \"sgi\",\n\t\t\t\"vnd.dece.graphic\" : [ \"uvi\", \"uvvi\", \"uvg\", \"uvvg\" ],\n\t\t\t\"vnd.dwg\" : \"dwg\",\n\t\t\t\"vnd.dxf\" : \"dxf\",\n\t\t\t\"vnd.fastbidsheet\" : \"fbs\",\n\t\t\t\"vnd.fpx\" : \"fpx\",\n\t\t\t\"vnd.fst\" : \"fst\",\n\t\t\t\"vnd.fujixerox.edmics-mmr\" : \"mmr\",\n\t\t\t\"vnd.fujixerox.edmics-rlc\" : \"rlc\",\n\t\t\t\"vnd.ms-modi\" : \"mdi\",\n\t\t\t\"vnd.ms-photo\" : \"wdp\",\n\t\t\t\"vnd.net-fpx\" : \"npx\",\n\t\t\t\"vnd.xiff\" : \"xif\",\n\t\t\t\"webp\" : \"webp\",\n\t\t\t\"x-3ds\" : \"3ds\",\n\t\t\t\"x-cmx\" : \"cmx\",\n\t\t\t\"x-freehand\" : [ \"fh\", \"fhc\", \"fh4\", \"fh5\", \"fh7\" ],\n\t\t\t\"x-pict\" : [ \"pic\", \"pct\" ],\n\t\t\t\"x-tga\" : \"tga\",\n\t\t\t\"cis-cod\" : \"cod\",\n\t\t\t\"pipeg\" : \"jfif\"\n\t\t},\n\t\t\"message\" : {\n\t\t\t\"rfc822\" : [ \"eml\", \"mime\", \"mht\", \"mhtml\", \"nws\" ]\n\t\t},\n\t\t\"model\" : {\n\t\t\t\"iges\" : [ \"igs\", \"iges\" ],\n\t\t\t\"mesh\" : [ \"msh\", \"mesh\", \"silo\" ],\n\t\t\t\"vrml\" : [ \"wrl\", \"vrml\" ],\n\t\t\t\"x3d+vrml\" : [ \"x3dv\", \"x3dvz\" ],\n\t\t\t\"x3d+xml\" : [ \"x3d\", \"x3dz\" ],\n\t\t\t\"x3d+binary\" : [ \"x3db\", \"x3dbz\" ],\n\t\t\t\"vnd.collada+xml\" : \"dae\",\n\t\t\t\"vnd.dwf\" : \"dwf\",\n\t\t\t\"vnd.gdl\" : \"gdl\",\n\t\t\t\"vnd.gtw\" : \"gtw\",\n\t\t\t\"vnd.mts\" : \"mts\",\n\t\t\t\"vnd.vtu\" : \"vtu\"\n\t\t},\n\t\t\"text\" : {\n\t\t\t\"cache-manifest\" : [ \"manifest\", \"appcache\" ],\n\t\t\t\"calendar\" : [ \"ics\", \"icz\", \"ifb\" ],\n\t\t\t\"css\" : \"css\",\n\t\t\t\"csv\" : \"csv\",\n\t\t\t\"h323\" : \"323\",\n\t\t\t\"html\" : [ \"html\", \"htm\", \"shtml\", \"stm\" ],\n\t\t\t\"iuls\" : \"uls\",\n\t\t\t\"mathml\" : \"mml\",\n\t\t\t\"plain\" : [ \"txt\", \"text\", \"brf\", \"conf\", \"def\", \"list\", \"log\", \"in\", \"bas\" ],\n\t\t\t\"richtext\" : \"rtx\",\n\t\t\t\"scriptlet\" : [ \"sct\", \"wsc\" ],\n\t\t\t\"texmacs\" : [ \"tm\", \"ts\" ],\n\t\t\t\"tab-separated-values\" : \"tsv\",\n\t\t\t\"vnd.sun.j2me.app-descriptor\" : \"jad\",\n\t\t\t\"vnd.wap.wml\" : \"wml\",\n\t\t\t\"vnd.wap.wmlscript\" : \"wmls\",\n\t\t\t\"x-bibtex\" : \"bib\",\n\t\t\t\"x-boo\" : \"boo\",\n\t\t\t\"x-c++hdr\" : [ \"h++\", \"hpp\", \"hxx\", \"hh\" ],\n\t\t\t\"x-c++src\" : [ \"c++\", \"cpp\", \"cxx\", \"cc\" ],\n\t\t\t\"x-component\" : \"htc\",\n\t\t\t\"x-dsrc\" : \"d\",\n\t\t\t\"x-diff\" : [ \"diff\", \"patch\" ],\n\t\t\t\"x-haskell\" : \"hs\",\n\t\t\t\"x-java\" : \"java\",\n\t\t\t\"x-literate-haskell\" : \"lhs\",\n\t\t\t\"x-moc\" : \"moc\",\n\t\t\t\"x-pascal\" : [ \"p\", \"pas\" ],\n\t\t\t\"x-pcs-gcd\" : \"gcd\",\n\t\t\t\"x-perl\" : [ \"pl\", \"pm\" ],\n\t\t\t\"x-python\" : \"py\",\n\t\t\t\"x-scala\" : \"scala\",\n\t\t\t\"x-setext\" : \"etx\",\n\t\t\t\"x-tcl\" : [ \"tcl\", \"tk\" ],\n\t\t\t\"x-tex\" : [ \"tex\", \"ltx\", \"sty\", \"cls\" ],\n\t\t\t\"x-vcalendar\" : \"vcs\",\n\t\t\t\"x-vcard\" : \"vcf\",\n\t\t\t\"n3\" : \"n3\",\n\t\t\t\"prs.lines.tag\" : \"dsc\",\n\t\t\t\"sgml\" : [ \"sgml\", \"sgm\" ],\n\t\t\t\"troff\" : [ \"t\", \"tr\", \"roff\", \"man\", \"me\", \"ms\" ],\n\t\t\t\"turtle\" : \"ttl\",\n\t\t\t\"uri-list\" : [ \"uri\", \"uris\", \"urls\" ],\n\t\t\t\"vcard\" : \"vcard\",\n\t\t\t\"vnd.curl\" : \"curl\",\n\t\t\t\"vnd.curl.dcurl\" : \"dcurl\",\n\t\t\t\"vnd.curl.scurl\" : \"scurl\",\n\t\t\t\"vnd.curl.mcurl\" : \"mcurl\",\n\t\t\t\"vnd.dvb.subtitle\" : \"sub\",\n\t\t\t\"vnd.fly\" : \"fly\",\n\t\t\t\"vnd.fmi.flexstor\" : \"flx\",\n\t\t\t\"vnd.graphviz\" : \"gv\",\n\t\t\t\"vnd.in3d.3dml\" : \"3dml\",\n\t\t\t\"vnd.in3d.spot\" : \"spot\",\n\t\t\t\"x-asm\" : [ \"s\", \"asm\" ],\n\t\t\t\"x-c\" : [ \"c\", \"cc\", \"cxx\", \"cpp\", \"h\", \"hh\", \"dic\" ],\n\t\t\t\"x-fortran\" : [ \"f\", \"for\", \"f77\", \"f90\" ],\n\t\t\t\"x-opml\" : \"opml\",\n\t\t\t\"x-nfo\" : \"nfo\",\n\t\t\t\"x-sfv\" : \"sfv\",\n\t\t\t\"x-uuencode\" : \"uu\",\n\t\t\t\"webviewhtml\" : \"htt\"\n\t\t},\n\t\t\"video\" : {\n\t\t\t\"3gpp\" : \"3gp\",\n\t\t\t\"annodex\" : \"axv\",\n\t\t\t\"dl\" : \"dl\",\n\t\t\t\"dv\" : [ \"dif\", \"dv\" ],\n\t\t\t\"fli\" : \"fli\",\n\t\t\t\"gl\" : \"gl\",\n\t\t\t\"mpeg\" : [ \"mpeg\", \"mpg\", \"mpe\", \"m1v\", \"m2v\", \"mp2\", \"mpa\", \"mpv2\" ],\n\t\t\t\"mp4\" : [ \"mp4\", \"mp4v\", \"mpg4\" ],\n\t\t\t\"quicktime\" : [ \"qt\", \"mov\" ],\n\t\t\t\"ogg\" : \"ogv\",\n\t\t\t\"vnd.mpegurl\" : [ \"mxu\", \"m4u\" ],\n\t\t\t\"x-flv\" : \"flv\",\n\t\t\t\"x-la-asf\" : [ \"lsf\", \"lsx\" ],\n\t\t\t\"x-mng\" : \"mng\",\n\t\t\t\"x-ms-asf\" : [ \"asf\", \"asx\", \"asr\" ],\n\t\t\t\"x-ms-wm\" : \"wm\",\n\t\t\t\"x-ms-wmv\" : \"wmv\",\n\t\t\t\"x-ms-wmx\" : \"wmx\",\n\t\t\t\"x-ms-wvx\" : \"wvx\",\n\t\t\t\"x-msvideo\" : \"avi\",\n\t\t\t\"x-sgi-movie\" : \"movie\",\n\t\t\t\"x-matroska\" : [ \"mpv\", \"mkv\", \"mk3d\", \"mks\" ],\n\t\t\t\"3gpp2\" : \"3g2\",\n\t\t\t\"h261\" : \"h261\",\n\t\t\t\"h263\" : \"h263\",\n\t\t\t\"h264\" : \"h264\",\n\t\t\t\"jpeg\" : \"jpgv\",\n\t\t\t\"jpm\" : [ \"jpm\", \"jpgm\" ],\n\t\t\t\"mj2\" : [ \"mj2\", \"mjp2\" ],\n\t\t\t\"vnd.dece.hd\" : [ \"uvh\", \"uvvh\" ],\n\t\t\t\"vnd.dece.mobile\" : [ \"uvm\", \"uvvm\" ],\n\t\t\t\"vnd.dece.pd\" : [ \"uvp\", \"uvvp\" ],\n\t\t\t\"vnd.dece.sd\" : [ \"uvs\", \"uvvs\" ],\n\t\t\t\"vnd.dece.video\" : [ \"uvv\", \"uvvv\" ],\n\t\t\t\"vnd.dvb.file\" : \"dvb\",\n\t\t\t\"vnd.fvt\" : \"fvt\",\n\t\t\t\"vnd.ms-playready.media.pyv\" : \"pyv\",\n\t\t\t\"vnd.uvvu.mp4\" : [ \"uvu\", \"uvvu\" ],\n\t\t\t\"vnd.vivo\" : \"viv\",\n\t\t\t\"webm\" : \"webm\",\n\t\t\t\"x-f4v\" : \"f4v\",\n\t\t\t\"x-m4v\" : \"m4v\",\n\t\t\t\"x-ms-vob\" : \"vob\",\n\t\t\t\"x-smv\" : \"smv\"\n\t\t},\n\t\t\"x-conference\" : {\n\t\t\t\"x-cooltalk\" : \"ice\"\n\t\t},\n\t\t\"x-world\" : {\n\t\t\t\"x-vrml\" : [ \"vrm\", \"vrml\", \"wrl\", \"flr\", \"wrz\", \"xaf\", \"xof\" ]\n\t\t}\n\t};\n\n\tvar mimeTypes = (function() {\n\t\tvar type, subtype, val, index, mimeTypes = {};\n\t\tfor (type in table) {\n\t\t\tif (table.hasOwnProperty(type)) {\n\t\t\t\tfor (subtype in table[type]) {\n\t\t\t\t\tif (table[type].hasOwnProperty(subtype)) {\n\t\t\t\t\t\tval = table[type][subtype];\n\t\t\t\t\t\tif (typeof val == \"string\") {\n\t\t\t\t\t\t\tmimeTypes[val] = type + \"/\" + subtype;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (index = 0; index < val.length; index++) {\n\t\t\t\t\t\t\t\tmimeTypes[val[index]] = type + \"/\" + subtype;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn mimeTypes;\n\t})();\n\n\tzip.getMimeType = function(filename) {\n\t\tvar defaultValue = \"application/octet-stream\";\n\t\treturn filename && mimeTypes[filename.split(\".\").pop().toLowerCase()] || defaultValue;\n\t};\n\n})();\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/mime-types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/pako/codecs.js",
    "content": "/// wrapper for pako (https://github.com/nodeca/pako)\n\n/* globals pako */\n(function(global) {\n\t\"use strict\";\n\n\tfunction Codec(isDeflater, options) {\n\t\tvar newOptions = { raw: true, chunkSize: 1024 * 1024 };\n\t\tif (options && typeof options.level === 'number')\n\t\t\tnewOptions.level = options.level;\n\t\tthis._backEnd = isDeflater?\n\t\t\tnew pako.Deflate(newOptions) :\n\t\t\tnew pako.Inflate(newOptions);\n\t\tthis._chunks = [];\n\t\tthis._dataLength = 0;\n\t\tthis._backEnd.onData = this._onData.bind(this);\n\t}\n\tCodec.prototype._onData = function _onData(chunk) {\n\t\tthis._chunks.push(chunk);\n\t\tthis._dataLength += chunk.length;\n\t};\n\tCodec.prototype._fetchData = function _fetchData() {\n\t\tvar be = this._backEnd;\n\t\tif (be.err !== 0)\n\t\t\tthrow new Error(be.msg);\n\t\tvar chunks = this._chunks;\n\t\tvar data;\n\t\tif (chunks.length === 1)\n\t\t\tdata = chunks[0];\n\t\telse if (chunks.length > 1) {\n\t\t\tdata = new Uint8Array(this._dataLength);\n\t\t\tfor (var i = 0, n = chunks.length, off = 0; i < n; i++) {\n\t\t\t\tvar chunk = chunks[i];\n\t\t\t\tdata.set(chunk, off);\n\t\t\t\toff += chunk.length;\n\t\t\t}\n\t\t}\n\t\tchunks.length = 0;\n\t\tthis._dataLength = 0;\n\t\treturn data;\n\t};\n\tCodec.prototype.append = function append(bytes, onprogress) {\n\t\tthis._backEnd.push(bytes, false);\n\t\treturn this._fetchData();\n\t};\n\tCodec.prototype.flush = function flush() {\n\t\tthis._backEnd.push(new Uint8Array(0), true);\n\t\treturn this._fetchData();\n\t};\n\n\tfunction Deflater(options) {\n\t\tCodec.call(this, true, options);\n\t}\n\tDeflater.prototype = Object.create(Codec.prototype);\n\tfunction Inflater() {\n\t\tCodec.call(this, false);\n\t}\n\tInflater.prototype = Object.create(Codec.prototype);\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Deflater = env._pako_Deflater = Deflater;\n\tenv.Inflater = env._pako_Inflater = Inflater;\n})(this);",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/pako/codecs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/arraybuffer.js",
    "content": "// Code can be found at: http://www.calormen.com/polyfill/typedarray.js\n\n/*\n $LicenseInfo:firstyear=2010&license=mit$\n\n Copyright (c) 2010, Linden Research, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n $/LicenseInfo$\n */\n\n// Original can be found at:  https://bitbucket.org/lindenlab/llsd\n// Modifications by Joshua Bell inexorabletash@hotmail.com\n//  * Restructure the creation of types and exporting to global namespace\n//  * Allow no arguments to DataView constructor\n//  * Work cross-frame with native arrays/shimmed DataView\n//  * Corrected Object.defineProperty shim for IE8\n// ES3/ES5 implementation of the Krhonos TypedArray Working Draft (work in progress):\n//   Ref: https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/doc/spec/TypedArray-spec.html\n//   Date: 2011-02-01\n//\n// Variations:\n//  * Float/Double -> Float32/Float64, per WebGL-Public mailing list conversations (post 5/17)\n//  * Allows typed_array.get/set() as alias for subscripts (typed_array[])\n(function(global) {\n\t\"use strict\";\n\n\tvar USE_NATIVE_IF_AVAILABLE = true;\n\n\t// Approximations of internal ECMAScript conversion functions\n\tvar ECMAScript = (function() {\n\t\t// Stash a copy in case other scripts modify these\n\t\tvar opts = Object.prototype.toString, ophop = Object.prototype.hasOwnProperty;\n\n\t\treturn {\n\t\t\t// Class returns internal [[Class]] property, used to avoid cross-frame instanceof issues:\n\t\t\tClass : function(v) {\n\t\t\t\treturn opts.call(v).replace(/^\\[object *|\\]$/g, '');\n\t\t\t},\n\t\t\tHasProperty : function(o, p) {\n\t\t\t\treturn p in o;\n\t\t\t},\n\t\t\tHasOwnProperty : function(o, p) {\n\t\t\t\treturn ophop.call(o, p);\n\t\t\t},\n\t\t\tIsCallable : function(o) {\n\t\t\t\treturn typeof o === 'function';\n\t\t\t},\n\t\t\tToInt32 : function(v) {\n\t\t\t\treturn v >> 0;\n\t\t\t},\n\t\t\tToUint32 : function(v) {\n\t\t\t\treturn v >>> 0;\n\t\t\t}\n\t\t};\n\t}());\n\n\t// Create an INDEX_SIZE_ERR event - intentionally induces a DOM error if possible\n\n\tfunction new_INDEX_SIZE_ERR() {\n\t\ttry {\n\t\t\tif (document) {\n\t\t\t\t// raises DOMException(INDEX_SIZE_ERR)\n\t\t\t\tdocument.createTextNode(\"\").splitText(1);\n\t\t\t}\n\t\t\treturn new RangeError(\"INDEX_SIZE_ERR\");\n\t\t} catch (e) {\n\t\t\treturn e;\n\t\t}\n\t}\n\n\t// ES5: lock down object properties\n\n\tfunction configureProperties(obj) {\n\t\tif (Object.getOwnPropertyNames && Object.defineProperty) {\n\t\t\tvar props = Object.getOwnPropertyNames(obj), i;\n\t\t\tfor (i = 0; i < props.length; i += 1) {\n\t\t\t\tObject.defineProperty(obj, props[i], {\n\t\t\t\t\tvalue : obj[props[i]],\n\t\t\t\t\twritable : false,\n\t\t\t\t\tenumerable : false,\n\t\t\t\t\tconfigurable : false\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t// emulate ES5 getter/setter API using legacy APIs\n\t// http://blogs.msdn.com/b/ie/archive/2010/09/07/transitioning-existing-code-to-the-es5-getter-setter-apis.aspx\n\t// (second clause tests for Object.defineProperty() in IE<9 that only supports extending DOM prototypes, but\n\t// note that IE<9 does not support __defineGetter__ or __defineSetter__ so it just renders the method harmless)\n\tif (!Object.defineProperty || !(function() {\n\t\ttry {\n\t\t\tObject.defineProperty({}, 'x', {});\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}())) {\n\t\tObject.defineProperty = function(o, p, desc) {\n\t\t\tif (!o === Object(o)) {\n\t\t\t\tthrow new TypeError(\"Object.defineProperty called on non-object\");\n\t\t\t}\n\t\t\tif (ECMAScript.HasProperty(desc, 'get') && Object.prototype.__defineGetter__) {\n\t\t\t\tObject.prototype.__defineGetter__.call(o, p, desc.get);\n\t\t\t}\n\t\t\tif (ECMAScript.HasProperty(desc, 'set') && Object.prototype.__defineSetter__) {\n\t\t\t\tObject.prototype.__defineSetter__.call(o, p, desc.set);\n\t\t\t}\n\t\t\tif (ECMAScript.HasProperty(desc, 'value')) {\n\t\t\t\to[p] = desc.value;\n\t\t\t}\n\t\t\treturn o;\n\t\t};\n\t}\n\n\tif (!Object.getOwnPropertyNames) {\n\t\tObject.getOwnPropertyNames = function getOwnPropertyNames(o) {\n\t\t\tif (o !== Object(o)) {\n\t\t\t\tthrow new TypeError(\"Object.getOwnPropertyNames called on non-object\");\n\t\t\t}\n\t\t\tvar props = [], p;\n\t\t\tfor (p in o) {\n\t\t\t\tif (ECMAScript.HasOwnProperty(o, p)) {\n\t\t\t\t\tprops.push(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn props;\n\t\t};\n\t}\n\n\t// ES5: Make obj[index] an alias for obj._getter(index)/obj._setter(index, value)\n\t// for index in 0 ... obj.length\n\n\tfunction makeArrayAccessors(obj) {\n\t\tif (!Object.defineProperty) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction makeArrayAccessor(index) {\n\t\t\tObject.defineProperty(obj, index, {\n\t\t\t\t'get' : function() {\n\t\t\t\t\treturn obj._getter(index);\n\t\t\t\t},\n\t\t\t\t'set' : function(v) {\n\t\t\t\t\tobj._setter(index, v);\n\t\t\t\t},\n\t\t\t\tenumerable : true,\n\t\t\t\tconfigurable : false\n\t\t\t});\n\t\t}\n\n\t\tvar i;\n\t\tfor (i = 0; i < obj.length; i += 1) {\n\t\t\tmakeArrayAccessor(i);\n\t\t}\n\t}\n\n\t// Internal conversion functions:\n\t// pack<Type>() - take a number (interpreted as Type), output a byte array\n\t// unpack<Type>() - take a byte array, output a Type-like number\n\n\tfunction as_signed(value, bits) {\n\t\tvar s = 32 - bits;\n\t\treturn (value << s) >> s;\n\t}\n\n\tfunction as_unsigned(value, bits) {\n\t\tvar s = 32 - bits;\n\t\treturn (value << s) >>> s;\n\t}\n\n\tfunction packInt8(n) {\n\t\treturn [ n & 0xff ];\n\t}\n\n\tfunction unpackInt8(bytes) {\n\t\treturn as_signed(bytes[0], 8);\n\t}\n\n\tfunction packUint8(n) {\n\t\treturn [ n & 0xff ];\n\t}\n\n\tfunction unpackUint8(bytes) {\n\t\treturn as_unsigned(bytes[0], 8);\n\t}\n\n\tfunction packInt16(n) {\n\t\treturn [ (n >> 8) & 0xff, n & 0xff ];\n\t}\n\n\tfunction unpackInt16(bytes) {\n\t\treturn as_signed(bytes[0] << 8 | bytes[1], 16);\n\t}\n\n\tfunction packUint16(n) {\n\t\treturn [ (n >> 8) & 0xff, n & 0xff ];\n\t}\n\n\tfunction unpackUint16(bytes) {\n\t\treturn as_unsigned(bytes[0] << 8 | bytes[1], 16);\n\t}\n\n\tfunction packInt32(n) {\n\t\treturn [ (n >> 24) & 0xff, (n >> 16) & 0xff, (n >> 8) & 0xff, n & 0xff ];\n\t}\n\n\tfunction unpackInt32(bytes) {\n\t\treturn as_signed(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);\n\t}\n\n\tfunction packUint32(n) {\n\t\treturn [ (n >> 24) & 0xff, (n >> 16) & 0xff, (n >> 8) & 0xff, n & 0xff ];\n\t}\n\n\tfunction unpackUint32(bytes) {\n\t\treturn as_unsigned(bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], 32);\n\t}\n\n\tfunction packIEEE754(v, ebits, fbits) {\n\n\t\tvar bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str, bytes;\n\n\t\t// Compute sign, exponent, fraction\n\t\tif (v !== v) {\n\t\t\t// NaN\n\t\t\t// http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\n\t\t\te = (1 << bias) - 1;\n\t\t\tf = Math.pow(2, fbits - 1);\n\t\t\ts = 0;\n\t\t} else if (v === Infinity || v === -Infinity) {\n\t\t\te = (1 << bias) - 1;\n\t\t\tf = 0;\n\t\t\ts = (v < 0) ? 1 : 0;\n\t\t} else if (v === 0) {\n\t\t\te = 0;\n\t\t\tf = 0;\n\t\t\ts = (1 / v === -Infinity) ? 1 : 0;\n\t\t} else {\n\t\t\ts = v < 0;\n\t\t\tv = Math.abs(v);\n\n\t\t\tif (v >= Math.pow(2, 1 - bias)) {\n\t\t\t\t// Normalized\n\t\t\t\tln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n\t\t\t\te = ln + bias;\n\t\t\t\tf = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n\t\t\t} else {\n\t\t\t\t// Denormalized\n\t\t\t\te = 0;\n\t\t\t\tf = Math.round(v / Math.pow(2, 1 - bias - fbits));\n\t\t\t}\n\t\t}\n\n\t\t// Pack sign, exponent, fraction\n\t\tbits = [];\n\t\tfor (i = fbits; i; i -= 1) {\n\t\t\tbits.push(f % 2 ? 1 : 0);\n\t\t\tf = Math.floor(f / 2);\n\t\t}\n\t\tfor (i = ebits; i; i -= 1) {\n\t\t\tbits.push(e % 2 ? 1 : 0);\n\t\t\te = Math.floor(e / 2);\n\t\t}\n\t\tbits.push(s ? 1 : 0);\n\t\tbits.reverse();\n\t\tstr = bits.join('');\n\n\t\t// Bits to bytes\n\t\tbytes = [];\n\t\twhile (str.length) {\n\t\t\tbytes.push(parseInt(str.substring(0, 8), 2));\n\t\t\tstr = str.substring(8);\n\t\t}\n\t\treturn bytes;\n\t}\n\n\tfunction unpackIEEE754(bytes, ebits, fbits) {\n\n\t\t// Bytes to bits\n\t\tvar bits = [], i, j, b, str, bias, s, e, f;\n\n\t\tfor (i = bytes.length; i; i -= 1) {\n\t\t\tb = bytes[i - 1];\n\t\t\tfor (j = 8; j; j -= 1) {\n\t\t\t\tbits.push(b % 2 ? 1 : 0);\n\t\t\t\tb = b >> 1;\n\t\t\t}\n\t\t}\n\t\tbits.reverse();\n\t\tstr = bits.join('');\n\n\t\t// Unpack sign, exponent, fraction\n\t\tbias = (1 << (ebits - 1)) - 1;\n\t\ts = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n\t\te = parseInt(str.substring(1, 1 + ebits), 2);\n\t\tf = parseInt(str.substring(1 + ebits), 2);\n\n\t\t// Produce number\n\t\tif (e === (1 << ebits) - 1) {\n\t\t\treturn f !== 0 ? NaN : s * Infinity;\n\t\t} else if (e > 0) {\n\t\t\t// Normalized\n\t\t\treturn s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n\t\t} else if (f !== 0) {\n\t\t\t// Denormalized\n\t\t\treturn s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n\t\t} else {\n\t\t\treturn s < 0 ? -0 : 0;\n\t\t}\n\t}\n\n\tfunction unpackFloat64(b) {\n\t\treturn unpackIEEE754(b, 11, 52);\n\t}\n\n\tfunction packFloat64(v) {\n\t\treturn packIEEE754(v, 11, 52);\n\t}\n\n\tfunction unpackFloat32(b) {\n\t\treturn unpackIEEE754(b, 8, 23);\n\t}\n\n\tfunction packFloat32(v) {\n\t\treturn packIEEE754(v, 8, 23);\n\t}\n\n\t//\n\t// 3 The ArrayBuffer Type\n\t//\n\t(function() {\n\n\t\t/** @constructor */\n\t\tvar ArrayBuffer = function ArrayBuffer(length) {\n\t\t\tlength = ECMAScript.ToInt32(length);\n\t\t\tif (length < 0) {\n\t\t\t\tthrow new RangeError('ArrayBuffer size is not a small enough positive integer.');\n\t\t\t}\n\n\t\t\tthis.byteLength = length;\n\t\t\tthis._bytes = [];\n\t\t\tthis._bytes.length = length;\n\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < this.byteLength; i += 1) {\n\t\t\t\tthis._bytes[i] = 0;\n\t\t\t}\n\n\t\t\tconfigureProperties(this);\n\t\t};\n\n\t\t//\n\t\t// 4 The ArrayBufferView Type\n\t\t//\n\t\t// NOTE: this constructor is not exported\n\t\t/** @constructor */\n\t\tvar ArrayBufferView = function ArrayBufferView() {\n\t\t\t// this.buffer = null;\n\t\t\t// this.byteOffset = 0;\n\t\t\t// this.byteLength = 0;\n\t\t};\n\n\t\t//\n\t\t// 5 The Typed Array View Types\n\t\t//\n\n\t\tfunction makeTypedArrayConstructor(bytesPerElement, pack, unpack) {\n\t\t\t// Each TypedArray type requires a distinct constructor instance with\n\t\t\t// identical logic, which this produces.\n\t\t\tvar ctor;\n\t\t\tctor = function(buffer, byteOffset, length) {\n\t\t\t\tvar array, sequence, i, s;\n\n\t\t\t\tif (!arguments.length || typeof arguments[0] === 'number') {\n\t\t\t\t\t// Constructor(unsigned long length)\n\t\t\t\t\tthis.length = ECMAScript.ToInt32(arguments[0]);\n\t\t\t\t\tif (length < 0) {\n\t\t\t\t\t\tthrow new RangeError('ArrayBufferView size is not a small enough positive integer.');\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.byteLength = this.length * this.BYTES_PER_ELEMENT;\n\t\t\t\t\tthis.buffer = new ArrayBuffer(this.byteLength);\n\t\t\t\t\tthis.byteOffset = 0;\n\t\t\t\t} else if (typeof arguments[0] === 'object' && arguments[0].constructor === ctor) {\n\t\t\t\t\t// Constructor(TypedArray array)\n\t\t\t\t\tarray = arguments[0];\n\n\t\t\t\t\tthis.length = array.length;\n\t\t\t\t\tthis.byteLength = this.length * this.BYTES_PER_ELEMENT;\n\t\t\t\t\tthis.buffer = new ArrayBuffer(this.byteLength);\n\t\t\t\t\tthis.byteOffset = 0;\n\n\t\t\t\t\tfor (i = 0; i < this.length; i += 1) {\n\t\t\t\t\t\tthis._setter(i, array._getter(i));\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof arguments[0] === 'object' && !(arguments[0] instanceof ArrayBuffer || ECMAScript.Class(arguments[0]) === 'ArrayBuffer')) {\n\t\t\t\t\t// Constructor(sequence<type> array)\n\t\t\t\t\tsequence = arguments[0];\n\n\t\t\t\t\tthis.length = ECMAScript.ToUint32(sequence.length);\n\t\t\t\t\tthis.byteLength = this.length * this.BYTES_PER_ELEMENT;\n\t\t\t\t\tthis.buffer = new ArrayBuffer(this.byteLength);\n\t\t\t\t\tthis.byteOffset = 0;\n\n\t\t\t\t\tfor (i = 0; i < this.length; i += 1) {\n\t\t\t\t\t\ts = sequence[i];\n\t\t\t\t\t\tthis._setter(i, Number(s));\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof arguments[0] === 'object' && (arguments[0] instanceof ArrayBuffer || ECMAScript.Class(arguments[0]) === 'ArrayBuffer')) {\n\t\t\t\t\t// Constructor(ArrayBuffer buffer,\n\t\t\t\t\t// optional unsigned long byteOffset, optional unsigned long length)\n\t\t\t\t\tthis.buffer = buffer;\n\n\t\t\t\t\tthis.byteOffset = ECMAScript.ToUint32(byteOffset);\n\t\t\t\t\tif (this.byteOffset > this.buffer.byteLength) {\n\t\t\t\t\t\tthrow new_INDEX_SIZE_ERR(); // byteOffset out of range\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.byteOffset % this.BYTES_PER_ELEMENT) {\n\t\t\t\t\t\t// The given byteOffset must be a multiple of the element\n\t\t\t\t\t\t// size of the specific type, otherwise an exception is raised.\n\t\t\t\t\t\t// throw new_INDEX_SIZE_ERR();\n\t\t\t\t\t\tthrow new RangeError(\"ArrayBuffer length minus the byteOffset is not a multiple of the element size.\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (arguments.length < 3) {\n\t\t\t\t\t\tthis.byteLength = this.buffer.byteLength - this.byteOffset;\n\n\t\t\t\t\t\tif (this.byteLength % this.BYTES_PER_ELEMENT) {\n\t\t\t\t\t\t\tthrow new_INDEX_SIZE_ERR(); // length of buffer minus byteOffset not a multiple of the element size\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.length = this.byteLength / this.BYTES_PER_ELEMENT;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.length = ECMAScript.ToUint32(length);\n\t\t\t\t\t\tthis.byteLength = this.length * this.BYTES_PER_ELEMENT;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((this.byteOffset + this.byteLength) > this.buffer.byteLength) {\n\t\t\t\t\t\tthrow new_INDEX_SIZE_ERR(); // byteOffset and length reference an area beyond the end of the buffer\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError(\"Unexpected argument type(s)\");\n\t\t\t\t}\n\n\t\t\t\tthis.constructor = ctor;\n\n\t\t\t\tconfigureProperties(this);\n\t\t\t\tmakeArrayAccessors(this);\n\t\t\t};\n\n\t\t\tctor.prototype = new ArrayBufferView();\n\t\t\tctor.prototype.BYTES_PER_ELEMENT = bytesPerElement;\n\t\t\tctor.prototype._pack = pack;\n\t\t\tctor.prototype._unpack = unpack;\n\t\t\tctor.BYTES_PER_ELEMENT = bytesPerElement;\n\n\t\t\t// getter type (unsigned long index);\n\t\t\tctor.prototype._getter = function(index) {\n\t\t\t\tif (arguments.length < 1) {\n\t\t\t\t\tthrow new SyntaxError(\"Not enough arguments\");\n\t\t\t\t}\n\n\t\t\t\tindex = ECMAScript.ToUint32(index);\n\t\t\t\tif (index >= this.length) {\n\t\t\t\t\t// throw new_INDEX_SIZE_ERR(); // Array index out of range\n\t\t\t\t\treturn (void 0); // undefined\n\t\t\t\t}\n\n\t\t\t\tvar bytes = [], i, o;\n\t\t\t\tfor (i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, o += 1) {\n\t\t\t\t\tbytes.push(this.buffer._bytes[o]);\n\t\t\t\t}\n\t\t\t\treturn this._unpack(bytes);\n\t\t\t};\n\n\t\t\t// NONSTANDARD: convenience alias for getter: type get(unsigned long index);\n\t\t\tctor.prototype.get = ctor.prototype._getter;\n\n\t\t\t// setter void (unsigned long index, type value);\n\t\t\tctor.prototype._setter = function(index, value) {\n\t\t\t\tif (arguments.length < 2) {\n\t\t\t\t\tthrow new SyntaxError(\"Not enough arguments\");\n\t\t\t\t}\n\n\t\t\t\tindex = ECMAScript.ToUint32(index);\n\t\t\t\tif (index >= this.length) {\n\t\t\t\t\t// throw new_INDEX_SIZE_ERR(); // Array index out of range\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar bytes = this._pack(value), i, o;\n\t\t\t\tfor (i = 0, o = this.byteOffset + index * this.BYTES_PER_ELEMENT; i < this.BYTES_PER_ELEMENT; i += 1, o += 1) {\n\t\t\t\t\tthis.buffer._bytes[o] = bytes[i];\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// void set(TypedArray array, optional unsigned long offset);\n\t\t\t// void set(sequence<type> array, optional unsigned long offset);\n\t\t\tctor.prototype.set = function(index, value) {\n\t\t\t\tif (arguments.length < 1) {\n\t\t\t\t\tthrow new SyntaxError(\"Not enough arguments\");\n\t\t\t\t}\n\t\t\t\tvar array, sequence, offset, len, i, s, d, byteOffset, byteLength, tmp;\n\n\t\t\t\tif (typeof arguments[0] === 'object' && arguments[0].constructor === this.constructor) {\n\t\t\t\t\t// void set(TypedArray array, optional unsigned long offset);\n\t\t\t\t\tarray = arguments[0];\n\t\t\t\t\toffset = ECMAScript.ToUint32(arguments[1]);\n\n\t\t\t\t\tif (offset + array.length > this.length) {\n\t\t\t\t\t\tthrow new_INDEX_SIZE_ERR(); // Offset plus length of array is out of range\n\t\t\t\t\t}\n\n\t\t\t\t\tbyteOffset = this.byteOffset + offset * this.BYTES_PER_ELEMENT;\n\t\t\t\t\tbyteLength = array.length * this.BYTES_PER_ELEMENT;\n\n\t\t\t\t\tif (array.buffer === this.buffer) {\n\t\t\t\t\t\ttmp = [];\n\t\t\t\t\t\tfor (i = 0, s = array.byteOffset; i < byteLength; i += 1, s += 1) {\n\t\t\t\t\t\t\ttmp[i] = array.buffer._bytes[s];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = 0, d = byteOffset; i < byteLength; i += 1, d += 1) {\n\t\t\t\t\t\t\tthis.buffer._bytes[d] = tmp[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0, s = array.byteOffset, d = byteOffset; i < byteLength; i += 1, s += 1, d += 1) {\n\t\t\t\t\t\t\tthis.buffer._bytes[d] = array.buffer._bytes[s];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof arguments[0] === 'object' && typeof arguments[0].length !== 'undefined') {\n\t\t\t\t\t// void set(sequence<type> array, optional unsigned long offset);\n\t\t\t\t\tsequence = arguments[0];\n\t\t\t\t\tlen = ECMAScript.ToUint32(sequence.length);\n\t\t\t\t\toffset = ECMAScript.ToUint32(arguments[1]);\n\n\t\t\t\t\tif (offset + len > this.length) {\n\t\t\t\t\t\tthrow new_INDEX_SIZE_ERR(); // Offset plus length of array is out of range\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (i = 0; i < len; i += 1) {\n\t\t\t\t\t\ts = sequence[i];\n\t\t\t\t\t\tthis._setter(offset + i, Number(s));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError(\"Unexpected argument type(s)\");\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// TypedArray subarray(long begin, optional long end);\n\t\t\tctor.prototype.subarray = function(start, end) {\n\t\t\t\tfunction clamp(v, min, max) {\n\t\t\t\t\treturn v < min ? min : v > max ? max : v;\n\t\t\t\t}\n\n\t\t\t\tstart = ECMAScript.ToInt32(start);\n\t\t\t\tend = ECMAScript.ToInt32(end);\n\n\t\t\t\tif (arguments.length < 1) {\n\t\t\t\t\tstart = 0;\n\t\t\t\t}\n\t\t\t\tif (arguments.length < 2) {\n\t\t\t\t\tend = this.length;\n\t\t\t\t}\n\n\t\t\t\tif (start < 0) {\n\t\t\t\t\tstart = this.length + start;\n\t\t\t\t}\n\t\t\t\tif (end < 0) {\n\t\t\t\t\tend = this.length + end;\n\t\t\t\t}\n\n\t\t\t\tstart = clamp(start, 0, this.length);\n\t\t\t\tend = clamp(end, 0, this.length);\n\n\t\t\t\tvar len = end - start;\n\t\t\t\tif (len < 0) {\n\t\t\t\t\tlen = 0;\n\t\t\t\t}\n\n\t\t\t\treturn new this.constructor(this.buffer, start * this.BYTES_PER_ELEMENT, len);\n\t\t\t};\n\n\t\t\treturn ctor;\n\t\t}\n\n\t\tvar Int8Array = makeTypedArrayConstructor(1, packInt8, unpackInt8);\n\t\tvar Uint8Array = makeTypedArrayConstructor(1, packUint8, unpackUint8);\n\t\tvar Int16Array = makeTypedArrayConstructor(2, packInt16, unpackInt16);\n\t\tvar Uint16Array = makeTypedArrayConstructor(2, packUint16, unpackUint16);\n\t\tvar Int32Array = makeTypedArrayConstructor(4, packInt32, unpackInt32);\n\t\tvar Uint32Array = makeTypedArrayConstructor(4, packUint32, unpackUint32);\n\t\tvar Float32Array = makeTypedArrayConstructor(4, packFloat32, unpackFloat32);\n\t\tvar Float64Array = makeTypedArrayConstructor(8, packFloat64, unpackFloat64);\n\n\t\tif (USE_NATIVE_IF_AVAILABLE) {\n\t\t\tglobal.ArrayBuffer = global.ArrayBuffer || ArrayBuffer;\n\t\t\tglobal.Int8Array = global.Int8Array || Int8Array;\n\t\t\tglobal.Uint8Array = global.Uint8Array || Uint8Array;\n\t\t\tglobal.Int16Array = global.Int16Array || Int16Array;\n\t\t\tglobal.Uint16Array = global.Uint16Array || Uint16Array;\n\t\t\tglobal.Int32Array = global.Int32Array || Int32Array;\n\t\t\tglobal.Uint32Array = global.Uint32Array || Uint32Array;\n\t\t\tglobal.Float32Array = global.Float32Array || Float32Array;\n\t\t\tglobal.Float64Array = global.Float64Array || Float64Array;\n\t\t} else {\n\t\t\tglobal.ArrayBuffer = ArrayBuffer;\n\t\t\tglobal.Int8Array = Int8Array;\n\t\t\tglobal.Uint8Array = Uint8Array;\n\t\t\tglobal.Int16Array = Int16Array;\n\t\t\tglobal.Uint16Array = Uint16Array;\n\t\t\tglobal.Int32Array = Int32Array;\n\t\t\tglobal.Uint32Array = Uint32Array;\n\t\t\tglobal.Float32Array = Float32Array;\n\t\t\tglobal.Float64Array = Float64Array;\n\t\t}\n\t}());\n\n\t//\n\t// 6 The DataView View Type\n\t//\n\t(function() {\n\t\tfunction r(array, index) {\n\t\t\treturn ECMAScript.IsCallable(array.get) ? array.get(index) : array[index];\n\t\t}\n\n\t\tvar IS_BIG_ENDIAN = (function() {\n\t\t\tvar u16array = new Uint16Array([ 0x1234 ]), u8array = new Uint8Array(u16array.buffer);\n\t\t\treturn r(u8array, 0) === 0x12;\n\t\t}());\n\n\t\t// Constructor(ArrayBuffer buffer,\n\t\t// optional unsigned long byteOffset,\n\t\t// optional unsigned long byteLength)\n\t\t/** @constructor */\n\t\tvar DataView = function DataView(buffer, byteOffset, byteLength) {\n\t\t\tif (arguments.length === 0) {\n\t\t\t\tbuffer = new ArrayBuffer(0);\n\t\t\t} else if (!(buffer instanceof ArrayBuffer || ECMAScript.Class(buffer) === 'ArrayBuffer')) {\n\t\t\t\tthrow new TypeError(\"TypeError\");\n\t\t\t}\n\n\t\t\tthis.buffer = buffer || new ArrayBuffer(0);\n\n\t\t\tthis.byteOffset = ECMAScript.ToUint32(byteOffset);\n\t\t\tif (this.byteOffset > this.buffer.byteLength) {\n\t\t\t\tthrow new_INDEX_SIZE_ERR(); // byteOffset out of range\n\t\t\t}\n\n\t\t\tif (arguments.length < 3) {\n\t\t\t\tthis.byteLength = this.buffer.byteLength - this.byteOffset;\n\t\t\t} else {\n\t\t\t\tthis.byteLength = ECMAScript.ToUint32(byteLength);\n\t\t\t}\n\n\t\t\tif ((this.byteOffset + this.byteLength) > this.buffer.byteLength) {\n\t\t\t\tthrow new_INDEX_SIZE_ERR(); // byteOffset and length reference an area beyond the end of the buffer\n\t\t\t}\n\n\t\t\tconfigureProperties(this);\n\t\t};\n\n\t\t// TODO: Reintroduce this to get correct hierarchy\n\t\t// if (typeof ArrayBufferView === 'function') {\n\t\t// DataView.prototype = new ArrayBufferView();\n\t\t// }\n\n\t\tfunction makeDataView_getter(arrayType) {\n\t\t\treturn function(byteOffset, littleEndian) {\n\n\t\t\t\tbyteOffset = ECMAScript.ToUint32(byteOffset);\n\n\t\t\t\tif (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) {\n\t\t\t\t\tthrow new_INDEX_SIZE_ERR(); // Array index out of range\n\t\t\t\t}\n\t\t\t\tbyteOffset += this.byteOffset;\n\n\t\t\t\tvar uint8Array = new Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT), bytes = [], i;\n\t\t\t\tfor (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) {\n\t\t\t\t\tbytes.push(r(uint8Array, i));\n\t\t\t\t}\n\n\t\t\t\tif (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) {\n\t\t\t\t\tbytes.reverse();\n\t\t\t\t}\n\n\t\t\t\treturn r(new arrayType(new Uint8Array(bytes).buffer), 0);\n\t\t\t};\n\t\t}\n\n\t\tDataView.prototype.getUint8 = makeDataView_getter(Uint8Array);\n\t\tDataView.prototype.getInt8 = makeDataView_getter(Int8Array);\n\t\tDataView.prototype.getUint16 = makeDataView_getter(Uint16Array);\n\t\tDataView.prototype.getInt16 = makeDataView_getter(Int16Array);\n\t\tDataView.prototype.getUint32 = makeDataView_getter(Uint32Array);\n\t\tDataView.prototype.getInt32 = makeDataView_getter(Int32Array);\n\t\tDataView.prototype.getFloat32 = makeDataView_getter(Float32Array);\n\t\tDataView.prototype.getFloat64 = makeDataView_getter(Float64Array);\n\n\t\tfunction makeDataView_setter(arrayType) {\n\t\t\treturn function(byteOffset, value, littleEndian) {\n\n\t\t\t\tbyteOffset = ECMAScript.ToUint32(byteOffset);\n\t\t\t\tif (byteOffset + arrayType.BYTES_PER_ELEMENT > this.byteLength) {\n\t\t\t\t\tthrow new_INDEX_SIZE_ERR(); // Array index out of range\n\t\t\t\t}\n\n\t\t\t\t// Get bytes\n\t\t\t\tvar typeArray = new arrayType([ value ]), byteArray = new Uint8Array(typeArray.buffer), bytes = [], i, byteView;\n\n\t\t\t\tfor (i = 0; i < arrayType.BYTES_PER_ELEMENT; i += 1) {\n\t\t\t\t\tbytes.push(r(byteArray, i));\n\t\t\t\t}\n\n\t\t\t\t// Flip if necessary\n\t\t\t\tif (Boolean(littleEndian) === Boolean(IS_BIG_ENDIAN)) {\n\t\t\t\t\tbytes.reverse();\n\t\t\t\t}\n\n\t\t\t\t// Write them\n\t\t\t\tbyteView = new Uint8Array(this.buffer, byteOffset, arrayType.BYTES_PER_ELEMENT);\n\t\t\t\tbyteView.set(bytes);\n\t\t\t};\n\t\t}\n\n\t\tDataView.prototype.setUint8 = makeDataView_setter(Uint8Array);\n\t\tDataView.prototype.setInt8 = makeDataView_setter(Int8Array);\n\t\tDataView.prototype.setUint16 = makeDataView_setter(Uint16Array);\n\t\tDataView.prototype.setInt16 = makeDataView_setter(Int16Array);\n\t\tDataView.prototype.setUint32 = makeDataView_setter(Uint32Array);\n\t\tDataView.prototype.setInt32 = makeDataView_setter(Int32Array);\n\t\tDataView.prototype.setFloat32 = makeDataView_setter(Float32Array);\n\t\tDataView.prototype.setFloat64 = makeDataView_setter(Float64Array);\n\n\t\tif (USE_NATIVE_IF_AVAILABLE) {\n\t\t\tglobal.DataView = global.DataView || DataView;\n\t\t} else {\n\t\t\tglobal.DataView = DataView;\n\t\t}\n\n\t}());\n\n}(this));\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/arraybuffer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/base64.js",
    "content": "/// Code can be found at: https://gist.github.com/1284012\n\n(function() {\n\n\tvar a64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', a256 = {\n\t\tindexOf : function(c) {\n\t\t\treturn c.charCodeAt(0);\n\t\t},\n\t\tcharAt : String.fromCharCode\n\t};\n\n\tfunction code(s, discard, alpha, beta, w1, w2) {\n\t\ts = String(s);\n\t\tvar b = 0, x = '', i, c, bs = 1, sb = 1, length = s.length, tmp;\n\t\tfor (i = 0; i < length || (!discard && sb > 1); i += 1) {\n\t\t\tb *= w1;\n\t\t\tbs *= w1;\n\t\t\tif (i < length) {\n\t\t\t\tc = alpha.indexOf(s.charAt(i));\n\t\t\t\tif (c <= -1 || c >= w1) {\n\t\t\t\t\tthrow new RangeError();\n\t\t\t\t}\n\t\t\t\tsb *= w1;\n\t\t\t\tb += c;\n\t\t\t}\n\t\t\twhile (bs >= w2) {\n\t\t\t\tbs /= w2;\n\t\t\t\tif (sb > 1) {\n\t\t\t\t\ttmp = b;\n\t\t\t\t\tb %= bs;\n\t\t\t\t\tx += beta.charAt((tmp - b) / bs);\n\t\t\t\t\tsb /= w2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn x;\n\t}\n\n\tif (!(\"btoa\" in window))\n\t\twindow.btoa = function(s) {\n\t\t\ts = code(s, false, a256, a64, 256, 64);\n\t\t\treturn s + '===='.slice((s.length % 4) || 4);\n\t\t};\n\n\tif (!(\"atob\" in window))\n\t\twindow.atob = function(s) {\n\t\t\tvar i;\n\t\t\ts = String(s).split('=');\n\t\t\tfor (i = s.length - 1; i >= 0; i -= 1) {\n\t\t\t\tif (s[i].length % 4 === 1) {\n\t\t\t\t\tthrow new RangeError();\n\t\t\t\t}\n\t\t\t\ts[i] = code(s[i], true, a64, a256, 64, 256);\n\t\t\t}\n\t\t\treturn s.join('');\n\t\t};\n\n})();\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/base64.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/config.js",
    "content": "// configure all test cases.\n\nzip.useWebWorkers = true;\n\n// to test third party deflate implementations, comment out 'zip.workerScriptsPath =...' and uncomment 'zip.workerScripts = ...'\nzip.workerScriptsPath = '../';\n\n/*\nzip.workerScripts = {\n\t// default zip.js implementation\n\tdeflater: ['../z-worker.js', '../deflate.js'],\n\tinflater: ['../z-worker.js', '../inflate.js'],\n\n\t// zlib-asm\n\t// deflater: ['../z-worker.js', '../zlib-asm/zlib.js', '../zlib-asm/codecs.js'],\n\t// inflater: ['../z-worker.js', '../zlib-asm/zlib.js', '../zlib-asm/codecs.js'],\n\n\t// pako\n\t// deflater: ['../z-worker.js', '../pako/pako.min.js', '../pako/codecs.js'],\n\t// inflater: ['../z-worker.js', '../pako/pako.min.js', '../pako/codecs.js'],\n};\n*/\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/dataview.js",
    "content": "\n/* \n * DataView.js:\n * An implementation of the DataView class on top of typed arrays.\n * Useful for Firefox 4 which implements TypedArrays but not DataView.\n *\n * Copyright 2011, David Flanagan\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, \n * are permitted provided that the following conditions are met:\n *\n *   Redistributions of source code must retain the above copyright notice, \n *   this list of conditions and the following disclaimer.\n *\n *   Redistributions in binary form must reproduce the above copyright notice, \n *   this list of conditions and the following disclaimer in the documentation.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE \n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE \n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE \n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) \n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT \n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT \n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\"use strict\";\n\n(function(global) {\n    // If DataView already exists, do nothing\n    if (global.DataView) return;\n\n    // If ArrayBuffer is not supported, fail with an error\n    if (!global.ArrayBuffer) fail(\"ArrayBuffer not supported\");\n\n    // If ES5 is not supported, fail\n    if (!Object.defineProperties) fail(\"This module requires ECMAScript 5\");\n\n    // Figure if the platform is natively little-endian.\n    // If the integer 0x00000001 is arranged in memory as 01 00 00 00 then\n    // we're on a little endian platform. On a big-endian platform we'd get\n    // get bytes 00 00 00 01 instead.\n    var nativele = new Int8Array(new Int32Array([1]).buffer)[0] === 1;\n\n    // A temporary array for copying or reversing bytes into.\n    // Since js is single-threaded, we only need this one static copy\n    var temp = new Uint8Array(8);\n\n    // The DataView() constructor\n    global.DataView = function DataView(buffer, offset, length) {\n        if (!(buffer instanceof ArrayBuffer)) fail(\"Bad ArrayBuffer\");\n\n        // Default values for omitted arguments\n        offset = offset || 0;\n        length = length || (buffer.byteLength - offset);\n\n        if (offset < 0 || length < 0 || offset + length > buffer.byteLength) fail(\"Illegal offset and/or length\");\n\n        // Define the 3 read-only, non-enumerable ArrayBufferView properties\n        Object.defineProperties(this, {\n            buffer: {\n                value: buffer,\n                enumerable: false,\n                writable: false,\n                configurable: false\n            },\n            byteOffset: {\n                value: offset,\n                enumerable: false,\n                writable: false,\n                configurable: false\n            },\n            byteLength: {\n                value: length,\n                enumerable: false,\n                writable: false,\n                configurable: false\n            },\n            _bytes: {\n                value: new Uint8Array(buffer, offset, length),\n                enumerable: false,\n                writable: false,\n                configurable: false\n            }\n        });\n    }\n\n    // The DataView prototype object\n    global.DataView.prototype = {\n        constructor: DataView,\n\n        getInt8: function getInt8(offset) {\n            return get(this, Int8Array, 1, offset);\n        },\n        getUint8: function getUint8(offset) {\n            return get(this, Uint8Array, 1, offset);\n        },\n        getInt16: function getInt16(offset, le) {\n            return get(this, Int16Array, 2, offset, le);\n        },\n        getUint16: function getUint16(offset, le) {\n            return get(this, Uint16Array, 2, offset, le);\n        },\n        getInt32: function getInt32(offset, le) {\n            return get(this, Int32Array, 4, offset, le);\n        },\n        getUint32: function getUint32(offset, le) {\n            return get(this, Uint32Array, 4, offset, le);\n        },\n        getFloat32: function getFloat32(offset, le) {\n            return get(this, Float32Array, 4, offset, le);\n        },\n        getFloat64: function getFloat32(offset, le) {\n            return get(this, Float64Array, 8, offset, le);\n        },\n\n\n        setInt8: function setInt8(offset, value) {\n            set(this, Int8Array, 1, offset, value);\n        },\n        setUint8: function setUint8(offset, value) {\n            set(this, Uint8Array, 1, offset, value);\n        },\n        setInt16: function setInt16(offset, value, le) {\n            set(this, Int16Array, 2, offset, value, le);\n        },\n        setUint16: function setUint16(offset, value, le) {\n            set(this, Uint16Array, 2, offset, value, le);\n        },\n        setInt32: function setInt32(offset, value, le) {\n            set(this, Int32Array, 4, offset, value, le);\n        },\n        setUint32: function setUint32(offset, value, le) {\n            set(this, Uint32Array, 4, offset, value, le);\n        },\n        setFloat32: function setFloat32(offset, value, le) {\n            set(this, Float32Array, 4, offset, value, le);\n        },\n        setFloat64: function setFloat64(offset, value, le) {\n            set(this, Float64Array, 8, offset, value, le);\n        }\n    };\n\n    // The get() utility function used by the get methods\n\n\n    function get(view, type, size, offset, le) {\n        if (offset === undefined) fail(\"Missing required offset argument\");\n\n        if (offset < 0 || offset + size > view.byteLength) fail(\"Invalid index: \" + offset);\n\n        if (size === 1 || !! le === nativele) {\n            // This is the easy case: the desired endianness \n            // matches the native endianness.\n            // Typed arrays require proper alignment.  DataView does not.\n            if ((view.byteOffset + offset) % size === 0) return (new type(view.buffer, view.byteOffset + offset, 1))[0];\n            else {\n                // Copy bytes into the temp array, to fix alignment\n                for (var i = 0; i < size; i++)\n                temp[i] = view._bytes[offset + i];\n                // Now wrap that buffer with an array of the desired type\n                return (new type(temp.buffer))[0];\n            }\n        } else {\n            // If the native endianness doesn't match the desired, then\n            // we have to reverse the bytes\n            for (var i = 0; i < size; i++)\n            temp[size - i - 1] = view._bytes[offset + i];\n            return (new type(temp.buffer))[0];\n        }\n    }\n\n    // The set() utility function used by the set methods\n\n\n    function set(view, type, size, offset, value, le) {\n        if (offset === undefined) fail(\"Missing required offset argument\");\n        if (value === undefined) fail(\"Missing required value argument\");\n\n        if (offset < 0 || offset + size > view.byteLength) fail(\"Invalid index: \" + offset);\n\n        if (size === 1 || !! le === nativele) {\n            // This is the easy case: the desired endianness \n            // matches the native endianness.\n            if ((view.byteOffset + offset) % size === 0) {\n                (new type(view.buffer, view.byteOffset + offset, 1))[0] = value;\n            } else {\n                (new type(temp.buffer))[0] = value;\n                // Now copy the bytes into the view's buffer\n                for (var i = 0; i < size; i++)\n                view._bytes[i + offset] = temp[i];\n            }\n        } else {\n            // If the native endianness doesn't match the desired, then\n            // we have to reverse the bytes\n            // Store the value into our temporary buffer\n            (new type(temp.buffer))[0] = value;\n\n            // Now copy the bytes, in reverse order, into the view's buffer\n            for (var i = 0; i < size; i++)\n            view._bytes[offset + i] = temp[size - 1 - i];\n        }\n    }\n\n    function fail(msg) {\n        throw new Error(msg);\n    }\n}(this)); ",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/dataview.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\nvar blob;\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipBlob(blob, callback) {\n\tzip.createWriter(new zip.BlobWriter(\"application/zip\"), function(zipWriter) {\n\t\tzipWriter.add(FILENAME, new zip.BlobReader(blob), function() {\n\t\t\tzipWriter.close(callback);\n\t\t});\n\t}, onerror);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzip.createReader(new zip.BlobReader(blob), function(zipReader) {\n\t\tzipReader.getEntries(function(entries) {\n\t\t\tentries[0].getData(new zip.BlobWriter(zip.getMimeType(entries[0].filename)), function(data) {\n\t\t\t\tzipReader.close();\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t});\n\t}, onerror);\n}\n\nfunction logBlobText(blob) {\n\tvar reader = new FileReader();\n\treader.onload = function(e) {\n\t\tconsole.log(e.target.result);\n\t\tconsole.log(\"--------------\");\n\t};\n\treader.readAsText(blob);\n}\n\nblob = new Blob([ TEXT_CONTENT ], {\n\ttype : zip.getMimeType(FILENAME)\n});\nlogBlobText(blob);\nzipBlob(blob, function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedBlob) {\n\t\tlogBlobText(unzippedBlob);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 385,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "zipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js~zipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "logBlobText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js~logBlobText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test1.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "content": "var URL = \"lorem_store.zip\";\n\nvar zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipImportedZip(callback) {\n\tvar directory = zipFs.root.addDirectory(\"import\");\n\tdirectory.importHttpContent(URL, false, function() {\n\t\tzipFs.exportBlob(callback);\n\t}, onerror);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzipFs.importBlob(blob, function() {\n\t\tvar directory = zipFs.root.getChildByName(\"import\");\n\t\tvar firstEntry = directory.children[0];\n\t\tfirstEntry.getText(callback);\n\t}, onerror);\n}\n\nfunction logText(text) {\n\tconsole.log(text);\n\tconsole.log(\"--------------\");\n}\n\nzipImportedZip(function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedText) {\n\t\tlogText(unzippedText);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 392,
    "kind": "variable",
    "name": "URL",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js~URL",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 393,
    "kind": "variable",
    "name": "zipFs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js~zipFs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "zipImportedZip",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js~zipImportedZip",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "logText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js~logText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test10.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 398,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "content": "var requestFileSystem = window.webkitRequestFileSystem || window.mozRequestFileSystem || window.msRequestFileSystem || window.requestFileSystem;\nvar URL = \"lorem.zip\", FILENAME = \"lorem.txt\";\nvar filesystem, zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction removeRecursively(entry, onend, onerror) {\n\tvar rootReader = entry.createReader();\n\trootReader.readEntries(function(entries) {\n\t\tvar i = 0;\n\n\t\tfunction next() {\n\t\t\ti++;\n\t\t\tremoveNextEntry();\n\t\t}\n\n\t\tfunction removeNextEntry() {\n\t\t\tvar entry = entries[i];\n\t\t\tif (entry) {\n\t\t\t\tif (entry.isDirectory)\n\t\t\t\t\tremoveRecursively(entry, next, onerror);\n\t\t\t\tif (entry.isFile)\n\t\t\t\t\tentry.remove(next, onerror);\n\t\t\t} else\n\t\t\t\tonend();\n\t\t}\n\n\t\tremoveNextEntry();\n\t}, onerror);\n}\n\nfunction importZipToFilesystem(callback) {\n\tzipFs.importHttpContent(URL, false, function() {\n\t\tfilesystem.root.getFile(FILENAME, {\n\t\t\tcreate : true\n\t\t}, function(fileEntry) {\n\t\t\tvar zippedFile = zipFs.root.getChildByName(FILENAME);\n\t\t\tzippedFile.getFileEntry(fileEntry, callback, null, onerror);\n\t\t}, onerror);\n\t}, onerror);\n}\n\nfunction logFile(file) {\n\tvar reader = new FileReader();\n\treader.onload = function(event) {\n\t\tconsole.log(event.target.result);\n\t\tconsole.log(\"--------------\");\n\t};\n\treader.onerror = onerror;\n\treader.readAsText(file);\n}\n\nfunction test() {\n\timportZipToFilesystem(function() {\n\t\tfilesystem.root.getFile(FILENAME, null, function(fileEntry) {\n\t\t\tfileEntry.file(logFile, onerror);\n\t\t}, onerror);\n\t}, onerror);\n}\n\nrequestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, function(fs) {\n\tfilesystem = fs;\n\tremoveRecursively(filesystem.root, test, onerror);\n}, onerror);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "variable",
    "name": "requestFileSystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js~requestFileSystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "variable",
    "name": "URL",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js~URL",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 402,
    "kind": "function",
    "name": "removeRecursively",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js~removeRecursively",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "onend",
        "types": [
          "*"
        ]
      },
      {
        "name": "onerror",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "importZipToFilesystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js~importZipToFilesystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "function",
    "name": "logFile",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js~logFile",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "file",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "test",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js~test",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test11.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 406,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "content": "var requestFileSystem = window.webkitRequestFileSystem || window.mozRequestFileSystem || window.msRequestFileSystem || window.requestFileSystem;\nvar URL = \"lorem2.zip\";\nvar filesystem, zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction removeRecursively(entry, onend, onerror) {\n\tvar rootReader = entry.createReader();\n\trootReader.readEntries(function(entries) {\n\t\tvar i = 0;\n\n\t\tfunction next() {\n\t\t\ti++;\n\t\t\tremoveNextEntry();\n\t\t}\n\n\t\tfunction removeNextEntry() {\n\t\t\tvar entry = entries[i];\n\t\t\tif (entry) {\n\t\t\t\tif (entry.isDirectory)\n\t\t\t\t\tremoveRecursively(entry, next, onerror);\n\t\t\t\tif (entry.isFile)\n\t\t\t\t\tentry.remove(next, onerror);\n\t\t\t} else\n\t\t\t\tonend();\n\t\t}\n\n\t\tremoveNextEntry();\n\t}, onerror);\n}\n\nfunction importZipToFilesystem(callback) {\n\tzipFs.importHttpContent(URL, false, function() {\n\t\tzipFs.root.getFileEntry(filesystem.root, callback, null, onerror);\n\t}, onerror);\n}\n\nfunction logFile(file) {\n\tvar reader = new FileReader();\n\treader.onload = function(event) {\n\t\tconsole.log(event.target.result);\n\t\tconsole.log(\"--------------\");\n\t};\n\treader.onerror = onerror;\n\treader.readAsText(file);\n}\n\nfunction test() {\n\timportZipToFilesystem(function() {\n\t\tfilesystem.root.getDirectory(\"aaa\", null, function(directoryEntry) {\n\t\t\tdirectoryEntry.getDirectory(\"ccc\", null, function(directoryEntry) {\n\t\t\t\tdirectoryEntry.getFile(\"lorem.txt\", null, function(fileEntry) {\n\t\t\t\t\tfileEntry.file(logFile, onerror);\n\t\t\t\t}, onerror);\n\t\t\t}, onerror);\n\t\t}, onerror);\n\t}, onerror);\n}\n\nrequestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, function(fs) {\n\tfilesystem = fs;\n\tremoveRecursively(filesystem.root, test, test);\n}, onerror);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 407,
    "kind": "variable",
    "name": "requestFileSystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js~requestFileSystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 408,
    "kind": "variable",
    "name": "URL",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js~URL",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 409,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 410,
    "kind": "function",
    "name": "removeRecursively",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js~removeRecursively",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "onend",
        "types": [
          "*"
        ]
      },
      {
        "name": "onerror",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 411,
    "kind": "function",
    "name": "importZipToFilesystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js~importZipToFilesystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 412,
    "kind": "function",
    "name": "logFile",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js~logFile",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "file",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 413,
    "kind": "function",
    "name": "test",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js~test",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test12.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 414,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar requestFileSystem = window.webkitRequestFileSystem || window.mozRequestFileSystem || window.msRequestFileSystem || window.requestFileSystem;\nvar filesystem, zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction removeRecursively(entry, onend, onerror) {\n\tvar rootReader = entry.createReader();\n\trootReader.readEntries(function(entries) {\n\t\tvar i = 0;\n\n\t\tfunction next() {\n\t\t\ti++;\n\t\t\tremoveNextEntry();\n\t\t}\n\n\t\tfunction removeNextEntry() {\n\t\t\tvar entry = entries[i];\n\t\t\tif (entry) {\n\t\t\t\tif (entry.isDirectory)\n\t\t\t\t\tremoveRecursively(entry, next, onerror);\n\t\t\t\tif (entry.isFile)\n\t\t\t\t\tentry.remove(next, onerror);\n\t\t\t} else\n\t\t\t\tonend();\n\t\t}\n\n\t\tremoveNextEntry();\n\t}, onerror);\n}\n\nfunction addFileEntryAndReadFile(fileEntry, callback) {\n\tzipFs.root.addFileEntry(fileEntry, function() {\n\t\tvar zipEntry = zipFs.root.getChildByName(\"lorem.txt\");\n\t\tzipEntry.getText(callback);\n\t}, onerror);\n}\n\nfunction logText(text) {\n\tconsole.log(text);\n\tconsole.log(\"--------------\");\n}\n\nfunction initFileSystem(callback) {\n\tfilesystem.root.getFile(\"lorem.txt\", {\n\t\tcreate : true\n\t}, function(fileEntry) {\n\t\tfileEntry.createWriter(function(writer) {\n\t\t\twriter.onwrite = function() {\n\t\t\t\tcallback(fileEntry);\n\t\t\t};\n\t\t\twriter.onerror = onerror;\n\t\t\twriter.write(new Blob([ TEXT_CONTENT ], {\n\t\t\t\ttype : \"text/plain\"\n\t\t\t}));\n\t\t}, onerror);\n\t}, onerror);\n}\n\nfunction test() {\n\tinitFileSystem(function(fileEntry) {\n\t\taddFileEntryAndReadFile(fileEntry, function(text) {\n\t\t\tlogText(text);\n\t\t}, onerror);\n\t});\n}\n\nrequestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, function(fs) {\n\tfilesystem = fs;\n\tremoveRecursively(filesystem.root, test, onerror);\n}, onerror);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 415,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 416,
    "kind": "variable",
    "name": "requestFileSystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~requestFileSystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 417,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 418,
    "kind": "function",
    "name": "removeRecursively",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~removeRecursively",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "onend",
        "types": [
          "*"
        ]
      },
      {
        "name": "onerror",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 419,
    "kind": "function",
    "name": "addFileEntryAndReadFile",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~addFileEntryAndReadFile",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "fileEntry",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 420,
    "kind": "function",
    "name": "logText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~logText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 421,
    "kind": "function",
    "name": "initFileSystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~initFileSystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 422,
    "kind": "function",
    "name": "test",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js~test",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test13.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 423,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar requestFileSystem = window.webkitRequestFileSystem || window.mozRequestFileSystem || window.msRequestFileSystem || window.requestFileSystem;\nvar filesystem, zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction removeRecursively(entry, onend, onerror) {\n\tvar rootReader = entry.createReader();\n\trootReader.readEntries(function(entries) {\n\t\tvar i = 0;\n\n\t\tfunction next() {\n\t\t\ti++;\n\t\t\tremoveNextEntry();\n\t\t}\n\n\t\tfunction removeNextEntry() {\n\t\t\tvar entry = entries[i];\n\t\t\tif (entry) {\n\t\t\t\tif (entry.isDirectory)\n\t\t\t\t\tremoveRecursively(entry, next, onerror);\n\t\t\t\tif (entry.isFile)\n\t\t\t\t\tentry.remove(next, onerror);\n\t\t\t} else\n\t\t\t\tonend();\n\t\t}\n\n\t\tremoveNextEntry();\n\t}, onerror);\n}\n\nfunction addDirectoryAndReadFile(callback) {\n\tzipFs.root.addFileEntry(filesystem.root, function() {\n\t\tvar zipEntry = zipFs.root.getChildByName(\"aaa\").getChildByName(\"ccc\").getChildByName(\"lorem.txt\");\n\t\tzipEntry.getText(callback);\n\t}, onerror);\n}\n\nfunction logText(text) {\n\tconsole.log(text);\n\tconsole.log(\"--------------\");\n}\n\nfunction initFileSystem(callback) {\n\tfilesystem.root.getDirectory(\"aaa\", {\n\t\tcreate : true\n\t}, function(directoryEntry) {\n\t\tdirectoryEntry.getDirectory(\"ccc\", {\n\t\t\tcreate : true\n\t\t}, function(directoryEntry) {\n\t\t\tdirectoryEntry.getFile(\"lorem.txt\", {\n\t\t\t\tcreate : true\n\t\t\t}, function(fileEntry) {\n\t\t\t\tfileEntry.createWriter(function(writer) {\n\t\t\t\t\twriter.onwrite = callback;\n\t\t\t\t\twriter.onerror = onerror;\n\t\t\t\t\twriter.write(new Blob([ TEXT_CONTENT ], {\n\t\t\t\t\t\ttype : \"text/plain\"\n\t\t\t\t\t}));\n\t\t\t\t}, onerror);\n\t\t\t}, onerror);\n\t\t}, onerror);\n\t}, onerror);\n}\n\nfunction test() {\n\tinitFileSystem(function() {\n\t\taddDirectoryAndReadFile(function(text) {\n\t\t\tlogText(text);\n\t\t}, onerror);\n\t});\n}\n\nrequestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, function(fs) {\n\tfilesystem = fs;\n\tremoveRecursively(filesystem.root, test, onerror);\n}, onerror);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 424,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 425,
    "kind": "variable",
    "name": "requestFileSystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~requestFileSystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 426,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 427,
    "kind": "function",
    "name": "removeRecursively",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~removeRecursively",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "onend",
        "types": [
          "*"
        ]
      },
      {
        "name": "onerror",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 428,
    "kind": "function",
    "name": "addDirectoryAndReadFile",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~addDirectoryAndReadFile",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 429,
    "kind": "function",
    "name": "logText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~logText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 430,
    "kind": "function",
    "name": "initFileSystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~initFileSystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 431,
    "kind": "function",
    "name": "test",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js~test",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test14.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 432,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "content": "\"use strict\";\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipBlobs(blobs, callback) {\n\tzip.createWriter(new zip.BlobWriter(\"application/zip\"), function(zipWriter) {\n\t\tvar index = 0;\n\n\t\tfunction next() {\n\t\t\tif (index < blobs.length)\n\t\t\t\tzipWriter.add(blobs[index].name, new zip.BlobReader(blobs[index].blob), function() {\n\t\t\t\t\tindex++;\n\t\t\t\t\tnext();\n\t\t\t\t});\n\t\t\telse\n\t\t\t\tzipWriter.close(callback);\n\t\t}\n\n\t\tnext();\n\t}, onerror);\n}\n\nfunction unzipBlob(blob) {\n\tzip.createReader(new zip.BlobReader(blob), function(zipReader) {\n\t\tzipReader.getEntries(function(entries) {\n\t\t\tentries.forEach(readEntry);\n\t\t});\n\t}, onerror);\n\n\tfunction readEntry(ent, i) {\n\t\tvar lastLogPos = 0;\n\t\tent.getData(new zip.BlobWriter(), function onload(blob) {\n\t\t\tconsole.log('finished:' + ent.filename + ', size:' + blob.size);\n\t\t\tcompareResult(blob, i);\n\t\t}, function onprogress(loaded, size) {\n\t\t\tif (loaded - lastLogPos > 100 * 1024) { // limit progress log\n\t\t\t\tconsole.log('onprogress:' + ent.filename + ', loaded:' + loaded + ', size:' + size);\n\t\t\t\tlastLogPos = loaded;\n\t\t\t}\n\t\t},\n\t\ttrue); //check crc32\n\t}\n}\n\nfunction compareResult(result, index) {\n\tvar fr1 = new FileReader(), fr2 = new FileReader(), loadCount = 0;\n\tfr1.readAsArrayBuffer(blobs[index].blob);\n\tfr2.readAsArrayBuffer(result);\n\tfr1.onload = fr2.onload = function onload() {\n\t\tif (++loadCount === 2) {\n\t\t\tvar a1 = new Float64Array(fr1.result), a2 = new Float64Array(fr2.result);\n\t\t\tif (a1.length !== a2.length)\n\t\t\t\treturn fail();\n\t\t\tfor (var i = 0, n = a1.length; i < n; i++) {\n\t\t\t\tif (a1[i] !== a2[i])\n\t\t\t\t\treturn fail();\n\t\t\t}\n\t\t\tconsole.log('compareResult OK at: ' + blobs[index].name);\n\t\t}\n\t};\n\tfunction fail() {\n\t\tconsole.error('Error: compareBlobs failed at: ' + blobs[index].name);\n\t}\n}\n\nfunction getBlob(size) {\n\tvar data = new Float64Array(Math.floor(size / 8));\n\tvar rand = Math.random;\n\tfor(var i = 0, n = data.length; i < n; i++)\n\t\tdata[i] = rand();\n\treturn new Blob([data]);\n}\n\nvar MB = 1024 * 1024;\nvar blobs = [ {\n\tname : \"b1\",\n\tblob : getBlob(3.5 * MB)\n}, {\n\tname : \"b2\",\n\tblob : getBlob(5.2 * MB)\n} , {\n\tname : \"b3\",\n\tblob : getBlob(4.7 * MB)\n} , {\n\tname : \"b4\",\n\tblob : getBlob(2.8 * MB)\n} ];\n\nzipBlobs(blobs, function(zippedBlob) {\n\tunzipBlob(zippedBlob);\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 433,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 434,
    "kind": "function",
    "name": "zipBlobs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js~zipBlobs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "blobs",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 435,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 436,
    "kind": "function",
    "name": "compareResult",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js~compareResult",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 437,
    "kind": "function",
    "name": "getBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js~getBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 438,
    "kind": "variable",
    "name": "MB",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js~MB",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 439,
    "kind": "variable",
    "name": "blobs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js~blobs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test15.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 440,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\nvar blob;\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipBlob(blob, callback) {\n\tzip.createWriter(new zip.BlobWriter(\"application/zip\"), function(zipWriter) {\n\t\tzipWriter.add(FILENAME, new zip.BlobReader(blob), function() {\n\t\t\tzipWriter.close(callback);\n\t\t});\n\t}, onerror);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzip.createReader(new zip.BlobReader(blob), function(zipReader) {\n\t\tzipReader.getEntries(function(entries) {\n\t\t\tentries[0].getData(new zip.BlobWriter(\"text/plain\"), function(data) {\n\t\t\t\tzipReader.close();\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t});\n\t}, onerror);\n}\n\nfunction logBlobText(blob) {\n\tvar reader = new FileReader();\n\treader.onload = function(e) {\n\t\tconsole.log(e.target.result);\n\t\tconsole.log(\"--------------\");\n\t};\n\treader.readAsText(blob);\n}\n\nzip.useWebWorkers = false;\nblob = new Blob([ TEXT_CONTENT ], {\n\ttype : \"text/plain\"\n});\nlogBlobText(blob);\nzipBlob(blob, function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedBlob) {\n\t\tlogBlobText(unzippedBlob);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 441,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 442,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 443,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 444,
    "kind": "function",
    "name": "zipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js~zipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 446,
    "kind": "function",
    "name": "logBlobText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js~logBlobText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test16.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 447,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\n\nvar dataURI = \"data:text/plain;base64,\" + btoa(TEXT_CONTENT);\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipDataURI(dataURI, callback) {\n\tzip.createWriter(new zip.Data64URIWriter(\"application/zip\"), function(zipWriter) {\n\t\tzipWriter.add(FILENAME, new zip.Data64URIReader(dataURI), function() {\n\t\t\tzipWriter.close(callback);\n\t\t});\n\t}, onerror);\n}\n\nfunction unzipDataURI(dataURI, callback) {\n\tzip.createReader(new zip.Data64URIReader(dataURI), function(zipReader) {\n\t\tzipReader.getEntries(function(entries) {\n\t\t\tentries[0].getData(new zip.Data64URIWriter(\"text/plain\"), function(data) {\n\t\t\t\tzipReader.close();\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t});\n\t}, onerror);\n}\n\nfunction logDataURI(dataURI) {\n\tconsole.log(dataURI);\n\tconsole.log(\"--------------\");\n}\n\nlogDataURI(dataURI);\nzipDataURI(dataURI, function(zippedData64) {\n\tlogDataURI(zippedData64);\n\tunzipDataURI(zippedData64, function(unzippedDataURI) {\n\t\tlogDataURI(unzippedDataURI);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 448,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 449,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 450,
    "kind": "variable",
    "name": "dataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js~dataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 451,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 452,
    "kind": "function",
    "name": "zipDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js~zipDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 453,
    "kind": "function",
    "name": "unzipDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js~unzipDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 454,
    "kind": "function",
    "name": "logDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js~logDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test17.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 455,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\nvar arrayBuffer;\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipArrayBuffer(arrayBuffer, callback) {\n\tzip.createWriter(new zip.ArrayBufferWriter(), function(zipWriter) {\n\t\tzipWriter.add(FILENAME, new zip.ArrayBufferReader(arrayBuffer), function() {\n\t\t\tzipWriter.close(callback);\n\t\t});\n\t}, onerror);\n}\n\nfunction unzipArrayBuffer(arrayBuffer, callback) {\n\tzip.createReader(new zip.ArrayBufferReader(arrayBuffer), function(zipReader) {\n\t\tzipReader.getEntries(function(entries) {\n\t\t\tentries[0].getData(new zip.ArrayBufferWriter(), function(data) {\n\t\t\t\tzipReader.close();\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t});\n\t}, onerror);\n}\n\nfunction logArrayBufferText(arrayBuffer) {\n\tvar array = new Uint8Array(arrayBuffer);\n\tvar str = \"\";\n\tArray.prototype.forEach.call(array, function(code) {\n\t\tstr += String.fromCharCode(code);\n\t});\n\tconsole.log(str);\n}\n\narrayBuffer = new Uint8Array(Array.prototype.map.call(TEXT_CONTENT, function(c) {\n\treturn c.charCodeAt(0);\n})).buffer;\nlogArrayBufferText(arrayBuffer);\nzipArrayBuffer(arrayBuffer, function(zippedArrayBuffer) {\n\tunzipArrayBuffer(zippedArrayBuffer, function(unzippedArrayBuffer) {\n\t\tlogArrayBufferText(unzippedArrayBuffer);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 456,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 457,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 458,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 459,
    "kind": "function",
    "name": "zipArrayBuffer",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js~zipArrayBuffer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "arrayBuffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 460,
    "kind": "function",
    "name": "unzipArrayBuffer",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js~unzipArrayBuffer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "arrayBuffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 461,
    "kind": "function",
    "name": "logArrayBufferText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js~logArrayBufferText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test18.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "arrayBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 462,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\n\nvar blob, requestFileSystem = this.webkitRequestFileSystem || this.mozRequestFileSystem || this.requestFileSystem;\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipBlob(blob, callback) {\n\tcreateTempFile(function(fileEntry) {\n\t\tzip.createWriter(new zip.FileWriter(fileEntry, \"application/zip\"), function(zipWriter) {\n\t\t\tzipWriter.add(FILENAME, new zip.BlobReader(blob), function() {\n\t\t\t\tzipWriter.close(callback);\n\t\t\t});\n\t\t}, onerror);\n\t});\n}\n\nfunction unzipBlob(blob, callback) {\n\tzip.createReader(new zip.BlobReader(blob), function(zipReader) {\n\t\tzipReader.getEntries(function(entries) {\n\t\t\tentries[0].getData(new zip.BlobWriter(\"text/plain\"), function(data) {\n\t\t\t\tzipReader.close();\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t});\n\t}, onerror);\n}\n\nfunction logBlobText(blob) {\n\tvar reader = new FileReader();\n\treader.onload = function(e) {\n\t\tconsole.log(e.target.result);\n\t\tconsole.log(\"--------------\");\n\t};\n\treader.readAsText(blob);\n}\n\nblob = new Blob([TEXT_CONTENT], {\n\ttype: \"text/plain\"\n});\nlogBlobText(blob);\nzipBlob(blob, function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedBlob) {\n\t\tlogBlobText(unzippedBlob);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 464,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 466,
    "kind": "function",
    "name": "zipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js~zipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 468,
    "kind": "function",
    "name": "logBlobText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js~logBlobText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 469,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "content": "var requestFileSystem = window.webkitRequestFileSystem || window.mozRequestFileSystem || window.msRequestFileSystem || window.requestFileSystem;\r\nvar filesystem, zipFs = new zip.fs.FS();\r\nvar THRESHOLD = 150;\r\n\r\nfunction onerror(message) {\r\n\tconsole.error(message);\r\n}\r\n\r\nfunction generateFs(entry, onend, onerror) {\r\n\tvar i = 0;\r\n\r\n\tfunction next() {\r\n\t\ti++;\r\n\t\tgenerateNextEntry();\r\n\t}\r\n\r\n\tfunction generateNextEntry() {\r\n\t\tif (i <= THRESHOLD)\r\n\t\t\tentry.getFile(i, {\r\n\t\t\t\tcreate: true\r\n\t\t\t}, next, onerror);\r\n\t\telse\r\n\t\t\tonend();\r\n\t}\r\n\r\n\tnext();\r\n}\r\n\r\nfunction checkZipFileSystemSize() {\r\n\tzipFs.root.addFileEntry(filesystem.root, function() {\r\n\t\tconsole.log(zipFs.root.children.length === THRESHOLD);\r\n\t}, onerror);\r\n}\r\n\r\nrequestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, function(fs) {\r\n\tfilesystem = fs;\r\n\tgenerateFs(filesystem.root, checkZipFileSystemSize, onerror);\r\n}, onerror);\r\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 470,
    "kind": "variable",
    "name": "requestFileSystem",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js~requestFileSystem",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 471,
    "kind": "variable",
    "name": "THRESHOLD",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js~THRESHOLD",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 472,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 473,
    "kind": "function",
    "name": "generateFs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js~generateFs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "onend",
        "types": [
          "*"
        ]
      },
      {
        "name": "onerror",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 474,
    "kind": "function",
    "name": "checkZipFileSystemSize",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js~checkZipFileSystemSize",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test20.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 475,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\n\nvar blob, zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipBlob(blob, callback) {\n\tzipFs.root.addBlob(FILENAME, blob);\n\tzipFs.exportBlob(callback);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzipFs.importBlob(blob, function() {\n\t\tvar firstEntry = zipFs.root.children[0];\n\t\tfirstEntry.getBlob(zip.getMimeType(firstEntry.name), callback);\n\t}, onerror);\n}\n\nfunction logBlobText(blob) {\n\tvar reader = new FileReader();\n\treader.onload = function(e) {\n\t\tconsole.log(e.target.result);\n\t\tconsole.log(\"--------------\");\n\t};\n\treader.readAsText(blob);\n}\n\nblob = new Blob([TEXT_CONTENT], {\n\ttype : zip.getMimeType(FILENAME)\n});\nlogBlobText(blob);\nzipBlob(blob, function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedBlob) {\n\t\tlogBlobText(unzippedBlob);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 477,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 478,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 479,
    "kind": "function",
    "name": "zipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js~zipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 480,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 481,
    "kind": "function",
    "name": "logBlobText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js~logBlobText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test3.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 482,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\n\nvar dataURI = \"data:text/plain;base64,\" + btoa(TEXT_CONTENT);\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipDataURI(dataURI, callback) {\n\tzip.createWriter(new zip.BlobWriter(\"application/zip\"), function(zipWriter) {\n\t\tzipWriter.add(FILENAME, new zip.Data64URIReader(dataURI), function() {\n\t\t\tzipWriter.close(callback);\n\t\t});\n\t}, onerror);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzip.createReader(new zip.BlobReader(blob), function(zipReader) {\n\t\tzipReader.getEntries(function(entries) {\n\t\t\tentries[0].getData(new zip.Data64URIWriter(\"text/plain\"), function(data) {\n\t\t\t\tzipReader.close();\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t});\n\t}, onerror);\n}\n\nfunction logDataURI(dataURI) {\n\tconsole.log(dataURI);\n\tconsole.log(\"--------------\");\n}\n\nlogDataURI(dataURI);\nzipDataURI(dataURI, function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedDataURI) {\n\t\tlogDataURI(unzippedDataURI);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 483,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 484,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 485,
    "kind": "variable",
    "name": "dataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js~dataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 486,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 487,
    "kind": "function",
    "name": "zipDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js~zipDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 488,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 489,
    "kind": "function",
    "name": "logDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js~logDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test4.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 490,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\n\nvar dataURI = \"data:text/plain;base64,\" + btoa(TEXT_CONTENT), zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipDataURI(dataURI, callback) {\n\tzipFs.root.addData64URI(FILENAME, dataURI);\n\tzipFs.exportData64URI(callback);\n}\n\nfunction unzipDataURI(dataURI, callback) {\n\tzipFs.importData64URI(dataURI, function() {\n\t\tvar firstEntry = zipFs.root.children[0];\n\t\tfirstEntry.getData64URI(\"text/plain\", callback, null, true);\n\t}, onerror);\n}\n\nfunction logDataURI(dataURI) {\n\tconsole.log(dataURI);\n\tconsole.log(\"--------------\");\n}\n\nlogDataURI(dataURI);\nzipDataURI(dataURI, function(zippedDataURI) {\n\tunzipDataURI(zippedDataURI, function(unzippedDataURI) {\n\t\tlogDataURI(unzippedDataURI);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 491,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 492,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 493,
    "kind": "variable",
    "name": "dataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js~dataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 494,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 495,
    "kind": "function",
    "name": "zipDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js~zipDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 496,
    "kind": "function",
    "name": "unzipDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js~unzipDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 497,
    "kind": "function",
    "name": "logDataURI",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js~logDataURI",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test5.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "dataURI",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 498,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "content": "var TEXT_CONTENT = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\";\nvar FILENAME = \"lorem.txt\";\n\nvar zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipText(text, callback) {\n\tzipFs.root.addText(FILENAME, text);\n\tzipFs.exportBlob(callback);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzipFs.importBlob(blob, function() {\n\t\tvar firstEntry = zipFs.root.children[0];\n\t\tfirstEntry.getText(callback);\n\t}, onerror);\n}\n\nfunction logText(text) {\n\tconsole.log(text);\n\tconsole.log(\"--------------\");\n}\n\nlogText(TEXT_CONTENT);\nzipText(TEXT_CONTENT, function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedText) {\n\t\tlogText(unzippedText);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 499,
    "kind": "variable",
    "name": "TEXT_CONTENT",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js~TEXT_CONTENT",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 500,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 501,
    "kind": "variable",
    "name": "zipFs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js~zipFs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 502,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 503,
    "kind": "function",
    "name": "zipText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js~zipText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 504,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 505,
    "kind": "function",
    "name": "logText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js~logText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test6.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 506,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "content": "var zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction logText(text) {\n\tconsole.log(text);\n\tconsole.log(\"--------------\");\n}\n\nzipFs.importHttpContent(\"lorem.zip\", false, function() {\n\tvar firstEntry = zipFs.root.children[0];\n\tfirstEntry.getText(function(data) {\n\t\tlogText(data);\n\t});\n}, onerror);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 507,
    "kind": "variable",
    "name": "zipFs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js~zipFs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 509,
    "kind": "function",
    "name": "logText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js~logText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test7.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 510,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "content": "var FILENAME = \"lorem.txt\", URL = \"lorem.txt\";\n\nvar zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipText(callback) {\n\tzipFs.root.addHttpContent(FILENAME, URL);\n\tzipFs.exportBlob(callback);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzipFs.importBlob(blob, function() {\n\t\tvar firstEntry = zipFs.root.children[0];\n\t\tfirstEntry.getText(callback);\n\t}, onerror);\n}\n\nfunction logText(text) {\n\tconsole.log(text);\n\tconsole.log(\"--------------\");\n}\n\nzipText(function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedText) {\n\t\tlogText(unzippedText);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 511,
    "kind": "variable",
    "name": "FILENAME",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js~FILENAME",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "variable",
    "name": "zipFs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js~zipFs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 513,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 514,
    "kind": "function",
    "name": "zipText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js~zipText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 515,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 516,
    "kind": "function",
    "name": "logText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js~logText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test8.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 517,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "content": "var URL = \"lorem.zip\";\n\nvar zipFs = new zip.fs.FS();\n\nfunction onerror(message) {\n\tconsole.error(message);\n}\n\nfunction zipImportedZip(callback) {\n\tvar directory = zipFs.root.addDirectory(\"import\");\n\tdirectory.importHttpContent(URL, false, function() {\n\t\tzipFs.exportBlob(callback);\n\t}, onerror);\n}\n\nfunction unzipBlob(blob, callback) {\n\tzipFs.importBlob(blob, function() {\n\t\tvar directory = zipFs.root.getChildByName(\"import\");\n\t\tvar firstEntry = directory.children[0];\n\t\tfirstEntry.getText(callback);\n\t}, onerror);\n}\n\nfunction logText(text) {\n\tconsole.log(text);\n\tconsole.log(\"--------------\");\n}\n\nzipImportedZip(function(zippedBlob) {\n\tunzipBlob(zippedBlob, function(unzippedText) {\n\t\tlogText(unzippedText);\n\t});\n});\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 518,
    "kind": "variable",
    "name": "URL",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js~URL",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 519,
    "kind": "variable",
    "name": "zipFs",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js~zipFs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 520,
    "kind": "function",
    "name": "onerror",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js~onerror",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 521,
    "kind": "function",
    "name": "zipImportedZip",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js~zipImportedZip",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 522,
    "kind": "function",
    "name": "unzipBlob",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js~unzipBlob",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "blob",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 523,
    "kind": "function",
    "name": "logText",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js~logText",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/test9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 524,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/util.js",
    "content": "function createTempFile(callback) {\n\tvar TMP_FILENAME = \"file.tmp\";\n\trequestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, function(filesystem) {\n\t\tfunction create() {\n\t\t\tfilesystem.root.getFile(TMP_FILENAME, {\n\t\t\t\tcreate : true\n\t\t\t}, function(entry) {\n\t\t\t\tcallback(entry);\n\t\t\t}, onerror);\n\t\t}\n\n\t\tfilesystem.root.getFile(TMP_FILENAME, null, function(entry) {\n\t\t\tentry.remove(create, create);\n\t\t}, create);\n\t});\n}\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/tests/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 525,
    "kind": "function",
    "name": "createTempFile",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/tests/util.js~createTempFile",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/tests/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 526,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/z-worker.js",
    "content": "/* jshint worker:true */\n(function main(global) {\n\t\"use strict\";\n\n\tif (global.zWorkerInitialized)\n\t\tthrow new Error('z-worker.js should be run only once');\n\tglobal.zWorkerInitialized = true;\n\n\taddEventListener(\"message\", function(event) {\n\t\tvar message = event.data, type = message.type, sn = message.sn;\n\t\tvar handler = handlers[type];\n\t\tif (handler) {\n\t\t\ttry {\n\t\t\t\thandler(message);\n\t\t\t} catch (e) {\n\t\t\t\tonError(type, sn, e);\n\t\t\t}\n\t\t}\n\t\t//for debug\n\t\t//postMessage({type: 'echo', originalType: type, sn: sn});\n\t});\n\n\tvar handlers = {\n\t\timportScripts: doImportScripts,\n\t\tnewTask: newTask,\n\t\tappend: processData,\n\t\tflush: processData,\n\t};\n\n\t// deflater/inflater tasks indexed by serial numbers\n\tvar tasks = {};\n\n\tfunction doImportScripts(msg) {\n\t\tif (msg.scripts && msg.scripts.length > 0)\n\t\t\timportScripts.apply(undefined, msg.scripts);\n\t\tpostMessage({type: 'importScripts'});\n\t}\n\n\tfunction newTask(msg) {\n\t\tvar CodecClass = global[msg.codecClass];\n\t\tvar sn = msg.sn;\n\t\tif (tasks[sn])\n\t\t\tthrow Error('duplicated sn');\n\t\ttasks[sn] =  {\n\t\t\tcodec: new CodecClass(msg.options),\n\t\t\tcrcInput: msg.crcType === 'input',\n\t\t\tcrcOutput: msg.crcType === 'output',\n\t\t\tcrc: new Crc32(),\n\t\t};\n\t\tpostMessage({type: 'newTask', sn: sn});\n\t}\n\n\t// performance may not be supported\n\tvar now = global.performance ? global.performance.now.bind(global.performance) : Date.now;\n\n\tfunction processData(msg) {\n\t\tvar sn = msg.sn, type = msg.type, input = msg.data;\n\t\tvar task = tasks[sn];\n\t\t// allow creating codec on first append\n\t\tif (!task && msg.codecClass) {\n\t\t\tnewTask(msg);\n\t\t\ttask = tasks[sn];\n\t\t}\n\t\tvar isAppend = type === 'append';\n\t\tvar start = now();\n\t\tvar output;\n\t\tif (isAppend) {\n\t\t\ttry {\n\t\t\t\toutput = task.codec.append(input, function onprogress(loaded) {\n\t\t\t\t\tpostMessage({type: 'progress', sn: sn, loaded: loaded});\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tdelete tasks[sn];\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\tdelete tasks[sn];\n\t\t\toutput = task.codec.flush();\n\t\t}\n\t\tvar codecTime = now() - start;\n\n\t\tstart = now();\n\t\tif (input && task.crcInput)\n\t\t\ttask.crc.append(input);\n\t\tif (output && task.crcOutput)\n\t\t\ttask.crc.append(output);\n\t\tvar crcTime = now() - start;\n\n\t\tvar rmsg = {type: type, sn: sn, codecTime: codecTime, crcTime: crcTime};\n\t\tvar transferables = [];\n\t\tif (output) {\n\t\t\trmsg.data = output;\n\t\t\ttransferables.push(output.buffer);\n\t\t}\n\t\tif (!isAppend && (task.crcInput || task.crcOutput))\n\t\t\trmsg.crc = task.crc.get();\n\t\t\n\t\t// posting a message with transferables will fail on IE10\n\t\ttry {\n\t\t\tpostMessage(rmsg, transferables);\n\t\t} catch(ex) {\n\t\t\tpostMessage(rmsg); // retry without transferables\n\t\t}\n\t}\n\n\tfunction onError(type, sn, e) {\n\t\tvar msg = {\n\t\t\ttype: type,\n\t\t\tsn: sn,\n\t\t\terror: formatError(e)\n\t\t};\n\t\tpostMessage(msg);\n\t}\n\n\tfunction formatError(e) {\n\t\treturn { message: e.message, stack: e.stack };\n\t}\n\n\t// Crc32 code copied from file zip.js\n\tfunction Crc32() {\n\t\tthis.crc = -1;\n\t}\n\tCrc32.prototype.append = function append(data) {\n\t\tvar crc = this.crc | 0, table = this.table;\n\t\tfor (var offset = 0, len = data.length | 0; offset < len; offset++)\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];\n\t\tthis.crc = crc;\n\t};\n\tCrc32.prototype.get = function get() {\n\t\treturn ~this.crc;\n\t};\n\tCrc32.prototype.table = (function() {\n\t\tvar i, j, t, table = []; // Uint32Array is actually slower than []\n\t\tfor (i = 0; i < 256; i++) {\n\t\t\tt = i;\n\t\t\tfor (j = 0; j < 8; j++)\n\t\t\t\tif (t & 1)\n\t\t\t\t\tt = (t >>> 1) ^ 0xEDB88320;\n\t\t\t\telse\n\t\t\t\t\tt = t >>> 1;\n\t\t\ttable[i] = t;\n\t\t}\n\t\treturn table;\n\t})();\n\n\t// \"no-op\" codec\n\tfunction NOOP() {}\n\tglobal.NOOP = NOOP;\n\tNOOP.prototype.append = function append(bytes, onprogress) {\n\t\treturn bytes;\n\t};\n\tNOOP.prototype.flush = function flush() {};\n})(this);\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/z-worker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 527,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/zip-ext.js",
    "content": "/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @private\n */\nconst zipExt = function(zipObj) {\n\n\tvar ERR_HTTP_RANGE = \"HTTP Range not supported.\";\n\n\tvar Reader = zipObj.Reader;\n\tvar Writer = zipObj.Writer;\n\n\tvar ZipDirectoryEntry;\n\n\tvar appendABViewSupported;\n\ttry {\n\t\tappendABViewSupported = new Blob([new DataView(new ArrayBuffer(0))]).size === 0;\n\t} catch (e) {\n\t}\n\n\tfunction isHttpFamily(url) {\n\t\tvar a = document.createElement(\"a\");\n\t\ta.href = url;\n\t\treturn a.protocol === \"http:\" || a.protocol === \"https:\";\n\t}\n\n\tfunction HttpReader(url) {\n\t\tvar that = this;\n\n\t\tfunction getData(callback, onerror) {\n\t\t\tvar request;\n\t\t\tif (!that.data) {\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.addEventListener(\"load\", function () {\n\t\t\t\t\tif (!that.size)\n\t\t\t\t\t\tthat.size = Number(request.getResponseHeader(\"Content-Length\")) || Number(request.response.byteLength);\n\t\t\t\t\tthat.data = new Uint8Array(request.response);\n\t\t\t\t\tcallback();\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener(\"error\", onerror, false);\n\t\t\t\trequest.open(\"GET\", url);\n\t\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\t\trequest.send();\n\t\t\t} else\n\t\t\t\tcallback();\n\t\t}\n\n\t\tfunction init(callback, onerror) {\n\t\t\tif (!isHttpFamily(url)) {\n\t\t\t\t// For schemas other than http(s), HTTP HEAD may be unavailable,\n\t\t\t\t// so use HTTP GET instead.\n\t\t\t\tgetData(callback, onerror);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.addEventListener(\"load\", function () {\n\t\t\t\tthat.size = Number(request.getResponseHeader(\"Content-Length\"));\n\t\t\t\t// If response header doesn't return size then prefetch the content.\n\t\t\t\tif (!that.size) {\n\t\t\t\t\tgetData(callback, onerror);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t\trequest.addEventListener(\"error\", onerror, false);\n\t\t\trequest.open(\"HEAD\", url);\n\t\t\trequest.send();\n\t\t}\n\n\t\tfunction readUint8Array(index, length, callback, onerror) {\n\t\t\tgetData(function () {\n\t\t\t\tcallback(new Uint8Array(that.data.subarray(index, index + length)));\n\t\t\t}, onerror);\n\t\t}\n\n\t\tthat.size = 0;\n\t\tthat.init = init;\n\t\tthat.readUint8Array = readUint8Array;\n\t}\n\n\tHttpReader.prototype = new Reader();\n\tHttpReader.prototype.constructor = HttpReader;\n\n\tfunction HttpRangeReader(url) {\n\t\tvar that = this;\n\n\t\tfunction init(callback, onerror) {\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.addEventListener(\"load\", function () {\n\t\t\t\tthat.size = Number(request.getResponseHeader(\"Content-Length\"));\n\t\t\t\tif (request.getResponseHeader(\"Accept-Ranges\") == \"bytes\")\n\t\t\t\t\tcallback();\n\t\t\t\telse\n\t\t\t\t\tonerror(ERR_HTTP_RANGE);\n\t\t\t}, false);\n\t\t\trequest.addEventListener(\"error\", onerror, false);\n\t\t\trequest.open(\"HEAD\", url);\n\t\t\trequest.send();\n\t\t}\n\n\t\tfunction readArrayBuffer(index, length, callback, onerror) {\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.open(\"GET\", url);\n\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\trequest.setRequestHeader(\"Range\", \"bytes=\" + index + \"-\" + (index + length - 1));\n\t\t\trequest.addEventListener(\"load\", function () {\n\t\t\t\tcallback(request.response);\n\t\t\t}, false);\n\t\t\trequest.addEventListener(\"error\", onerror, false);\n\t\t\trequest.send();\n\t\t}\n\n\t\tfunction readUint8Array(index, length, callback, onerror) {\n\t\t\treadArrayBuffer(index, length, function (arraybuffer) {\n\t\t\t\tcallback(new Uint8Array(arraybuffer));\n\t\t\t}, onerror);\n\t\t}\n\n\t\tthat.size = 0;\n\t\tthat.init = init;\n\t\tthat.readUint8Array = readUint8Array;\n\t}\n\n\tHttpRangeReader.prototype = new Reader();\n\tHttpRangeReader.prototype.constructor = HttpRangeReader;\n\n\tfunction ArrayBufferReader(arrayBuffer) {\n\t\tvar that = this;\n\n\t\tfunction init(callback, onerror) {\n\t\t\tthat.size = arrayBuffer.byteLength;\n\t\t\tcallback();\n\t\t}\n\n\t\tfunction readUint8Array(index, length, callback, onerror) {\n\t\t\tcallback(new Uint8Array(arrayBuffer.slice(index, index + length)));\n\t\t}\n\n\t\tthat.size = 0;\n\t\tthat.init = init;\n\t\tthat.readUint8Array = readUint8Array;\n\t}\n\n\tArrayBufferReader.prototype = new Reader();\n\tArrayBufferReader.prototype.constructor = ArrayBufferReader;\n\n\tfunction ArrayBufferWriter() {\n\t\tvar array, that = this;\n\n\t\tfunction init(callback, onerror) {\n\t\t\tarray = new Uint8Array();\n\t\t\tcallback();\n\t\t}\n\n\t\tfunction writeUint8Array(arr, callback, onerror) {\n\t\t\tvar tmpArray = new Uint8Array(array.length + arr.length);\n\t\t\ttmpArray.set(array);\n\t\t\ttmpArray.set(arr, array.length);\n\t\t\tarray = tmpArray;\n\t\t\tcallback();\n\t\t}\n\n\t\tfunction getData(callback) {\n\t\t\tcallback(array.buffer);\n\t\t}\n\n\t\tthat.init = init;\n\t\tthat.writeUint8Array = writeUint8Array;\n\t\tthat.getData = getData;\n\t}\n\n\tArrayBufferWriter.prototype = new Writer();\n\tArrayBufferWriter.prototype.constructor = ArrayBufferWriter;\n\n\tfunction FileWriter(fileEntry, contentType) {\n\t\tvar writer, that = this;\n\n\t\tfunction init(callback, onerror) {\n\t\t\tfileEntry.createWriter(function (fileWriter) {\n\t\t\t\twriter = fileWriter;\n\t\t\t\tcallback();\n\t\t\t}, onerror);\n\t\t}\n\n\t\tfunction writeUint8Array(array, callback, onerror) {\n\t\t\tvar blob = new Blob([appendABViewSupported ? array : array.buffer], {\n\t\t\t\ttype: contentType\n\t\t\t});\n\t\t\twriter.onwrite = function () {\n\t\t\t\twriter.onwrite = null;\n\t\t\t\tcallback();\n\t\t\t};\n\t\t\twriter.onerror = onerror;\n\t\t\twriter.write(blob);\n\t\t}\n\n\t\tfunction getData(callback) {\n\t\t\tfileEntry.file(callback);\n\t\t}\n\n\t\tthat.init = init;\n\t\tthat.writeUint8Array = writeUint8Array;\n\t\tthat.getData = getData;\n\t}\n\n\tFileWriter.prototype = new Writer();\n\tFileWriter.prototype.constructor = FileWriter;\n\n\tzipObj.FileWriter = FileWriter;\n\tzipObj.HttpReader = HttpReader;\n\tzipObj.HttpRangeReader = HttpRangeReader;\n\tzipObj.ArrayBufferReader = ArrayBufferReader;\n\tzipObj.ArrayBufferWriter = ArrayBufferWriter;\n\n\tif (zipObj.fs) {\n\t\tZipDirectoryEntry = zipObj.fs.ZipDirectoryEntry;\n\t\tZipDirectoryEntry.prototype.addHttpContent = function (name, URL, useRangeHeader) {\n\t\t\tfunction addChild(parent, name, params, directory) {\n\t\t\t\tif (parent.directory)\n\t\t\t\t\treturn directory ? new ZipDirectoryEntry(parent.fs, name, params, parent) : new zipObj.fs.ZipFileEntry(parent.fs, name, params, parent);\n\t\t\t\telse\n\t\t\t\t\tthrow \"Parent entry is not a directory.\";\n\t\t\t}\n\n\t\t\treturn addChild(this, name, {\n\t\t\t\tdata: URL,\n\t\t\t\tReader: useRangeHeader ? HttpRangeReader : HttpReader\n\t\t\t});\n\t\t};\n\t\tZipDirectoryEntry.prototype.importHttpContent = function (URL, useRangeHeader, onend, onerror) {\n\t\t\tthis.importZip(useRangeHeader ? new HttpRangeReader(URL) : new HttpReader(URL), onend, onerror);\n\t\t};\n\t\tzipObj.fs.FS.prototype.importHttpContent = function (URL, useRangeHeader, onend, onerror) {\n\t\t\tthis.entries = [];\n\t\t\tthis.root = new ZipDirectoryEntry(this);\n\t\t\tthis.root.importHttpContent(URL, useRangeHeader, onend, onerror);\n\t\t};\n\t}\n};\n\nexport {zipExt};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/zip-ext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 528,
    "kind": "function",
    "name": "zipExt",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/zip-ext.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/zip-ext.js~zipExt",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/zip-ext.js",
    "importStyle": "{zipExt}",
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "name": "zipObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 529,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/zip-fs.js",
    "content": "/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function() {\n\t\"use strict\";\n\n\tvar CHUNK_SIZE = 512 * 1024;\n\n\tvar TextWriter = zip.TextWriter, //\n\tBlobWriter = zip.BlobWriter, //\n\tData64URIWriter = zip.Data64URIWriter, //\n\tReader = zip.Reader, //\n\tTextReader = zip.TextReader, //\n\tBlobReader = zip.BlobReader, //\n\tData64URIReader = zip.Data64URIReader, //\n\tcreateReader = zip.createReader, //\n\tcreateWriter = zip.createWriter;\n\n\tfunction ZipBlobReader(entry) {\n\t\tvar that = this, blobReader;\n\n\t\tfunction init(callback) {\n\t\t\tthat.size = entry.uncompressedSize;\n\t\t\tcallback();\n\t\t}\n\n\t\tfunction getData(callback) {\n\t\t\tif (that.data)\n\t\t\t\tcallback();\n\t\t\telse\n\t\t\t\tentry.getData(new BlobWriter(), function(data) {\n\t\t\t\t\tthat.data = data;\n\t\t\t\t\tblobReader = new BlobReader(data);\n\t\t\t\t\tcallback();\n\t\t\t\t}, null, that.checkCrc32);\n\t\t}\n\n\t\tfunction readUint8Array(index, length, callback, onerror) {\n\t\t\tgetData(function() {\n\t\t\t\tblobReader.readUint8Array(index, length, callback, onerror);\n\t\t\t}, onerror);\n\t\t}\n\n\t\tthat.size = 0;\n\t\tthat.init = init;\n\t\tthat.readUint8Array = readUint8Array;\n\t}\n\tZipBlobReader.prototype = new Reader();\n\tZipBlobReader.prototype.constructor = ZipBlobReader;\n\tZipBlobReader.prototype.checkCrc32 = false;\n\n\tfunction getTotalSize(entry) {\n\t\tvar size = 0;\n\n\t\tfunction process(entry) {\n\t\t\tsize += entry.uncompressedSize || 0;\n\t\t\tentry.children.forEach(process);\n\t\t}\n\n\t\tprocess(entry);\n\t\treturn size;\n\t}\n\n\tfunction initReaders(entry, onend, onerror) {\n\t\tvar index = 0;\n\n\t\tfunction next() {\n\t\t\tindex++;\n\t\t\tif (index < entry.children.length)\n\t\t\t\tprocess(entry.children[index]);\n\t\t\telse\n\t\t\t\tonend();\n\t\t}\n\n\t\tfunction process(child) {\n\t\t\tif (child.directory)\n\t\t\t\tinitReaders(child, next, onerror);\n\t\t\telse {\n\t\t\t\tchild.reader = new child.Reader(child.data, onerror);\n\t\t\t\tchild.reader.init(function() {\n\t\t\t\t\tchild.uncompressedSize = child.reader.size;\n\t\t\t\t\tnext();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (entry.children.length)\n\t\t\tprocess(entry.children[index]);\n\t\telse\n\t\t\tonend();\n\t}\n\n\tfunction detach(entry) {\n\t\tvar children = entry.parent.children;\n\t\tchildren.forEach(function(child, index) {\n\t\t\tif (child.id == entry.id)\n\t\t\t\tchildren.splice(index, 1);\n\t\t});\n\t}\n\n\tfunction exportZip(zipWriter, entry, onend, onprogress, totalSize) {\n\t\tvar currentIndex = 0;\n\n\t\tfunction process(zipWriter, entry, onend, onprogress, totalSize) {\n\t\t\tvar childIndex = 0;\n\n\t\t\tfunction exportChild() {\n\t\t\t\tvar child = entry.children[childIndex];\n\t\t\t\tif (child)\n\t\t\t\t\tzipWriter.add(child.getFullname(), child.reader, function() {\n\t\t\t\t\t\tcurrentIndex += child.uncompressedSize || 0;\n\t\t\t\t\t\tprocess(zipWriter, child, function() {\n\t\t\t\t\t\t\tchildIndex++;\n\t\t\t\t\t\t\texportChild();\n\t\t\t\t\t\t}, onprogress, totalSize);\n\t\t\t\t\t}, function(index) {\n\t\t\t\t\t\tif (onprogress)\n\t\t\t\t\t\t\tonprogress(currentIndex + index, totalSize);\n\t\t\t\t\t}, {\n\t\t\t\t\t\tdirectory : child.directory,\n\t\t\t\t\t\tversion : child.zipVersion\n\t\t\t\t\t});\n\t\t\t\telse\n\t\t\t\t\tonend();\n\t\t\t}\n\n\t\t\texportChild();\n\t\t}\n\n\t\tprocess(zipWriter, entry, onend, onprogress, totalSize);\n\t}\n\n\tfunction addFileEntry(zipEntry, fileEntry, onend, onerror) {\n\t\tfunction getChildren(fileEntry, callback) {\n\t\t\tvar entries = [];\n\t\t\tif (fileEntry.isDirectory) {\n\t\t\t\tvar directoryReader = fileEntry.createReader();\n\t\t\t\t(function readEntries() {\n\t\t\t\t\tdirectoryReader.readEntries(function(temporaryEntries) {\n\t\t\t\t\t\tif (!temporaryEntries.length)\n\t\t\t\t\t\t\tcallback(entries);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tentries = entries.concat(temporaryEntries);\n\t\t\t\t\t\t\treadEntries();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, onerror);\n\t\t\t\t})();\n\t\t\t}\n\t\t\tif (fileEntry.isFile)\n\t\t\t\tcallback(entries);\n\t\t}\n\n\t\tfunction process(zipEntry, fileEntry, onend) {\n\t\t\tgetChildren(fileEntry, function(children) {\n\t\t\t\tvar childIndex = 0;\n\n\t\t\t\tfunction addChild(child) {\n\t\t\t\t\tfunction nextChild(childFileEntry) {\n\t\t\t\t\t\tprocess(childFileEntry, child, function() {\n\t\t\t\t\t\t\tchildIndex++;\n\t\t\t\t\t\t\tprocessChild();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (child.isDirectory)\n\t\t\t\t\t\tnextChild(zipEntry.addDirectory(child.name));\n\t\t\t\t\tif (child.isFile)\n\t\t\t\t\t\tchild.file(function(file) {\n\t\t\t\t\t\t\tvar childZipEntry = zipEntry.addBlob(child.name, file);\n\t\t\t\t\t\t\tchildZipEntry.uncompressedSize = file.size;\n\t\t\t\t\t\t\tnextChild(childZipEntry);\n\t\t\t\t\t\t}, onerror);\n\t\t\t\t}\n\n\t\t\t\tfunction processChild() {\n\t\t\t\t\tvar child = children[childIndex];\n\t\t\t\t\tif (child)\n\t\t\t\t\t\taddChild(child);\n\t\t\t\t\telse\n\t\t\t\t\t\tonend();\n\t\t\t\t}\n\n\t\t\t\tprocessChild();\n\t\t\t});\n\t\t}\n\n\t\tif (fileEntry.isDirectory)\n\t\t\tprocess(zipEntry, fileEntry, onend);\n\t\telse\n\t\t\tfileEntry.file(function(file) {\n\t\t\t\tzipEntry.addBlob(fileEntry.name, file);\n\t\t\t\tonend();\n\t\t\t}, onerror);\n\t}\n\n\tfunction getFileEntry(fileEntry, entry, onend, onprogress, onerror, totalSize, checkCrc32) {\n\t\tvar currentIndex = 0;\n\n\t\tfunction process(fileEntry, entry, onend, onprogress, onerror, totalSize) {\n\t\t\tvar childIndex = 0;\n\n\t\t\tfunction addChild(child) {\n\t\t\t\tfunction nextChild(childFileEntry) {\n\t\t\t\t\tcurrentIndex += child.uncompressedSize || 0;\n\t\t\t\t\tprocess(childFileEntry, child, function() {\n\t\t\t\t\t\tchildIndex++;\n\t\t\t\t\t\tprocessChild();\n\t\t\t\t\t}, onprogress, onerror, totalSize);\n\t\t\t\t}\n\n\t\t\t\tif (child.directory)\n\t\t\t\t\tfileEntry.getDirectory(child.name, {\n\t\t\t\t\t\tcreate : true\n\t\t\t\t\t}, nextChild, onerror);\n\t\t\t\telse\n\t\t\t\t\tfileEntry.getFile(child.name, {\n\t\t\t\t\t\tcreate : true\n\t\t\t\t\t}, function(file) {\n\t\t\t\t\t\tchild.getData(new zip.FileWriter(file, zip.getMimeType(child.name)), nextChild, function(index) {\n\t\t\t\t\t\t\tif (onprogress)\n\t\t\t\t\t\t\t\tonprogress(currentIndex + index, totalSize);\n\t\t\t\t\t\t}, checkCrc32);\n\t\t\t\t\t}, onerror);\n\t\t\t}\n\n\t\t\tfunction processChild() {\n\t\t\t\tvar child = entry.children[childIndex];\n\t\t\t\tif (child)\n\t\t\t\t\taddChild(child);\n\t\t\t\telse\n\t\t\t\t\tonend();\n\t\t\t}\n\n\t\t\tprocessChild();\n\t\t}\n\n\t\tif (entry.directory)\n\t\t\tprocess(fileEntry, entry, onend, onprogress, onerror, totalSize);\n\t\telse\n\t\t\tentry.getData(new zip.FileWriter(fileEntry, zip.getMimeType(entry.name)), onend, onprogress, checkCrc32);\n\t}\n\n\tfunction resetFS(fs) {\n\t\tfs.entries = [];\n\t\tfs.root = new ZipDirectoryEntry(fs);\n\t}\n\n\tfunction bufferedCopy(reader, writer, onend, onprogress, onerror) {\n\t\tvar chunkIndex = 0;\n\n\t\tfunction stepCopy() {\n\t\t\tvar index = chunkIndex * CHUNK_SIZE;\n\t\t\tif (onprogress)\n\t\t\t\tonprogress(index, reader.size);\n\t\t\tif (index < reader.size)\n\t\t\t\treader.readUint8Array(index, Math.min(CHUNK_SIZE, reader.size - index), function(array) {\n\t\t\t\t\twriter.writeUint8Array(new Uint8Array(array), function() {\n\t\t\t\t\t\tchunkIndex++;\n\t\t\t\t\t\tstepCopy();\n\t\t\t\t\t});\n\t\t\t\t}, onerror);\n\t\t\telse\n\t\t\t\twriter.getData(onend);\n\t\t}\n\n\t\tstepCopy();\n\t}\n\n\tfunction addChild(parent, name, params, directory) {\n\t\tif (parent.directory)\n\t\t\treturn directory ? new ZipDirectoryEntry(parent.fs, name, params, parent) : new ZipFileEntry(parent.fs, name, params, parent);\n\t\telse\n\t\t\tthrow \"Parent entry is not a directory.\";\n\t}\n\n\tfunction ZipEntry() {\n\t}\n\n\tZipEntry.prototype = {\n\t\tinit : function(fs, name, params, parent) {\n\t\t\tvar that = this;\n\t\t\tif (fs.root && parent && parent.getChildByName(name))\n\t\t\t\tthrow \"Entry filename already exists.\";\n\t\t\tif (!params)\n\t\t\t\tparams = {};\n\t\t\tthat.fs = fs;\n\t\t\tthat.name = name;\n\t\t\tthat.id = fs.entries.length;\n\t\t\tthat.parent = parent;\n\t\t\tthat.children = [];\n\t\t\tthat.zipVersion = params.zipVersion || 0x14;\n\t\t\tthat.uncompressedSize = 0;\n\t\t\tfs.entries.push(that);\n\t\t\tif (parent)\n\t\t\t\tthat.parent.children.push(that);\n\t\t},\n\t\tgetFileEntry : function(fileEntry, onend, onprogress, onerror, checkCrc32) {\n\t\t\tvar that = this;\n\t\t\tinitReaders(that, function() {\n\t\t\t\tgetFileEntry(fileEntry, that, onend, onprogress, onerror, getTotalSize(that), checkCrc32);\n\t\t\t}, onerror);\n\t\t},\n\t\tmoveTo : function(target) {\n\t\t\tvar that = this;\n\t\t\tif (target.directory) {\n\t\t\t\tif (!target.isDescendantOf(that)) {\n\t\t\t\t\tif (that != target) {\n\t\t\t\t\t\tif (target.getChildByName(that.name))\n\t\t\t\t\t\t\tthrow \"Entry filename already exists.\";\n\t\t\t\t\t\tdetach(that);\n\t\t\t\t\t\tthat.parent = target;\n\t\t\t\t\t\ttarget.children.push(that);\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tthrow \"Entry is a ancestor of target entry.\";\n\t\t\t} else\n\t\t\t\tthrow \"Target entry is not a directory.\";\n\t\t},\n\t\tgetFullname : function() {\n\t\t\tvar that = this, fullname = that.name, entry = that.parent;\n\t\t\twhile (entry) {\n\t\t\t\tfullname = (entry.name ? entry.name + \"/\" : \"\") + fullname;\n\t\t\t\tentry = entry.parent;\n\t\t\t}\n\t\t\treturn fullname;\n\t\t},\n\t\tisDescendantOf : function(ancestor) {\n\t\t\tvar entry = this.parent;\n\t\t\twhile (entry && entry.id != ancestor.id)\n\t\t\t\tentry = entry.parent;\n\t\t\treturn !!entry;\n\t\t}\n\t};\n\tZipEntry.prototype.constructor = ZipEntry;\n\n\tvar ZipFileEntryProto;\n\n\tfunction ZipFileEntry(fs, name, params, parent) {\n\t\tvar that = this;\n\t\tZipEntry.prototype.init.call(that, fs, name, params, parent);\n\t\tthat.Reader = params.Reader;\n\t\tthat.Writer = params.Writer;\n\t\tthat.data = params.data;\n\t\tif (params.getData) {\n\t\t\tthat.getData = params.getData;\n\t\t}\n\t}\n\n\tZipFileEntry.prototype = ZipFileEntryProto = new ZipEntry();\n\tZipFileEntryProto.constructor = ZipFileEntry;\n\tZipFileEntryProto.getData = function(writer, onend, onprogress, onerror) {\n\t\tvar that = this;\n\t\tif (!writer || (writer.constructor == that.Writer && that.data))\n\t\t\tonend(that.data);\n\t\telse {\n\t\t\tif (!that.reader)\n\t\t\t\tthat.reader = new that.Reader(that.data, onerror);\n\t\t\tthat.reader.init(function() {\n\t\t\t\twriter.init(function() {\n\t\t\t\t\tbufferedCopy(that.reader, writer, onend, onprogress, onerror);\n\t\t\t\t}, onerror);\n\t\t\t});\n\t\t}\n\t};\n\n\tZipFileEntryProto.getText = function(onend, onprogress, checkCrc32, encoding) {\n\t\tthis.getData(new TextWriter(encoding), onend, onprogress, checkCrc32);\n\t};\n\tZipFileEntryProto.getBlob = function(mimeType, onend, onprogress, checkCrc32) {\n\t\tthis.getData(new BlobWriter(mimeType), onend, onprogress, checkCrc32);\n\t};\n\tZipFileEntryProto.getData64URI = function(mimeType, onend, onprogress, checkCrc32) {\n\t\tthis.getData(new Data64URIWriter(mimeType), onend, onprogress, checkCrc32);\n\t};\n\n\tvar ZipDirectoryEntryProto;\n\n\tfunction ZipDirectoryEntry(fs, name, params, parent) {\n\t\tvar that = this;\n\t\tZipEntry.prototype.init.call(that, fs, name, params, parent);\n\t\tthat.directory = true;\n\t}\n\n\tZipDirectoryEntry.prototype = ZipDirectoryEntryProto = new ZipEntry();\n\tZipDirectoryEntryProto.constructor = ZipDirectoryEntry;\n\tZipDirectoryEntryProto.addDirectory = function(name) {\n\t\treturn addChild(this, name, null, true);\n\t};\n\tZipDirectoryEntryProto.addText = function(name, text) {\n\t\treturn addChild(this, name, {\n\t\t\tdata : text,\n\t\t\tReader : TextReader,\n\t\t\tWriter : TextWriter\n\t\t});\n\t};\n\tZipDirectoryEntryProto.addBlob = function(name, blob) {\n\t\treturn addChild(this, name, {\n\t\t\tdata : blob,\n\t\t\tReader : BlobReader,\n\t\t\tWriter : BlobWriter\n\t\t});\n\t};\n\tZipDirectoryEntryProto.addData64URI = function(name, dataURI) {\n\t\treturn addChild(this, name, {\n\t\t\tdata : dataURI,\n\t\t\tReader : Data64URIReader,\n\t\t\tWriter : Data64URIWriter\n\t\t});\n\t};\n\tZipDirectoryEntryProto.addFileEntry = function(fileEntry, onend, onerror) {\n\t\taddFileEntry(this, fileEntry, onend, onerror);\n\t};\n\tZipDirectoryEntryProto.addData = function(name, params) {\n\t\treturn addChild(this, name, params);\n\t};\n\tZipDirectoryEntryProto.importBlob = function(blob, onend, onerror) {\n\t\tthis.importZip(new BlobReader(blob), onend, onerror);\n\t};\n\tZipDirectoryEntryProto.importText = function(text, onend, onerror) {\n\t\tthis.importZip(new TextReader(text), onend, onerror);\n\t};\n\tZipDirectoryEntryProto.importData64URI = function(dataURI, onend, onerror) {\n\t\tthis.importZip(new Data64URIReader(dataURI), onend, onerror);\n\t};\n\tZipDirectoryEntryProto.exportBlob = function(onend, onprogress, onerror) {\n\t\tthis.exportZip(new BlobWriter(\"application/zip\"), onend, onprogress, onerror);\n\t};\n\tZipDirectoryEntryProto.exportText = function(onend, onprogress, onerror) {\n\t\tthis.exportZip(new TextWriter(), onend, onprogress, onerror);\n\t};\n\tZipDirectoryEntryProto.exportFileEntry = function(fileEntry, onend, onprogress, onerror) {\n\t\tthis.exportZip(new zip.FileWriter(fileEntry, \"application/zip\"), onend, onprogress, onerror);\n\t};\n\tZipDirectoryEntryProto.exportData64URI = function(onend, onprogress, onerror) {\n\t\tthis.exportZip(new Data64URIWriter(\"application/zip\"), onend, onprogress, onerror);\n\t};\n\tZipDirectoryEntryProto.importZip = function(reader, onend, onerror) {\n\t\tvar that = this;\n\t\tcreateReader(reader, function(zipReader) {\n\t\t\tzipReader.getEntries(function(entries) {\n\t\t\t\tentries.forEach(function(entry) {\n\t\t\t\t\tvar parent = that, path = entry.filename.split(\"/\"), name = path.pop();\n\t\t\t\t\tpath.forEach(function(pathPart) {\n\t\t\t\t\t\tparent = parent.getChildByName(pathPart) || new ZipDirectoryEntry(that.fs, pathPart, null, parent);\n\t\t\t\t\t});\n\t\t\t\t\tif (!entry.directory)\n\t\t\t\t\t\taddChild(parent, name, {\n\t\t\t\t\t\t\tdata : entry,\n\t\t\t\t\t\t\tReader : ZipBlobReader\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tonend();\n\t\t\t});\n\t\t}, onerror);\n\t};\n\tZipDirectoryEntryProto.exportZip = function(writer, onend, onprogress, onerror) {\n\t\tvar that = this;\n\t\tinitReaders(that, function() {\n\t\t\tcreateWriter(writer, function(zipWriter) {\n\t\t\t\texportZip(zipWriter, that, function() {\n\t\t\t\t\tzipWriter.close(onend);\n\t\t\t\t}, onprogress, getTotalSize(that));\n\t\t\t}, onerror);\n\t\t}, onerror);\n\t};\n\tZipDirectoryEntryProto.getChildByName = function(name) {\n\t\tvar childIndex, child, that = this;\n\t\tfor (childIndex = 0; childIndex < that.children.length; childIndex++) {\n\t\t\tchild = that.children[childIndex];\n\t\t\tif (child.name == name)\n\t\t\t\treturn child;\n\t\t}\n\t};\n\n\tfunction FS() {\n\t\tresetFS(this);\n\t}\n\tFS.prototype = {\n\t\tremove : function(entry) {\n\t\t\tdetach(entry);\n\t\t\tthis.entries[entry.id] = null;\n\t\t},\n\t\tfind : function(fullname) {\n\t\t\tvar index, path = fullname.split(\"/\"), node = this.root;\n\t\t\tfor (index = 0; node && index < path.length; index++)\n\t\t\t\tnode = node.getChildByName(path[index]);\n\t\t\treturn node;\n\t\t},\n\t\tgetById : function(id) {\n\t\t\treturn this.entries[id];\n\t\t},\n\t\timportBlob : function(blob, onend, onerror) {\n\t\t\tresetFS(this);\n\t\t\tthis.root.importBlob(blob, onend, onerror);\n\t\t},\n\t\timportText : function(text, onend, onerror) {\n\t\t\tresetFS(this);\n\t\t\tthis.root.importText(text, onend, onerror);\n\t\t},\n\t\timportData64URI : function(dataURI, onend, onerror) {\n\t\t\tresetFS(this);\n\t\t\tthis.root.importData64URI(dataURI, onend, onerror);\n\t\t},\n\t\texportBlob : function(onend, onprogress, onerror) {\n\t\t\tthis.root.exportBlob(onend, onprogress, onerror);\n\t\t},\n\t\texportText : function(onend, onprogress, onerror) {\n\t\t\tthis.root.exportText(onend, onprogress, onerror);\n\t\t},\n\t\texportFileEntry : function(fileEntry, onend, onprogress, onerror) {\n\t\t\tthis.root.exportFileEntry(fileEntry, onend, onprogress, onerror);\n\t\t},\n\t\texportData64URI : function(onend, onprogress, onerror) {\n\t\t\tthis.root.exportData64URI(onend, onprogress, onerror);\n\t\t}\n\t};\n\n\tzip.fs = {\n\t\tFS : FS,\n\t\tZipDirectoryEntry : ZipDirectoryEntry,\n\t\tZipFileEntry : ZipFileEntry\n\t};\n\n\tzip.getMimeType = function() {\n\t\treturn \"application/octet-stream\";\n\t};\n\n})();\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/zip-fs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 530,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/zip.js",
    "content": "/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in\n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @private\n * @type {{}}\n */\nvar zipLib = {};\n\n(function (obj) {\n    \"use strict\";\n\n    var ERR_BAD_FORMAT = \"File format is not recognized.\";\n    var ERR_CRC = \"CRC failed.\";\n    var ERR_ENCRYPTED = \"File contains encrypted entry.\";\n    var ERR_ZIP64 = \"File is using Zip64 (4gb+ file size).\";\n    var ERR_READ = \"Error while reading zip file.\";\n    var ERR_WRITE = \"Error while writing zip file.\";\n    var ERR_WRITE_DATA = \"Error while writing file data.\";\n    var ERR_READ_DATA = \"Error while reading file data.\";\n    var ERR_DUPLICATED_NAME = \"File already exists.\";\n    var CHUNK_SIZE = 512 * 1024;\n\n    var TEXT_PLAIN = \"text/plain\";\n\n    var appendABViewSupported;\n    try {\n        appendABViewSupported = new Blob([new DataView(new ArrayBuffer(0))]).size === 0;\n    } catch (e) {\n    }\n\n    function Crc32() {\n        this.crc = -1;\n    }\n\n    Crc32.prototype.append = function append(data) {\n        var crc = this.crc | 0, table = this.table;\n        for (var offset = 0, len = data.length | 0; offset < len; offset++)\n            crc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];\n        this.crc = crc;\n    };\n    Crc32.prototype.get = function get() {\n        return ~this.crc;\n    };\n    Crc32.prototype.table = (function () {\n        var i, j, t, table = []; // Uint32Array is actually slower than []\n        for (i = 0; i < 256; i++) {\n            t = i;\n            for (j = 0; j < 8; j++)\n                if (t & 1)\n                    t = (t >>> 1) ^ 0xEDB88320;\n                else\n                    t = t >>> 1;\n            table[i] = t;\n        }\n        return table;\n    })();\n\n    // \"no-op\" codec\n    function NOOP() {\n    }\n\n    NOOP.prototype.append = function append(bytes, onprogress) {\n        return bytes;\n    };\n    NOOP.prototype.flush = function flush() {\n    };\n\n    function blobSlice(blob, index, length) {\n        if (index < 0 || length < 0 || index + length > blob.size)\n            throw new RangeError('offset:' + index + ', length:' + length + ', size:' + blob.size);\n        if (blob.slice)\n            return blob.slice(index, index + length);\n        else if (blob.webkitSlice)\n            return blob.webkitSlice(index, index + length);\n        else if (blob.mozSlice)\n            return blob.mozSlice(index, index + length);\n        else if (blob.msSlice)\n            return blob.msSlice(index, index + length);\n    }\n\n    function getDataHelper(byteLength, bytes) {\n        var dataBuffer, dataArray;\n        dataBuffer = new ArrayBuffer(byteLength);\n        dataArray = new Uint8Array(dataBuffer);\n        if (bytes)\n            dataArray.set(bytes, 0);\n        return {\n            buffer: dataBuffer,\n            array: dataArray,\n            view: new DataView(dataBuffer)\n        };\n    }\n\n    // Readers\n    function Reader() {\n    }\n\n    function TextReader(text) {\n        var that = this, blobReader;\n\n        function init(callback, onerror) {\n            var blob = new Blob([text], {\n                type: TEXT_PLAIN\n            });\n            blobReader = new BlobReader(blob);\n            blobReader.init(function () {\n                that.size = blobReader.size;\n                callback();\n            }, onerror);\n        }\n\n        function readUint8Array(index, length, callback, onerror) {\n            blobReader.readUint8Array(index, length, callback, onerror);\n        }\n\n        that.size = 0;\n        that.init = init;\n        that.readUint8Array = readUint8Array;\n    }\n\n    TextReader.prototype = new Reader();\n    TextReader.prototype.constructor = TextReader;\n\n    function Data64URIReader(dataURI) {\n        var that = this, dataStart;\n\n        function init(callback) {\n            var dataEnd = dataURI.length;\n            while (dataURI.charAt(dataEnd - 1) == \"=\")\n                dataEnd--;\n            dataStart = dataURI.indexOf(\",\") + 1;\n            that.size = Math.floor((dataEnd - dataStart) * 0.75);\n            callback();\n        }\n\n        function readUint8Array(index, length, callback) {\n            var i, data = getDataHelper(length);\n            var start = Math.floor(index / 3) * 4;\n            var end = Math.ceil((index + length) / 3) * 4;\n            var bytes = obj.atob(dataURI.substring(start + dataStart, end + dataStart));\n            var delta = index - Math.floor(start / 4) * 3;\n            for (i = delta; i < delta + length; i++)\n                data.array[i - delta] = bytes.charCodeAt(i);\n            callback(data.array);\n        }\n\n        that.size = 0;\n        that.init = init;\n        that.readUint8Array = readUint8Array;\n    }\n\n    Data64URIReader.prototype = new Reader();\n    Data64URIReader.prototype.constructor = Data64URIReader;\n\n    function BlobReader(blob) {\n        var that = this;\n\n        function init(callback) {\n            that.size = blob.size;\n            callback();\n        }\n\n        function readUint8Array(index, length, callback, onerror) {\n            var reader = new FileReader();\n            reader.onload = function (e) {\n                callback(new Uint8Array(e.target.result));\n            };\n            reader.onerror = onerror;\n            try {\n                reader.readAsArrayBuffer(blobSlice(blob, index, length));\n            } catch (e) {\n                onerror(e);\n            }\n        }\n\n        that.size = 0;\n        that.init = init;\n        that.readUint8Array = readUint8Array;\n    }\n\n    BlobReader.prototype = new Reader();\n    BlobReader.prototype.constructor = BlobReader;\n\n    // Writers\n\n    function Writer() {\n    }\n\n    Writer.prototype.getData = function (callback) {\n        callback(this.data);\n    };\n\n    function TextWriter(encoding) {\n        var that = this, blob;\n\n        function init(callback) {\n            blob = new Blob([], {\n                type: TEXT_PLAIN\n            });\n            callback();\n        }\n\n        function writeUint8Array(array, callback) {\n            blob = new Blob([blob, appendABViewSupported ? array : array.buffer], {\n                type: TEXT_PLAIN\n            });\n            callback();\n        }\n\n        function getData(callback, onerror) {\n            var reader = new FileReader();\n            reader.onload = function (e) {\n                callback(e.target.result);\n            };\n            reader.onerror = onerror;\n            reader.readAsText(blob, encoding);\n        }\n\n        that.init = init;\n        that.writeUint8Array = writeUint8Array;\n        that.getData = getData;\n    }\n\n    TextWriter.prototype = new Writer();\n    TextWriter.prototype.constructor = TextWriter;\n\n    function Data64URIWriter(contentType) {\n        var that = this, data = \"\", pending = \"\";\n\n        function init(callback) {\n            data += \"data:\" + (contentType || \"\") + \";base64,\";\n            callback();\n        }\n\n        function writeUint8Array(array, callback) {\n            var i, delta = pending.length, dataString = pending;\n            pending = \"\";\n            for (i = 0; i < (Math.floor((delta + array.length) / 3) * 3) - delta; i++)\n                dataString += String.fromCharCode(array[i]);\n            for (; i < array.length; i++)\n                pending += String.fromCharCode(array[i]);\n            if (dataString.length > 2)\n                data += obj.btoa(dataString);\n            else\n                pending = dataString;\n            callback();\n        }\n\n        function getData(callback) {\n            callback(data + obj.btoa(pending));\n        }\n\n        that.init = init;\n        that.writeUint8Array = writeUint8Array;\n        that.getData = getData;\n    }\n\n    Data64URIWriter.prototype = new Writer();\n    Data64URIWriter.prototype.constructor = Data64URIWriter;\n\n    function BlobWriter(contentType) {\n        var blob, that = this;\n\n        function init(callback) {\n            blob = new Blob([], {\n                type: contentType\n            });\n            callback();\n        }\n\n        function writeUint8Array(array, callback) {\n            blob = new Blob([blob, appendABViewSupported ? array : array.buffer], {\n                type: contentType\n            });\n            callback();\n        }\n\n        function getData(callback) {\n            callback(blob);\n        }\n\n        that.init = init;\n        that.writeUint8Array = writeUint8Array;\n        that.getData = getData;\n    }\n\n    BlobWriter.prototype = new Writer();\n    BlobWriter.prototype.constructor = BlobWriter;\n\n    /**\n     * inflate/deflate core functions\n     * @param worker {Worker} web worker for the task.\n     * @param initialMessage {Object} initial message to be sent to the worker. should contain\n     *   sn(serial number for distinguishing multiple tasks sent to the worker), and codecClass.\n     *   This function may add more properties before sending.\n     */\n    function launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror) {\n        var chunkIndex = 0, index, outputSize, sn = initialMessage.sn, crc;\n\n        function onflush() {\n            worker.removeEventListener('message', onmessage, false);\n            onend(outputSize, crc);\n        }\n\n        function onmessage(event) {\n            var message = event.data, data = message.data, err = message.error;\n            if (err) {\n                err.toString = function () {\n                    return 'Error: ' + this.message;\n                };\n                onreaderror(err);\n                return;\n            }\n            if (message.sn !== sn)\n                return;\n            if (typeof message.codecTime === 'number')\n                worker.codecTime += message.codecTime; // should be before onflush()\n            if (typeof message.crcTime === 'number')\n                worker.crcTime += message.crcTime;\n\n            switch (message.type) {\n                case 'append':\n                    if (data) {\n                        outputSize += data.length;\n                        writer.writeUint8Array(data, function () {\n                            step();\n                        }, onwriteerror);\n                    } else\n                        step();\n                    break;\n                case 'flush':\n                    crc = message.crc;\n                    if (data) {\n                        outputSize += data.length;\n                        writer.writeUint8Array(data, function () {\n                            onflush();\n                        }, onwriteerror);\n                    } else\n                        onflush();\n                    break;\n                case 'progress':\n                    if (onprogress)\n                        onprogress(index + message.loaded, size);\n                    break;\n                case 'importScripts': //no need to handle here\n                case 'newTask':\n                case 'echo':\n                    break;\n                default:\n                    console.warn('zip.js:launchWorkerProcess: unknown message: ', message);\n            }\n        }\n\n        function step() {\n            index = chunkIndex * CHUNK_SIZE;\n            // use `<=` instead of `<`, because `size` may be 0.\n            if (index <= size) {\n                reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function (array) {\n                    if (onprogress)\n                        onprogress(index, size);\n                    var msg = index === 0 ? initialMessage : {sn: sn};\n                    msg.type = 'append';\n                    msg.data = array;\n\n                    // posting a message with transferables will fail on IE10\n                    try {\n                        worker.postMessage(msg, [array.buffer]);\n                    } catch (ex) {\n                        worker.postMessage(msg); // retry without transferables\n                    }\n                    chunkIndex++;\n                }, onreaderror);\n            } else {\n                worker.postMessage({\n                    sn: sn,\n                    type: 'flush'\n                });\n            }\n        }\n\n        outputSize = 0;\n        worker.addEventListener('message', onmessage, false);\n        step();\n    }\n\n    function launchProcess(process, reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror) {\n        var chunkIndex = 0, index, outputSize = 0,\n            crcInput = crcType === 'input',\n            crcOutput = crcType === 'output',\n            crc = new Crc32();\n\n        function step() {\n            var outputData;\n            index = chunkIndex * CHUNK_SIZE;\n            if (index < size)\n                reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function (inputData) {\n                    var outputData;\n                    try {\n                        outputData = process.append(inputData, function (loaded) {\n                            if (onprogress)\n                                onprogress(index + loaded, size);\n                        });\n                    } catch (e) {\n                        onreaderror(e);\n                        return;\n                    }\n                    if (outputData) {\n                        outputSize += outputData.length;\n                        writer.writeUint8Array(outputData, function () {\n                            chunkIndex++;\n                            setTimeout(step, 1);\n                        }, onwriteerror);\n                        if (crcOutput)\n                            crc.append(outputData);\n                    } else {\n                        chunkIndex++;\n                        setTimeout(step, 1);\n                    }\n                    if (crcInput)\n                        crc.append(inputData);\n                    if (onprogress)\n                        onprogress(index, size);\n                }, onreaderror);\n            else {\n                try {\n                    outputData = process.flush();\n                } catch (e) {\n                    onreaderror(e);\n                    return;\n                }\n                if (outputData) {\n                    if (crcOutput)\n                        crc.append(outputData);\n                    outputSize += outputData.length;\n                    writer.writeUint8Array(outputData, function () {\n                        onend(outputSize, crc.get());\n                    }, onwriteerror);\n                } else\n                    onend(outputSize, crc.get());\n            }\n        }\n\n        step();\n    }\n\n    function inflate(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\n        var crcType = computeCrc32 ? 'output' : 'none';\n        if (obj.zip.useWebWorkers) {\n            var initialMessage = {\n                sn: sn,\n                codecClass: 'Inflater',\n                crcType: crcType,\n            };\n            launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);\n        } else\n            launchProcess(new obj.zip.Inflater(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);\n    }\n\n    function deflate(worker, sn, reader, writer, level, onend, onprogress, onreaderror, onwriteerror) {\n        var crcType = 'input';\n        if (obj.zip.useWebWorkers) {\n            var initialMessage = {\n                sn: sn,\n                options: {level: level},\n                codecClass: 'Deflater',\n                crcType: crcType,\n            };\n            launchWorkerProcess(worker, initialMessage, reader, writer, 0, reader.size, onprogress, onend, onreaderror, onwriteerror);\n        } else\n            launchProcess(new obj.zip.Deflater(), reader, writer, 0, reader.size, crcType, onprogress, onend, onreaderror, onwriteerror);\n    }\n\n    function copy(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {\n        var crcType = 'input';\n        if (obj.zip.useWebWorkers && computeCrc32) {\n            var initialMessage = {\n                sn: sn,\n                codecClass: 'NOOP',\n                crcType: crcType,\n            };\n            launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);\n        } else\n            launchProcess(new NOOP(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);\n    }\n\n    // ZipReader\n\n    function decodeASCII(str) {\n        var i, out = \"\", charCode, extendedASCII = ['\\u00C7', '\\u00FC', '\\u00E9', '\\u00E2', '\\u00E4', '\\u00E0', '\\u00E5', '\\u00E7', '\\u00EA', '\\u00EB',\n            '\\u00E8', '\\u00EF', '\\u00EE', '\\u00EC', '\\u00C4', '\\u00C5', '\\u00C9', '\\u00E6', '\\u00C6', '\\u00F4', '\\u00F6', '\\u00F2', '\\u00FB', '\\u00F9',\n            '\\u00FF', '\\u00D6', '\\u00DC', '\\u00F8', '\\u00A3', '\\u00D8', '\\u00D7', '\\u0192', '\\u00E1', '\\u00ED', '\\u00F3', '\\u00FA', '\\u00F1', '\\u00D1',\n            '\\u00AA', '\\u00BA', '\\u00BF', '\\u00AE', '\\u00AC', '\\u00BD', '\\u00BC', '\\u00A1', '\\u00AB', '\\u00BB', '_', '_', '_', '\\u00A6', '\\u00A6',\n            '\\u00C1', '\\u00C2', '\\u00C0', '\\u00A9', '\\u00A6', '\\u00A6', '+', '+', '\\u00A2', '\\u00A5', '+', '+', '-', '-', '+', '-', '+', '\\u00E3',\n            '\\u00C3', '+', '+', '-', '-', '\\u00A6', '-', '+', '\\u00A4', '\\u00F0', '\\u00D0', '\\u00CA', '\\u00CB', '\\u00C8', 'i', '\\u00CD', '\\u00CE',\n            '\\u00CF', '+', '+', '_', '_', '\\u00A6', '\\u00CC', '_', '\\u00D3', '\\u00DF', '\\u00D4', '\\u00D2', '\\u00F5', '\\u00D5', '\\u00B5', '\\u00FE',\n            '\\u00DE', '\\u00DA', '\\u00DB', '\\u00D9', '\\u00FD', '\\u00DD', '\\u00AF', '\\u00B4', '\\u00AD', '\\u00B1', '_', '\\u00BE', '\\u00B6', '\\u00A7',\n            '\\u00F7', '\\u00B8', '\\u00B0', '\\u00A8', '\\u00B7', '\\u00B9', '\\u00B3', '\\u00B2', '_', ' '];\n        for (i = 0; i < str.length; i++) {\n            charCode = str.charCodeAt(i) & 0xFF;\n            if (charCode > 127)\n                out += extendedASCII[charCode - 128];\n            else\n                out += String.fromCharCode(charCode);\n        }\n        return out;\n    }\n\n    function decodeUTF8(string) {\n        return decodeURIComponent(escape(string));\n    }\n\n    function getString(bytes) {\n        var i, str = \"\";\n        for (i = 0; i < bytes.length; i++)\n            str += String.fromCharCode(bytes[i]);\n        return str;\n    }\n\n    function getDate(timeRaw) {\n        var date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;\n        try {\n            return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5,\n                (time & 0x001F) * 2, 0);\n        } catch (e) {\n        }\n    }\n\n    function readCommonHeader(entry, data, index, centralDirectory, onerror) {\n        entry.version = data.view.getUint16(index, true);\n        entry.bitFlag = data.view.getUint16(index + 2, true);\n        entry.compressionMethod = data.view.getUint16(index + 4, true);\n        entry.lastModDateRaw = data.view.getUint32(index + 6, true);\n        entry.lastModDate = getDate(entry.lastModDateRaw);\n        if ((entry.bitFlag & 0x01) === 0x01) {\n            onerror(ERR_ENCRYPTED);\n            return;\n        }\n        if (centralDirectory || (entry.bitFlag & 0x0008) != 0x0008) {\n            entry.crc32 = data.view.getUint32(index + 10, true);\n            entry.compressedSize = data.view.getUint32(index + 14, true);\n            entry.uncompressedSize = data.view.getUint32(index + 18, true);\n        }\n        if (entry.compressedSize === 0xFFFFFFFF || entry.uncompressedSize === 0xFFFFFFFF) {\n            onerror(ERR_ZIP64);\n            return;\n        }\n        entry.filenameLength = data.view.getUint16(index + 22, true);\n        entry.extraFieldLength = data.view.getUint16(index + 24, true);\n    }\n\n    function createZipReader(reader, callback, onerror) {\n        var inflateSN = 0;\n\n        function Entry() {\n        }\n\n        Entry.prototype.getData = function (writer, onend, onprogress, checkCrc32) {\n            var that = this;\n\n            function testCrc32(crc32) {\n                var dataCrc32 = getDataHelper(4);\n                dataCrc32.view.setUint32(0, crc32);\n                return that.crc32 == dataCrc32.view.getUint32(0);\n            }\n\n            function getWriterData(uncompressedSize, crc32) {\n                if (checkCrc32 && !testCrc32(crc32))\n                    onerror(ERR_CRC);\n                else\n                    writer.getData(function (data) {\n                        onend(data);\n                    });\n            }\n\n            function onreaderror(err) {\n                onerror(err || ERR_READ_DATA);\n            }\n\n            function onwriteerror(err) {\n                onerror(err || ERR_WRITE_DATA);\n            }\n\n            reader.readUint8Array(that.offset, 30, function (bytes) {\n                var data = getDataHelper(bytes.length, bytes), dataOffset;\n                if (data.view.getUint32(0) != 0x504b0304) {\n                    onerror(ERR_BAD_FORMAT);\n                    return;\n                }\n                readCommonHeader(that, data, 4, false, onerror);\n                dataOffset = that.offset + 30 + that.filenameLength + that.extraFieldLength;\n                writer.init(function () {\n                    if (that.compressionMethod === 0)\n                        copy(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\n                    else\n                        inflate(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);\n                }, onwriteerror);\n            }, onreaderror);\n        };\n\n        function seekEOCDR(eocdrCallback) {\n            // \"End of central directory record\" is the last part of a zip archive, and is at least 22 bytes long.\n            // Zip file comment is the last part of EOCDR and has max length of 64KB,\n            // so we only have to search the last 64K + 22 bytes of a archive for EOCDR signature (0x06054b50).\n            var EOCDR_MIN = 22;\n            if (reader.size < EOCDR_MIN) {\n                onerror(ERR_BAD_FORMAT);\n                return;\n            }\n            var ZIP_COMMENT_MAX = 256 * 256, EOCDR_MAX = EOCDR_MIN + ZIP_COMMENT_MAX;\n\n            // In most cases, the EOCDR is EOCDR_MIN bytes long\n            doSeek(EOCDR_MIN, function () {\n                // If not found, try within EOCDR_MAX bytes\n                doSeek(Math.min(EOCDR_MAX, reader.size), function () {\n                    onerror(ERR_BAD_FORMAT);\n                });\n            });\n\n            // seek last length bytes of file for EOCDR\n            function doSeek(length, eocdrNotFoundCallback) {\n                reader.readUint8Array(reader.size - length, length, function (bytes) {\n                    for (var i = bytes.length - EOCDR_MIN; i >= 0; i--) {\n                        if (bytes[i] === 0x50 && bytes[i + 1] === 0x4b && bytes[i + 2] === 0x05 && bytes[i + 3] === 0x06) {\n                            eocdrCallback(new DataView(bytes.buffer, i, EOCDR_MIN));\n                            return;\n                        }\n                    }\n                    eocdrNotFoundCallback();\n                }, function () {\n                    onerror(ERR_READ);\n                });\n            }\n        }\n\n        var zipReader = {\n            getEntries: function (callback) {\n                var worker = this._worker;\n                // look for End of central directory record\n                seekEOCDR(function (dataView) {\n                    var datalength, fileslength;\n                    datalength = dataView.getUint32(16, true);\n                    fileslength = dataView.getUint16(8, true);\n                    if (datalength < 0 || datalength >= reader.size) {\n                        onerror(ERR_BAD_FORMAT);\n                        return;\n                    }\n                    reader.readUint8Array(datalength, reader.size - datalength, function (bytes) {\n                        var i, index = 0, entries = [], entry, filename, comment, data = getDataHelper(bytes.length, bytes);\n                        for (i = 0; i < fileslength; i++) {\n                            entry = new Entry();\n                            entry._worker = worker;\n                            if (data.view.getUint32(index) != 0x504b0102) {\n                                onerror(ERR_BAD_FORMAT);\n                                return;\n                            }\n                            readCommonHeader(entry, data, index + 6, true, onerror);\n                            entry.commentLength = data.view.getUint16(index + 32, true);\n                            entry.directory = ((data.view.getUint8(index + 38) & 0x10) == 0x10);\n                            entry.offset = data.view.getUint32(index + 42, true);\n                            filename = getString(data.array.subarray(index + 46, index + 46 + entry.filenameLength));\n                            entry.filename = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(filename) : decodeASCII(filename);\n                            if (!entry.directory && entry.filename.charAt(entry.filename.length - 1) == \"/\")\n                                entry.directory = true;\n                            comment = getString(data.array.subarray(index + 46 + entry.filenameLength + entry.extraFieldLength, index + 46\n                                + entry.filenameLength + entry.extraFieldLength + entry.commentLength));\n                            entry.comment = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(comment) : decodeASCII(comment);\n                            entries.push(entry);\n                            index += 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength;\n                        }\n                        callback(entries);\n                    }, function () {\n                        onerror(ERR_READ);\n                    });\n                });\n            },\n            close: function (callback) {\n                if (this._worker) {\n                    this._worker.terminate();\n                    this._worker = null;\n                }\n                if (callback)\n                    callback();\n            },\n            _worker: null\n        };\n\n        if (!obj.zip.useWebWorkers)\n            callback(zipReader);\n        else {\n            createWorker('inflater',\n                function (worker) {\n                    zipReader._worker = worker;\n                    callback(zipReader);\n                },\n                function (err) {\n                    onerror(err);\n                }\n            );\n        }\n    }\n\n    // ZipWriter\n\n    function encodeUTF8(string) {\n        return unescape(encodeURIComponent(string));\n    }\n\n    function getBytes(str) {\n        var i, array = [];\n        for (i = 0; i < str.length; i++)\n            array.push(str.charCodeAt(i));\n        return array;\n    }\n\n    function createZipWriter(writer, callback, onerror, dontDeflate) {\n        var files = {}, filenames = [], datalength = 0;\n        var deflateSN = 0;\n\n        function onwriteerror(err) {\n            onerror(err || ERR_WRITE);\n        }\n\n        function onreaderror(err) {\n            onerror(err || ERR_READ_DATA);\n        }\n\n        var zipWriter = {\n            add: function (name, reader, onend, onprogress, options) {\n                var header, filename, date;\n                var worker = this._worker;\n\n                function writeHeader(callback) {\n                    var data;\n                    date = options.lastModDate || new Date();\n                    header = getDataHelper(26);\n                    files[name] = {\n                        headerArray: header.array,\n                        directory: options.directory,\n                        filename: filename,\n                        offset: datalength,\n                        comment: getBytes(encodeUTF8(options.comment || \"\"))\n                    };\n                    header.view.setUint32(0, 0x14000808);\n                    if (options.version)\n                        header.view.setUint8(0, options.version);\n                    if (!dontDeflate && options.level !== 0 && !options.directory)\n                        header.view.setUint16(4, 0x0800);\n                    header.view.setUint16(6, (((date.getHours() << 6) | date.getMinutes()) << 5) | date.getSeconds() / 2, true);\n                    header.view.setUint16(8, ((((date.getFullYear() - 1980) << 4) | (date.getMonth() + 1)) << 5) | date.getDate(), true);\n                    header.view.setUint16(22, filename.length, true);\n                    data = getDataHelper(30 + filename.length);\n                    data.view.setUint32(0, 0x504b0304);\n                    data.array.set(header.array, 4);\n                    data.array.set(filename, 30);\n                    datalength += data.array.length;\n                    writer.writeUint8Array(data.array, callback, onwriteerror);\n                }\n\n                function writeFooter(compressedLength, crc32) {\n                    var footer = getDataHelper(16);\n                    datalength += compressedLength || 0;\n                    footer.view.setUint32(0, 0x504b0708);\n                    if (typeof crc32 != \"undefined\") {\n                        header.view.setUint32(10, crc32, true);\n                        footer.view.setUint32(4, crc32, true);\n                    }\n                    if (reader) {\n                        footer.view.setUint32(8, compressedLength, true);\n                        header.view.setUint32(14, compressedLength, true);\n                        footer.view.setUint32(12, reader.size, true);\n                        header.view.setUint32(18, reader.size, true);\n                    }\n                    writer.writeUint8Array(footer.array, function () {\n                        datalength += 16;\n                        onend();\n                    }, onwriteerror);\n                }\n\n                function writeFile() {\n                    options = options || {};\n                    name = name.trim();\n                    if (options.directory && name.charAt(name.length - 1) != \"/\")\n                        name += \"/\";\n                    if (files.hasOwnProperty(name)) {\n                        onerror(ERR_DUPLICATED_NAME);\n                        return;\n                    }\n                    filename = getBytes(encodeUTF8(name));\n                    filenames.push(name);\n                    writeHeader(function () {\n                        if (reader)\n                            if (dontDeflate || options.level === 0)\n                                copy(worker, deflateSN++, reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);\n                            else\n                                deflate(worker, deflateSN++, reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);\n                        else\n                            writeFooter();\n                    }, onwriteerror);\n                }\n\n                if (reader)\n                    reader.init(writeFile, onreaderror);\n                else\n                    writeFile();\n            },\n            close: function (callback) {\n                if (this._worker) {\n                    this._worker.terminate();\n                    this._worker = null;\n                }\n\n                var data, length = 0, index = 0, indexFilename, file;\n                for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n                    file = files[filenames[indexFilename]];\n                    length += 46 + file.filename.length + file.comment.length;\n                }\n                data = getDataHelper(length + 22);\n                for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n                    file = files[filenames[indexFilename]];\n                    data.view.setUint32(index, 0x504b0102);\n                    data.view.setUint16(index + 4, 0x1400);\n                    data.array.set(file.headerArray, index + 6);\n                    data.view.setUint16(index + 32, file.comment.length, true);\n                    if (file.directory)\n                        data.view.setUint8(index + 38, 0x10);\n                    data.view.setUint32(index + 42, file.offset, true);\n                    data.array.set(file.filename, index + 46);\n                    data.array.set(file.comment, index + 46 + file.filename.length);\n                    index += 46 + file.filename.length + file.comment.length;\n                }\n                data.view.setUint32(index, 0x504b0506);\n                data.view.setUint16(index + 8, filenames.length, true);\n                data.view.setUint16(index + 10, filenames.length, true);\n                data.view.setUint32(index + 12, length, true);\n                data.view.setUint32(index + 16, datalength, true);\n                writer.writeUint8Array(data.array, function () {\n                    writer.getData(callback);\n                }, onwriteerror);\n            },\n            _worker: null\n        };\n\n        if (!obj.zip.useWebWorkers)\n            callback(zipWriter);\n        else {\n            createWorker('deflater',\n                function (worker) {\n                    zipWriter._worker = worker;\n                    callback(zipWriter);\n                },\n                function (err) {\n                    onerror(err);\n                }\n            );\n        }\n    }\n\n    function resolveURLs(urls) {\n        var a = document.createElement('a');\n        return urls.map(function (url) {\n            a.href = url;\n            return a.href;\n        });\n    }\n\n    var DEFAULT_WORKER_SCRIPTS = {\n        deflater: ['z-worker.js', 'deflate.js'],\n        inflater: ['z-worker.js', 'inflate.js']\n    };\n\n    function createWorker(type, callback, onerror) {\n        if (obj.zip.workerScripts !== null && obj.zip.workerScriptsPath !== null) {\n            onerror(new Error('Either zip.workerScripts or zip.workerScriptsPath may be set, not both.'));\n            return;\n        }\n        var scripts;\n        if (obj.zip.workerScripts) {\n            scripts = obj.zip.workerScripts[type];\n            if (!Array.isArray(scripts)) {\n                onerror(new Error('zip.workerScripts.' + type + ' is not an array!'));\n                return;\n            }\n            scripts = resolveURLs(scripts);\n        } else {\n            scripts = DEFAULT_WORKER_SCRIPTS[type].slice(0);\n            scripts[0] = (obj.zip.workerScriptsPath || '') + scripts[0];\n        }\n        var worker = new Worker(scripts[0]);\n        // record total consumed time by inflater/deflater/crc32 in this worker\n        worker.codecTime = worker.crcTime = 0;\n        worker.postMessage({type: 'importScripts', scripts: scripts.slice(1)});\n        worker.addEventListener('message', onmessage);\n        function onmessage(ev) {\n            var msg = ev.data;\n            if (msg.error) {\n                worker.terminate(); // should before onerror(), because onerror() may throw.\n                onerror(msg.error);\n                return;\n            }\n            if (msg.type === 'importScripts') {\n                worker.removeEventListener('message', onmessage);\n                worker.removeEventListener('error', errorHandler);\n                callback(worker);\n            }\n        }\n\n        // catch entry script loading error and other unhandled errors\n        worker.addEventListener('error', errorHandler);\n        function errorHandler(err) {\n            worker.terminate();\n            onerror(err);\n        }\n    }\n\n    function onerror_default(error) {\n        console.error(error);\n    }\n\n    obj.zip = {\n        Reader: Reader,\n        Writer: Writer,\n        BlobReader: BlobReader,\n        Data64URIReader: Data64URIReader,\n        TextReader: TextReader,\n        BlobWriter: BlobWriter,\n        Data64URIWriter: Data64URIWriter,\n        TextWriter: TextWriter,\n        createReader: function (reader, callback, onerror) {\n            onerror = onerror || onerror_default;\n\n            reader.init(function () {\n                createZipReader(reader, callback, onerror);\n            }, onerror);\n        },\n        createWriter: function (writer, callback, onerror, dontDeflate) {\n            onerror = onerror || onerror_default;\n            dontDeflate = !!dontDeflate;\n\n            writer.init(function () {\n                createZipWriter(writer, callback, onerror, dontDeflate);\n            }, onerror);\n        },\n        useWebWorkers: true,\n        /**\n         * Directory containing the default worker scripts (z-worker.js, deflate.js, and inflate.js), relative to current base url.\n         * E.g.: zip.workerScripts = './';\n         */\n        workerScriptsPath: null,\n        /**\n         * Advanced option to control which scripts are loaded in the Web worker. If this option is specified, then workerScriptsPath must not be set.\n         * workerScripts.deflater/workerScripts.inflater should be arrays of urls to scripts for deflater/inflater, respectively.\n         * Scripts in the array are executed in order, and the first one should be z-worker.js, which is used to start the worker.\n         * All urls are relative to current base url.\n         * E.g.:\n         * zip.workerScripts = {\n\t\t *   deflater: ['z-worker.js', 'deflate.js'],\n\t\t *   inflater: ['z-worker.js', 'inflate.js']\n\t\t * };\n         */\n        workerScripts: null,\n    };\n\n})(zipLib);\n\nexport {zipLib};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/zip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 531,
    "kind": "variable",
    "name": "zipLib",
    "memberof": "viewer/plugins/XML3DModelsPlugin/zipjs/zip.js",
    "static": true,
    "longname": "viewer/plugins/XML3DModelsPlugin/zipjs/zip.js~zipLib",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/viewer/plugins/XML3DModelsPlugin/zipjs/zip.js",
    "importStyle": "{zipLib}",
    "description": "",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 532,
    "kind": "file",
    "name": "viewer/plugins/XML3DModelsPlugin/zipjs/zlib-asm/codecs.js",
    "content": "/// wrapper for zlib-asm (https://github.com/ukyo/zlib-asm)\n\n/* globals zlib */\n(function(global) {\n\t\"use strict\";\n\n\tfunction Codec(isDeflater, options) {\n\t\tthis._isDeflater = isDeflater;\n\t\tif (options && typeof options.level === 'number')\n\t\t\tthis.level = options.level;\n\t\tthis._inputLength = 0;\n\t\tthis._input = [];\n\t}\n\tCodec.prototype.append = function append(bytes, onprogress) {\n\t\tthis._inputLength += bytes.length;\n\t\tthis._input.push(bytes);\n\t};\n\tCodec.prototype.flush = function flush() {\n\t\tvar bytes;\n\t\tvar input = this._input;\n\t\tif (input.length === 1)\n\t\t\tbytes = input[0];\n\t\telse {\n\t\t\tbytes = new Uint8Array(this._inputLength);\n\t\t\tfor (var i = 0, n = input.length, off = 0; i < n; i++) {\n\t\t\t\tvar slice = input[i];\n\t\t\t\tbytes.set(slice, off);\n\t\t\t\toff += slice.length;\n\t\t\t}\n\t\t}\n\t\treturn this._isDeflater ?\n\t\t\tzlib.rawDeflate(bytes, this.level) :\n\t\t\tzlib.rawInflate(bytes);\n\t};\n\n\tfunction Deflater(options) {\n\t\tCodec.call(this, true, options);\n\t}\n\tDeflater.prototype = Object.create(Codec.prototype);\n\tfunction Inflater() {\n\t\tCodec.call(this, false);\n\t}\n\tInflater.prototype = Object.create(Codec.prototype);\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Deflater = env._zlib_asm_Deflater = Deflater;\n\tenv.Inflater = env._zlib_asm_Inflater = Inflater;\n})(this);",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/viewer/plugins/XML3DModelsPlugin/zipjs/zlib-asm/codecs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# xeokit-sdk\n\n**xeokit-sdk** is an [EULA-licensed](https://github.com/xeolabs/xeokit.io/wiki/License) software development kit from [xeolabs](http://xeolabs.com) for developing high-performance Web-based 3D visualization applications on the open source\n[xeogl](http://xeogl.org) WebGL library.\n\nFind additional information in the xeokit [Wiki](https://github.com/xeolabs/xeokit.io/wiki).",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"xeokit-sdk\",\n  \"version\": \"1.0.0\",\n  \"description\": \"SDK for building high-performance visualizations on xeogl\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/xeolabs/xeokit-sdk.git\"\n  },\n  \"keywords\": [\n    \"webgl\",\n    \"xeogl\",\n    \"bim\",\n    \"cad\"\n  ],\n  \"author\": \"Lindsay Kay\",\n  \"license\": \"SEE LICENSE IN LICENSE.txt\",\n  \"bugs\": {\n    \"url\": \"https://github.com/xeolabs/xeokit-sdk/issues\"\n  },\n  \"homepage\": \"https://github.com/xeolabs/xeokit-sdk#readme\",\n  \"dependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]